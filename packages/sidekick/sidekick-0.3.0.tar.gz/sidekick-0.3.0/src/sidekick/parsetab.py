
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'jsonCOLON COMMA KEYWORD LBRACE LBRACK NUMBER RBRACE RBRACK STRINGarray : LBRACK RBRACKarray : LBRACK items RBRACKatom : NUMBERatom : KEYWORDatom : stringitems : json COMMA itemsitems : jsonjson : objectjson : arrayjson : atomobject : LBRACE RBRACEobject : LBRACE pairs RBRACEpair   : string COLON jsonpairs  : pair COMMA pairspairs  : pairstring : STRING'
    
_lr_action_items = {'LBRACE':([0,6,20,22,],[5,5,5,5,]),'LBRACK':([0,6,20,22,],[6,6,6,6,]),'NUMBER':([0,6,20,22,],[7,7,7,7,]),'KEYWORD':([0,6,20,22,],[8,8,8,8,]),'STRING':([0,5,6,19,20,22,],[10,10,10,10,10,10,]),'$end':([1,2,3,4,7,8,9,10,11,15,18,21,],[0,-8,-9,-10,-3,-4,-5,-16,-11,-1,-12,-2,]),'COMMA':([2,3,4,7,8,9,10,11,13,15,17,18,21,24,],[-8,-9,-10,-3,-4,-5,-16,-11,19,-1,22,-12,-2,-13,]),'RBRACK':([2,3,4,6,7,8,9,10,11,15,16,17,18,21,25,],[-8,-9,-10,15,-3,-4,-5,-16,-11,-1,21,-7,-12,-2,-6,]),'RBRACE':([2,3,4,5,7,8,9,10,11,12,13,15,18,21,23,24,],[-8,-9,-10,11,-3,-4,-5,-16,-11,18,-15,-1,-12,-2,-14,-13,]),'COLON':([10,14,],[-16,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'json':([0,6,20,22,],[1,17,24,17,]),'object':([0,6,20,22,],[2,2,2,2,]),'array':([0,6,20,22,],[3,3,3,3,]),'atom':([0,6,20,22,],[4,4,4,4,]),'string':([0,5,6,19,20,22,],[9,14,9,14,9,9,]),'pairs':([5,19,],[12,23,]),'pair':([5,19,],[13,13,]),'items':([6,22,],[16,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> json","S'",1,None,None,None),
  ('array -> LBRACK RBRACK','array',2,'p_array_1','parser.py',89),
  ('array -> LBRACK items RBRACK','array',3,'p_array_2','parser.py',89),
  ('atom -> NUMBER','atom',1,'p_atom_1','parser.py',89),
  ('atom -> KEYWORD','atom',1,'p_atom_2','parser.py',89),
  ('atom -> string','atom',1,'p_atom_3','parser.py',89),
  ('items -> json COMMA items','items',3,'p_items_1','parser.py',89),
  ('items -> json','items',1,'p_items_2','parser.py',89),
  ('json -> object','json',1,'p_json_1','parser.py',89),
  ('json -> array','json',1,'p_json_2','parser.py',89),
  ('json -> atom','json',1,'p_json_3','parser.py',89),
  ('object -> LBRACE RBRACE','object',2,'p_object_1','parser.py',89),
  ('object -> LBRACE pairs RBRACE','object',3,'p_object_2','parser.py',89),
  ('pair -> string COLON json','pair',3,'p_pair_1','parser.py',89),
  ('pairs -> pair COMMA pairs','pairs',3,'p_pairs_1','parser.py',89),
  ('pairs -> pair','pairs',1,'p_pairs_2','parser.py',89),
  ('string -> STRING','string',1,'p_string_1','parser.py',89),
]
