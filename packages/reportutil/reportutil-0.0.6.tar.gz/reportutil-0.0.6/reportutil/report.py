# encoding: utf-8

import os
import logging_helper
from .components import ReportDirNode
from ._constants import ReportConstant
from ._exceptions import ReportingError

logging = logging_helper.setup_logging()


"""
TODO LIST

 √ allow addition of objects i.e table to a report body etc
 √ report dir structure for more complex reports
 + reports are all in HTML for now, we may expand this later
 + report structure configuration so that generation of one report in an app can trigger a full report structure
   update for an app (inc. breadcrumbs for traversal etc)  Thi also allows for a single report entry point for app.
 √ cfg: root path on init of Report object plus an object detailing report structure
 + each dir will have an index file. which can be generated by user.  This may require a wrapper to be created 
   to allow breadcrumb updating
 + Load config and create node objects for existing nodes

report header:
 + report title
 + breadcrumb

report body

report footer

extras:
 + report tooltip generation for Tk?
 + cache time for report to clear up expired reports?

"""


class Report(ReportDirNode):

    def __init__(self,
                 root_dir=None,
                 *args,
                 **kwargs):

        """

        :param root_dir:    The root directory where the report structure will be generated.
        """

        super(Report, self).__init__(*args, **kwargs)

        # If no root directory provided setup default report root directory.
        if root_dir is None:
            root_dir = os.path.join(self._cfg.data_path_unversioned,
                                    ReportConstant.default_root_dir_name)

        # Check for existing root dir config
        if self.report_root_dir != u'':
            if self.report_root_dir != root_dir:
                # Directory paths do not match so raise an error!
                # TODO: Add support for multiple reports
                raise ReportingError(u'Root dir does not match previously configured root dir!  '
                                     u'Report class currently only supports a single '
                                     u'root dir configuration per application.')

        else:
            self.report_root_dir = root_dir

    @property
    def type(self):
        return ReportConstant.types.root

    @property
    def path(self):
        return self.report_root_dir

    @property
    def report_root_dir(self):
        return self._cfg[u'{cfg}.{key}'.format(cfg=ReportConstant.config.key,
                                               key=ReportConstant.config_properties.report_root)]

    @report_root_dir.setter
    def report_root_dir(self,
                        value):
        self._cfg[u'{cfg}.{key}'.format(cfg=ReportConstant.config.key,
                                        key=ReportConstant.config_properties.report_root)] = value

    def move(self,
             location=None):

        """ Moves the report node to new location including any children of this node.

        :param location:    (string) Moves this root node to new filesystem location.
        """

        self._move_files(location=location)

        # Update location property
        self.report_root_dir = location
