# -*- coding: utf-8 -*-
"""
В данном модуле определяется самый базовый JIM-класс,а также
всё, что с ним может быть связано. Все остальные JIM-классы должны
наследоваться от него.
Иерархия JIM-классов:
                            JIMBase
                          /        \
            JIMActionBase           JIMResponseBase
                  |                         |
        JIMToServerAuth             JIMToClientResponseAlert
        JIMToServerQuit             JIMToClientResponseError
        JIMToServerPresence         JIMToClientQuantity
        JIMToClientProbe
        JIMToServerPersonalMsg
        JIMToServerChatMsg
        JIMToServerJoinChat
        JIMToServerLeaveChat
        JIMToServerGetContacts
        JIMToServerManageContact
        JIMToClientContactList
        JIMToClientMsgList

Какждый JIM-класс для удобства пользования содержит следующие методы:
[*] to_dict()
    - метод, который возвращает сформированную JSON-структуру. Полученная
      JSON-структура может быть далее сконвертирована в тип bytes и отправлена.
[*] from_dict()
    - метод, который удобно использовать при получении JSON-структуры от
      клиента/сервера, когда нужно её преобразовать в объект соответствующего
      класса.
[*] is_correct_format()
    - статический метод, который хорошо вписывается в интерфейс JIM-классов.
      Осуществляет валидацию принятой JSON-структуры: соответствует она текущему
      JIM-классу или нет.
[*] serialize()
    - осуществляет сериализацию данных для последующей передачи клиенту/серверу.
[*] deserialize()
    - осуществляет десериализацию принятых от клиента/сервера данных для их
      последующей обработки.
"""
import abc
from enum import Enum
from Solution.NCryptoTools.Utils.utilities import serialize, deserialize


class JSONObjectType(Enum):
    """
    Перечисление различных типов JSON-объектов, которые описаны в методичке
    к 1 уроку. Может быть ращирено новыми методами actions.
    """
    # Незивестный тип JSON-объекта, пользователь ошибся, видимо
    UNKNOWN_JSON_OBJECT_TYPE = -1,

    # ########################################################################
    # Сообщения от КЛИЕНТА к СЕРВЕРУ
    # ########################################################################

    # Авторизация клиента при входе на сервер
    TO_SERVER_AUTH = 0,

    # Отключение клиента от сервера
    TO_SERVER_QUIT = 1,

    # Присутствие клиента на сервере (Presence)
    TO_SERVER_PRESENCE = 2,

    # Сообщение от пользователя к пользователю
    TO_SERVER_PERSONAL_MSG = 3,

    # Сообщение от пользователя к чату. Обрабатывается также, как и
    # сообщение от пользователя к пользователю, но с дополнением:
    # имя чата имеет префикс '#' (то есть сервер должен проверять поле
    # 'to' для всех сообщений и переправлять сообщение всем online-пользователям
    # данного чата.
    TO_SERVER_CHAT_MSG = 4,

    # Присоедениться к чату
    TO_SERVER_JOIN_CHAT = 5,

    # Покинуть чат
    TO_SERVER_LEAVE_CHAT = 6,

    # Получить список контактов
    TO_SERVER_GET_CONTACTS = 7,

    # Сообщение серверу, что необходимо добавить контакт для данного пользователя
    TO_SERVER_ADD_CONTACT = 8,

    # Сообщение серверу, что необходимо удалить контакт данного пользователя
    TO_SERVER_DEL_CONTACT = 9,

    # Сообщение серверу, что необходимо вернуть список сообщений для данной беседы
    TO_SERVER_GET_MSGS = 10,

    # ########################################################################
    # Сообщения от СЕРВЕРА к КЛИЕНТА
    # ########################################################################

    # Ответ сервера на какое-либо действие клиента (обычный ответ)
    TO_CLIENT_INFO = 50,

    # Ответ сервера на какое-либо действие клиента (произошла ошибка)
    TO_CLIENT_ERROR = 51,

    # Проверка доступности пользователя online (Probe-запрос)
    TO_CLIENT_PROBE = 52,

    # Сообщение от сервера, которое содержит количественный показатель чего-либо
    TO_CLIENT_QUANTITY = 53,

    # Сообщение от сервера, которое содержит логин пользователя
    TO_CLIENT_CONTACT_LIST = 54,

    # Сообщение от сервера, с текстом одного из сообщений
    TO_CLIENT_MSG_LIST = 55


class UnknownJSONObjectType(Exception):
    """
    Класс для исключений при некорректном типе JSON-объекта.
    """
    def __init__(self, json_object_type):
        """
        Конструктор. Сохраняет некооректное значение JSON-объекта.
        @param json_object_type: некорректное значение JSON-объекта.
        """
        self.json_object_type = json_object_type

    def __str__(self):
        """
        Выводит текст исключения.
        @return: строка исключения в читаемой форме.
        """
        return 'Некорректный тип JSON-объекта был принят: {}'.format(self.json_object_type)


class JIMBase:
    """
    Базовый класс для всех JIM-классов.
    """
    def __init__(self, json_object_type):
        """
        Конструктор.
        @param json_object_type: тип JSON-объекта.
        """
        self._json_object_type = json_object_type

    @abc.abstractmethod
    def to_dict(self):
        """
        Абстрактный метод. В классах наследниках он преобразует
        отдельные поля класса в JSON-объект с правильной структурой.
        @return: в классах наследниках возвращается сформированный JSON-объект.
        """
        pass

    @abc.abstractmethod
    def from_dict(self, msg_dict):
        """
        Абстракнтый метод. В классах наследниках он распаковывает
        JSON-объект и заполняет поля класса в соответствии со знаечниями,
        взятыми из словаря.
        @param msg_dict: JSON-объект, который нуждается в распаковке.
        @return: в классах наследниках возвращает экзепляр JIM-класса
        со значениями атрибутов, взятых из JSON-структуры.
        """
        pass

    @staticmethod
    @abc.abstractmethod
    def is_correct_format(msg_dict):
        """
        Статический абстрактный метод, который проверяет правильность
        JSON-структуры для данного типа JIM-объектов.
        @param msg_dict: JSON-структура, которая нуждается в проверке.
        @return: в классах наследниках возвращает логическое значение
        правильности JSON-структуры. (Boolean)
        """
        pass

    def serialize(self):
        """
        Осуществляет сериализацию данных. Данный метод является общим для
        всей иерархии JIM-классов, поэтому расположен здесь.
        @return: сериализованные данные.
        """
        msg_dict = self.to_dict()
        return serialize(msg_dict)

    def deserialize(self, msg_bytes):
        """
        Осуществляет десериализацию данных и заполнение полей класса.
        Данный метод является общим для всей иерархии JIM-классов,
        поэтому расположен здесь.
        @param msg_bytes: данные, представленные в виде набора байтов.
        @return: -
        """
        msg_dict = deserialize(msg_bytes)
        self.from_dict(msg_dict)
