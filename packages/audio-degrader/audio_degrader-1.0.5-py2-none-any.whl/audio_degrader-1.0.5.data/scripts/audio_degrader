#!python
import os
import argparse
import audio_degrader

EXAMPLE_STR = '    audio_degrader -i {0} -d {1} -o {2}'.format(
    'input.wav',
    ('gain,-15 ' +
     'mix,"sounds/ambience-pub.wav"//12 ' +
     'dr-compression,3 ' +
     'mp3,1 ' +
     'gain,15'),
    'output.wav')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""Process audio with a sequence of degradations
    Accepted degradadations:
        start,time: Remove audio until start. Value in seconds.
        mp3,quality: Mp3 compression. Value is quality (1-5)
        gain,db: Gain. Value is dB (e.g. gain,-20.3).
        normalize,percentage: Normalize. Percentage in 0.0-1.0 (1.0=full range)
        mix,"sound_path"//snr: Mix with sound at a specified SNR.
                               See --list-resources option.
        impulse-response,"impulse_response_path"//level: Apply impulse response
                                                         Level 0.0-1.0
                               See --list-resources option.
        dr-compression,degree: Dynamic range compression. Degree 1,2 or 3.
        time-stretching,ratio: Apply time streting.
        pitch-shifting,cents: Apply pitch shifting.
        eq,freq_hz//bw_hz//gain_db: Apply equalization with sox.
        """,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog='\n'.join(["Note: all audios are transcoded to mono, pcm_s16le",
                          "",
                          "Example: ",
                         EXAMPLE_STR]))

    parser.add_argument('-i', '--input',
                        type=str,
                        help='Input audio wav')
    parser.add_argument('-d', '--degradations', metavar='degradation,value',
                        type=str,
                        nargs='*',
                        help='List of sequential degradations')
    parser.add_argument('-o', '--output',
                        type=str,
                        help='Output audio wav')
    parser.add_argument('-l', '--list-resources', action='store_true',
                        dest='list_resources',
                        help='List all available resources')
    args = vars(parser.parse_args())
    if (not args['input'] or
        not args['output'] or
            not args['degradations']) and not args['list_resources']:
        parser.print_help()
        exit(1)
    if args['list_resources']:
        resources_dir = os.path.join(audio_degrader.__path__[0],
                                     'resources')
        print "Available resources"
        print "Directory: {0}".format(resources_dir)
        for root, dirs, fnames in os.walk(resources_dir):
            rel_dir = os.path.relpath(root, resources_dir)
            for fname in fnames:
                if os.path.splitext(fname)[1] == '.wav':
                    print "  " + os.path.join(rel_dir, fname)

        exit(0)

    audio_degrader.main(args['input'],
                        args['degradations'],
                        args['output'])
