# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChartSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, max=None, y1_units=None, min=None, y1_max=None, y1_min=None, window_size=None, y0_scale_si_by1024=None, y1_scale_si_by1024=None, y0_unit_autoscaling=None, y1_unit_autoscaling=None, expected_data_spacing=None, line_type=None, group_by_source=None, stack_type=None, ymax=None, ymin=None, xmax=None, xmin=None, time_based_coloring=None, custom_tags=None, windowing=None, show_hosts=None, show_labels=None, show_raw_values=None, num_tags=None, sort_values_descending=None, tag_mode=None, fixed_legend_enabled=None, fixed_legend_position=None, fixed_legend_display_stats=None, fixed_legend_filter_field=None, fixed_legend_filter_limit=None, fixed_legend_filter_sort=None, fixed_legend_use_raw_stats=None, invert_dynamic_legend_hover_control=None, sparkline_display_value_type=None, sparkline_display_color=None, sparkline_display_horizontal_position=None, sparkline_display_font_size=None, sparkline_display_prefix=None, sparkline_display_postfix=None, sparkline_size=None, sparkline_line_color=None, sparkline_fill_color=None, sparkline_value_color_map_colors=None, sparkline_value_color_map_values_v2=None, sparkline_value_color_map_apply_to=None, sparkline_decimal_precision=None, sparkline_value_text_map_text=None, sparkline_value_text_map_thresholds=None, markdown_content=None, plain_markdown_content=None, auto_column_tags=None, column_tags=None, fixed_legend_hide_label=None, sparkline_display_vertical_position=None, sparkline_value_color_map_values=None):
        """
        ChartSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'max': 'float',
            'y1_units': 'str',
            'min': 'float',
            'y1_max': 'float',
            'y1_min': 'float',
            'window_size': 'int',
            'y0_scale_si_by1024': 'bool',
            'y1_scale_si_by1024': 'bool',
            'y0_unit_autoscaling': 'bool',
            'y1_unit_autoscaling': 'bool',
            'expected_data_spacing': 'int',
            'line_type': 'str',
            'group_by_source': 'bool',
            'stack_type': 'str',
            'ymax': 'float',
            'ymin': 'float',
            'xmax': 'float',
            'xmin': 'float',
            'time_based_coloring': 'bool',
            'custom_tags': 'list[str]',
            'windowing': 'str',
            'show_hosts': 'bool',
            'show_labels': 'bool',
            'show_raw_values': 'bool',
            'num_tags': 'int',
            'sort_values_descending': 'bool',
            'tag_mode': 'str',
            'fixed_legend_enabled': 'bool',
            'fixed_legend_position': 'str',
            'fixed_legend_display_stats': 'list[str]',
            'fixed_legend_filter_field': 'str',
            'fixed_legend_filter_limit': 'int',
            'fixed_legend_filter_sort': 'str',
            'fixed_legend_use_raw_stats': 'bool',
            'invert_dynamic_legend_hover_control': 'bool',
            'sparkline_display_value_type': 'str',
            'sparkline_display_color': 'str',
            'sparkline_display_horizontal_position': 'str',
            'sparkline_display_font_size': 'str',
            'sparkline_display_prefix': 'str',
            'sparkline_display_postfix': 'str',
            'sparkline_size': 'str',
            'sparkline_line_color': 'str',
            'sparkline_fill_color': 'str',
            'sparkline_value_color_map_colors': 'list[str]',
            'sparkline_value_color_map_values_v2': 'list[float]',
            'sparkline_value_color_map_apply_to': 'str',
            'sparkline_decimal_precision': 'int',
            'sparkline_value_text_map_text': 'list[str]',
            'sparkline_value_text_map_thresholds': 'list[float]',
            'markdown_content': 'str',
            'plain_markdown_content': 'str',
            'auto_column_tags': 'bool',
            'column_tags': 'str',
            'fixed_legend_hide_label': 'bool',
            'sparkline_display_vertical_position': 'str',
            'sparkline_value_color_map_values': 'list[int]'
        }

        self.attribute_map = {
            'type': 'type',
            'max': 'max',
            'y1_units': 'y1Units',
            'min': 'min',
            'y1_max': 'y1Max',
            'y1_min': 'y1Min',
            'window_size': 'windowSize',
            'y0_scale_si_by1024': 'y0ScaleSIBy1024',
            'y1_scale_si_by1024': 'y1ScaleSIBy1024',
            'y0_unit_autoscaling': 'y0UnitAutoscaling',
            'y1_unit_autoscaling': 'y1UnitAutoscaling',
            'expected_data_spacing': 'expectedDataSpacing',
            'line_type': 'lineType',
            'group_by_source': 'groupBySource',
            'stack_type': 'stackType',
            'ymax': 'ymax',
            'ymin': 'ymin',
            'xmax': 'xmax',
            'xmin': 'xmin',
            'time_based_coloring': 'timeBasedColoring',
            'custom_tags': 'customTags',
            'windowing': 'windowing',
            'show_hosts': 'showHosts',
            'show_labels': 'showLabels',
            'show_raw_values': 'showRawValues',
            'num_tags': 'numTags',
            'sort_values_descending': 'sortValuesDescending',
            'tag_mode': 'tagMode',
            'fixed_legend_enabled': 'fixedLegendEnabled',
            'fixed_legend_position': 'fixedLegendPosition',
            'fixed_legend_display_stats': 'fixedLegendDisplayStats',
            'fixed_legend_filter_field': 'fixedLegendFilterField',
            'fixed_legend_filter_limit': 'fixedLegendFilterLimit',
            'fixed_legend_filter_sort': 'fixedLegendFilterSort',
            'fixed_legend_use_raw_stats': 'fixedLegendUseRawStats',
            'invert_dynamic_legend_hover_control': 'invertDynamicLegendHoverControl',
            'sparkline_display_value_type': 'sparklineDisplayValueType',
            'sparkline_display_color': 'sparklineDisplayColor',
            'sparkline_display_horizontal_position': 'sparklineDisplayHorizontalPosition',
            'sparkline_display_font_size': 'sparklineDisplayFontSize',
            'sparkline_display_prefix': 'sparklineDisplayPrefix',
            'sparkline_display_postfix': 'sparklineDisplayPostfix',
            'sparkline_size': 'sparklineSize',
            'sparkline_line_color': 'sparklineLineColor',
            'sparkline_fill_color': 'sparklineFillColor',
            'sparkline_value_color_map_colors': 'sparklineValueColorMapColors',
            'sparkline_value_color_map_values_v2': 'sparklineValueColorMapValuesV2',
            'sparkline_value_color_map_apply_to': 'sparklineValueColorMapApplyTo',
            'sparkline_decimal_precision': 'sparklineDecimalPrecision',
            'sparkline_value_text_map_text': 'sparklineValueTextMapText',
            'sparkline_value_text_map_thresholds': 'sparklineValueTextMapThresholds',
            'markdown_content': 'markdownContent',
            'plain_markdown_content': 'plainMarkdownContent',
            'auto_column_tags': 'autoColumnTags',
            'column_tags': 'columnTags',
            'fixed_legend_hide_label': 'fixedLegendHideLabel',
            'sparkline_display_vertical_position': 'sparklineDisplayVerticalPosition',
            'sparkline_value_color_map_values': 'sparklineValueColorMapValues'
        }

        self._type = type
        self._max = max
        self._y1_units = y1_units
        self._min = min
        self._y1_max = y1_max
        self._y1_min = y1_min
        self._window_size = window_size
        self._y0_scale_si_by1024 = y0_scale_si_by1024
        self._y1_scale_si_by1024 = y1_scale_si_by1024
        self._y0_unit_autoscaling = y0_unit_autoscaling
        self._y1_unit_autoscaling = y1_unit_autoscaling
        self._expected_data_spacing = expected_data_spacing
        self._line_type = line_type
        self._group_by_source = group_by_source
        self._stack_type = stack_type
        self._ymax = ymax
        self._ymin = ymin
        self._xmax = xmax
        self._xmin = xmin
        self._time_based_coloring = time_based_coloring
        self._custom_tags = custom_tags
        self._windowing = windowing
        self._show_hosts = show_hosts
        self._show_labels = show_labels
        self._show_raw_values = show_raw_values
        self._num_tags = num_tags
        self._sort_values_descending = sort_values_descending
        self._tag_mode = tag_mode
        self._fixed_legend_enabled = fixed_legend_enabled
        self._fixed_legend_position = fixed_legend_position
        self._fixed_legend_display_stats = fixed_legend_display_stats
        self._fixed_legend_filter_field = fixed_legend_filter_field
        self._fixed_legend_filter_limit = fixed_legend_filter_limit
        self._fixed_legend_filter_sort = fixed_legend_filter_sort
        self._fixed_legend_use_raw_stats = fixed_legend_use_raw_stats
        self._invert_dynamic_legend_hover_control = invert_dynamic_legend_hover_control
        self._sparkline_display_value_type = sparkline_display_value_type
        self._sparkline_display_color = sparkline_display_color
        self._sparkline_display_horizontal_position = sparkline_display_horizontal_position
        self._sparkline_display_font_size = sparkline_display_font_size
        self._sparkline_display_prefix = sparkline_display_prefix
        self._sparkline_display_postfix = sparkline_display_postfix
        self._sparkline_size = sparkline_size
        self._sparkline_line_color = sparkline_line_color
        self._sparkline_fill_color = sparkline_fill_color
        self._sparkline_value_color_map_colors = sparkline_value_color_map_colors
        self._sparkline_value_color_map_values_v2 = sparkline_value_color_map_values_v2
        self._sparkline_value_color_map_apply_to = sparkline_value_color_map_apply_to
        self._sparkline_decimal_precision = sparkline_decimal_precision
        self._sparkline_value_text_map_text = sparkline_value_text_map_text
        self._sparkline_value_text_map_thresholds = sparkline_value_text_map_thresholds
        self._markdown_content = markdown_content
        self._plain_markdown_content = plain_markdown_content
        self._auto_column_tags = auto_column_tags
        self._column_tags = column_tags
        self._fixed_legend_hide_label = fixed_legend_hide_label
        self._sparkline_display_vertical_position = sparkline_display_vertical_position
        self._sparkline_value_color_map_values = sparkline_value_color_map_values

    @property
    def type(self):
        """
        Gets the type of this ChartSettings.
        Chart Type.  'line' refers to the Line Plot, 'scatter' to the Point Plot, 'stacked-area' to the Stacked Area plot, 'table' to the Tabular View, 'scatterploy-xy' to Scatter Plot, 'markdown-widget' to the Markdown display, and 'sparkline' to the Single Stat view

        :return: The type of this ChartSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ChartSettings.
        Chart Type.  'line' refers to the Line Plot, 'scatter' to the Point Plot, 'stacked-area' to the Stacked Area plot, 'table' to the Tabular View, 'scatterploy-xy' to Scatter Plot, 'markdown-widget' to the Markdown display, and 'sparkline' to the Single Stat view

        :param type: The type of this ChartSettings.
        :type: str
        """
        allowed_values = ["line", "scatterplot", "stacked-area", "table", "scatterplot-xy", "markdown-widget", "sparkline"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def max(self):
        """
        Gets the max of this ChartSettings.
        Max value of Y-axis.  Set to null or leave blank for auto

        :return: The max of this ChartSettings.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this ChartSettings.
        Max value of Y-axis.  Set to null or leave blank for auto

        :param max: The max of this ChartSettings.
        :type: float
        """

        self._max = max

    @property
    def y1_units(self):
        """
        Gets the y1_units of this ChartSettings.
        For plots with multiple Y-axes, units for right-side Y-axis

        :return: The y1_units of this ChartSettings.
        :rtype: str
        """
        return self._y1_units

    @y1_units.setter
    def y1_units(self, y1_units):
        """
        Sets the y1_units of this ChartSettings.
        For plots with multiple Y-axes, units for right-side Y-axis

        :param y1_units: The y1_units of this ChartSettings.
        :type: str
        """

        self._y1_units = y1_units

    @property
    def min(self):
        """
        Gets the min of this ChartSettings.
        Min value of Y-axis.  Set to null or leave blank for auto

        :return: The min of this ChartSettings.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this ChartSettings.
        Min value of Y-axis.  Set to null or leave blank for auto

        :param min: The min of this ChartSettings.
        :type: float
        """

        self._min = min

    @property
    def y1_max(self):
        """
        Gets the y1_max of this ChartSettings.
        For plots with multiple Y-axes, max value for right-side Y-axis.  Set null for auto

        :return: The y1_max of this ChartSettings.
        :rtype: float
        """
        return self._y1_max

    @y1_max.setter
    def y1_max(self, y1_max):
        """
        Sets the y1_max of this ChartSettings.
        For plots with multiple Y-axes, max value for right-side Y-axis.  Set null for auto

        :param y1_max: The y1_max of this ChartSettings.
        :type: float
        """

        self._y1_max = y1_max

    @property
    def y1_min(self):
        """
        Gets the y1_min of this ChartSettings.
        For plots with multiple Y-axes, min value for right-side Y-axis.  Set null for auto

        :return: The y1_min of this ChartSettings.
        :rtype: float
        """
        return self._y1_min

    @y1_min.setter
    def y1_min(self, y1_min):
        """
        Sets the y1_min of this ChartSettings.
        For plots with multiple Y-axes, min value for right-side Y-axis.  Set null for auto

        :param y1_min: The y1_min of this ChartSettings.
        :type: float
        """

        self._y1_min = y1_min

    @property
    def window_size(self):
        """
        Gets the window_size of this ChartSettings.
        Width, in minutes, of the time window to use for \"last\" windowing

        :return: The window_size of this ChartSettings.
        :rtype: int
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """
        Sets the window_size of this ChartSettings.
        Width, in minutes, of the time window to use for \"last\" windowing

        :param window_size: The window_size of this ChartSettings.
        :type: int
        """

        self._window_size = window_size

    @property
    def y0_scale_si_by1024(self):
        """
        Gets the y0_scale_si_by1024 of this ChartSettings.
        Default: false. Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)

        :return: The y0_scale_si_by1024 of this ChartSettings.
        :rtype: bool
        """
        return self._y0_scale_si_by1024

    @y0_scale_si_by1024.setter
    def y0_scale_si_by1024(self, y0_scale_si_by1024):
        """
        Sets the y0_scale_si_by1024 of this ChartSettings.
        Default: false. Whether to scale numerical magnitude labels for left Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)

        :param y0_scale_si_by1024: The y0_scale_si_by1024 of this ChartSettings.
        :type: bool
        """

        self._y0_scale_si_by1024 = y0_scale_si_by1024

    @property
    def y1_scale_si_by1024(self):
        """
        Gets the y1_scale_si_by1024 of this ChartSettings.
        Default: false. Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)

        :return: The y1_scale_si_by1024 of this ChartSettings.
        :rtype: bool
        """
        return self._y1_scale_si_by1024

    @y1_scale_si_by1024.setter
    def y1_scale_si_by1024(self, y1_scale_si_by1024):
        """
        Sets the y1_scale_si_by1024 of this ChartSettings.
        Default: false. Whether to scale numerical magnitude labels for right Y-axis by 1024 in the IEC/Binary manner (instead of by 1000 like SI)

        :param y1_scale_si_by1024: The y1_scale_si_by1024 of this ChartSettings.
        :type: bool
        """

        self._y1_scale_si_by1024 = y1_scale_si_by1024

    @property
    def y0_unit_autoscaling(self):
        """
        Gets the y0_unit_autoscaling of this ChartSettings.
        Default: false. Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units

        :return: The y0_unit_autoscaling of this ChartSettings.
        :rtype: bool
        """
        return self._y0_unit_autoscaling

    @y0_unit_autoscaling.setter
    def y0_unit_autoscaling(self, y0_unit_autoscaling):
        """
        Sets the y0_unit_autoscaling of this ChartSettings.
        Default: false. Whether to automatically adjust magnitude labels and units for the left Y-axis to favor smaller magnitudes and larger units

        :param y0_unit_autoscaling: The y0_unit_autoscaling of this ChartSettings.
        :type: bool
        """

        self._y0_unit_autoscaling = y0_unit_autoscaling

    @property
    def y1_unit_autoscaling(self):
        """
        Gets the y1_unit_autoscaling of this ChartSettings.
        Default: false. Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units

        :return: The y1_unit_autoscaling of this ChartSettings.
        :rtype: bool
        """
        return self._y1_unit_autoscaling

    @y1_unit_autoscaling.setter
    def y1_unit_autoscaling(self, y1_unit_autoscaling):
        """
        Sets the y1_unit_autoscaling of this ChartSettings.
        Default: false. Whether to automatically adjust magnitude labels and units for the right Y-axis to favor smaller magnitudes and larger units

        :param y1_unit_autoscaling: The y1_unit_autoscaling of this ChartSettings.
        :type: bool
        """

        self._y1_unit_autoscaling = y1_unit_autoscaling

    @property
    def expected_data_spacing(self):
        """
        Gets the expected_data_spacing of this ChartSettings.
        Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid line in line plots.  Default: 60s

        :return: The expected_data_spacing of this ChartSettings.
        :rtype: int
        """
        return self._expected_data_spacing

    @expected_data_spacing.setter
    def expected_data_spacing(self, expected_data_spacing):
        """
        Sets the expected_data_spacing of this ChartSettings.
        Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid line in line plots.  Default: 60s

        :param expected_data_spacing: The expected_data_spacing of this ChartSettings.
        :type: int
        """

        self._expected_data_spacing = expected_data_spacing

    @property
    def line_type(self):
        """
        Gets the line_type of this ChartSettings.
        Plot interpolation type.  linear is default

        :return: The line_type of this ChartSettings.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """
        Sets the line_type of this ChartSettings.
        Plot interpolation type.  linear is default

        :param line_type: The line_type of this ChartSettings.
        :type: str
        """
        allowed_values = ["linear", "step-before", "step-after", "basis", "cardinal", "monotone"]
        if line_type not in allowed_values:
            raise ValueError(
                "Invalid value for `line_type` ({0}), must be one of {1}"
                .format(line_type, allowed_values)
            )

        self._line_type = line_type

    @property
    def group_by_source(self):
        """
        Gets the group_by_source of this ChartSettings.
        For the tabular view, whether to group multi metrics into a single row by a common source.  If false, each metric for each source is displayed in its own row.  If true, multiple metrics for the same host will be displayed as different columns in the same row

        :return: The group_by_source of this ChartSettings.
        :rtype: bool
        """
        return self._group_by_source

    @group_by_source.setter
    def group_by_source(self, group_by_source):
        """
        Sets the group_by_source of this ChartSettings.
        For the tabular view, whether to group multi metrics into a single row by a common source.  If false, each metric for each source is displayed in its own row.  If true, multiple metrics for the same host will be displayed as different columns in the same row

        :param group_by_source: The group_by_source of this ChartSettings.
        :type: bool
        """

        self._group_by_source = group_by_source

    @property
    def stack_type(self):
        """
        Gets the stack_type of this ChartSettings.
        Type of stacked chart (applicable only if chart type is stacked).  zero (default) means stacked from y=0.  expand means Normalized from 0 to 1.  wiggle means Minimize weighted changes. silhouette means to Center the Stream

        :return: The stack_type of this ChartSettings.
        :rtype: str
        """
        return self._stack_type

    @stack_type.setter
    def stack_type(self, stack_type):
        """
        Sets the stack_type of this ChartSettings.
        Type of stacked chart (applicable only if chart type is stacked).  zero (default) means stacked from y=0.  expand means Normalized from 0 to 1.  wiggle means Minimize weighted changes. silhouette means to Center the Stream

        :param stack_type: The stack_type of this ChartSettings.
        :type: str
        """
        allowed_values = ["zero", "expand", "wiggle", "silhouette"]
        if stack_type not in allowed_values:
            raise ValueError(
                "Invalid value for `stack_type` ({0}), must be one of {1}"
                .format(stack_type, allowed_values)
            )

        self._stack_type = stack_type

    @property
    def ymax(self):
        """
        Gets the ymax of this ChartSettings.
        For x-y scatterplots, max value for Y-axis.  Set null for auto

        :return: The ymax of this ChartSettings.
        :rtype: float
        """
        return self._ymax

    @ymax.setter
    def ymax(self, ymax):
        """
        Sets the ymax of this ChartSettings.
        For x-y scatterplots, max value for Y-axis.  Set null for auto

        :param ymax: The ymax of this ChartSettings.
        :type: float
        """

        self._ymax = ymax

    @property
    def ymin(self):
        """
        Gets the ymin of this ChartSettings.
        For x-y scatterplots, min value for Y-axis.  Set null for auto

        :return: The ymin of this ChartSettings.
        :rtype: float
        """
        return self._ymin

    @ymin.setter
    def ymin(self, ymin):
        """
        Sets the ymin of this ChartSettings.
        For x-y scatterplots, min value for Y-axis.  Set null for auto

        :param ymin: The ymin of this ChartSettings.
        :type: float
        """

        self._ymin = ymin

    @property
    def xmax(self):
        """
        Gets the xmax of this ChartSettings.
        For x-y scatterplots, max value for X-axis.  Set null for auto

        :return: The xmax of this ChartSettings.
        :rtype: float
        """
        return self._xmax

    @xmax.setter
    def xmax(self, xmax):
        """
        Sets the xmax of this ChartSettings.
        For x-y scatterplots, max value for X-axis.  Set null for auto

        :param xmax: The xmax of this ChartSettings.
        :type: float
        """

        self._xmax = xmax

    @property
    def xmin(self):
        """
        Gets the xmin of this ChartSettings.
        For x-y scatterplots, min value for X-axis.  Set null for auto

        :return: The xmin of this ChartSettings.
        :rtype: float
        """
        return self._xmin

    @xmin.setter
    def xmin(self, xmin):
        """
        Sets the xmin of this ChartSettings.
        For x-y scatterplots, min value for X-axis.  Set null for auto

        :param xmin: The xmin of this ChartSettings.
        :type: float
        """

        self._xmin = xmin

    @property
    def time_based_coloring(self):
        """
        Gets the time_based_coloring of this ChartSettings.
        Fox x-y scatterplots, whether to color more recent points as darker than older points. Default: false

        :return: The time_based_coloring of this ChartSettings.
        :rtype: bool
        """
        return self._time_based_coloring

    @time_based_coloring.setter
    def time_based_coloring(self, time_based_coloring):
        """
        Sets the time_based_coloring of this ChartSettings.
        Fox x-y scatterplots, whether to color more recent points as darker than older points. Default: false

        :param time_based_coloring: The time_based_coloring of this ChartSettings.
        :type: bool
        """

        self._time_based_coloring = time_based_coloring

    @property
    def custom_tags(self):
        """
        Gets the custom_tags of this ChartSettings.
        For the tabular view, a list of point tags to display when using the \"custom\" tag display mode

        :return: The custom_tags of this ChartSettings.
        :rtype: list[str]
        """
        return self._custom_tags

    @custom_tags.setter
    def custom_tags(self, custom_tags):
        """
        Sets the custom_tags of this ChartSettings.
        For the tabular view, a list of point tags to display when using the \"custom\" tag display mode

        :param custom_tags: The custom_tags of this ChartSettings.
        :type: list[str]
        """

        self._custom_tags = custom_tags

    @property
    def windowing(self):
        """
        Gets the windowing of this ChartSettings.
        For the tabular view, whether to use the full time window for the query or the last X minutes

        :return: The windowing of this ChartSettings.
        :rtype: str
        """
        return self._windowing

    @windowing.setter
    def windowing(self, windowing):
        """
        Sets the windowing of this ChartSettings.
        For the tabular view, whether to use the full time window for the query or the last X minutes

        :param windowing: The windowing of this ChartSettings.
        :type: str
        """
        allowed_values = ["full", "last"]
        if windowing not in allowed_values:
            raise ValueError(
                "Invalid value for `windowing` ({0}), must be one of {1}"
                .format(windowing, allowed_values)
            )

        self._windowing = windowing

    @property
    def show_hosts(self):
        """
        Gets the show_hosts of this ChartSettings.
        For the tabular view, whether to display sources.  Default: true

        :return: The show_hosts of this ChartSettings.
        :rtype: bool
        """
        return self._show_hosts

    @show_hosts.setter
    def show_hosts(self, show_hosts):
        """
        Sets the show_hosts of this ChartSettings.
        For the tabular view, whether to display sources.  Default: true

        :param show_hosts: The show_hosts of this ChartSettings.
        :type: bool
        """

        self._show_hosts = show_hosts

    @property
    def show_labels(self):
        """
        Gets the show_labels of this ChartSettings.
        For the tabular view, whether to display labels.  Default: true

        :return: The show_labels of this ChartSettings.
        :rtype: bool
        """
        return self._show_labels

    @show_labels.setter
    def show_labels(self, show_labels):
        """
        Sets the show_labels of this ChartSettings.
        For the tabular view, whether to display labels.  Default: true

        :param show_labels: The show_labels of this ChartSettings.
        :type: bool
        """

        self._show_labels = show_labels

    @property
    def show_raw_values(self):
        """
        Gets the show_raw_values of this ChartSettings.
        For the tabular view, whether to display raw values.  Default: false

        :return: The show_raw_values of this ChartSettings.
        :rtype: bool
        """
        return self._show_raw_values

    @show_raw_values.setter
    def show_raw_values(self, show_raw_values):
        """
        Sets the show_raw_values of this ChartSettings.
        For the tabular view, whether to display raw values.  Default: false

        :param show_raw_values: The show_raw_values of this ChartSettings.
        :type: bool
        """

        self._show_raw_values = show_raw_values

    @property
    def num_tags(self):
        """
        Gets the num_tags of this ChartSettings.
        For the tabular view, how many point tags to display

        :return: The num_tags of this ChartSettings.
        :rtype: int
        """
        return self._num_tags

    @num_tags.setter
    def num_tags(self, num_tags):
        """
        Sets the num_tags of this ChartSettings.
        For the tabular view, how many point tags to display

        :param num_tags: The num_tags of this ChartSettings.
        :type: int
        """

        self._num_tags = num_tags

    @property
    def sort_values_descending(self):
        """
        Gets the sort_values_descending of this ChartSettings.
        For the tabular view, whether to display display values in descending order.  Default: false

        :return: The sort_values_descending of this ChartSettings.
        :rtype: bool
        """
        return self._sort_values_descending

    @sort_values_descending.setter
    def sort_values_descending(self, sort_values_descending):
        """
        Sets the sort_values_descending of this ChartSettings.
        For the tabular view, whether to display display values in descending order.  Default: false

        :param sort_values_descending: The sort_values_descending of this ChartSettings.
        :type: bool
        """

        self._sort_values_descending = sort_values_descending

    @property
    def tag_mode(self):
        """
        Gets the tag_mode of this ChartSettings.
        For the tabular view, which mode to use to determine which point tags to display

        :return: The tag_mode of this ChartSettings.
        :rtype: str
        """
        return self._tag_mode

    @tag_mode.setter
    def tag_mode(self, tag_mode):
        """
        Sets the tag_mode of this ChartSettings.
        For the tabular view, which mode to use to determine which point tags to display

        :param tag_mode: The tag_mode of this ChartSettings.
        :type: str
        """
        allowed_values = ["all", "top", "custom"]
        if tag_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `tag_mode` ({0}), must be one of {1}"
                .format(tag_mode, allowed_values)
            )

        self._tag_mode = tag_mode

    @property
    def fixed_legend_enabled(self):
        """
        Gets the fixed_legend_enabled of this ChartSettings.
        Whether to enable a fixed tabular legend adjacent to the chart

        :return: The fixed_legend_enabled of this ChartSettings.
        :rtype: bool
        """
        return self._fixed_legend_enabled

    @fixed_legend_enabled.setter
    def fixed_legend_enabled(self, fixed_legend_enabled):
        """
        Sets the fixed_legend_enabled of this ChartSettings.
        Whether to enable a fixed tabular legend adjacent to the chart

        :param fixed_legend_enabled: The fixed_legend_enabled of this ChartSettings.
        :type: bool
        """

        self._fixed_legend_enabled = fixed_legend_enabled

    @property
    def fixed_legend_position(self):
        """
        Gets the fixed_legend_position of this ChartSettings.
        Where the fixed legend should be displayed with respect to the chart

        :return: The fixed_legend_position of this ChartSettings.
        :rtype: str
        """
        return self._fixed_legend_position

    @fixed_legend_position.setter
    def fixed_legend_position(self, fixed_legend_position):
        """
        Sets the fixed_legend_position of this ChartSettings.
        Where the fixed legend should be displayed with respect to the chart

        :param fixed_legend_position: The fixed_legend_position of this ChartSettings.
        :type: str
        """
        allowed_values = ["RIGHT", "TOP", "LEFT", "BOTTOM"]
        if fixed_legend_position not in allowed_values:
            raise ValueError(
                "Invalid value for `fixed_legend_position` ({0}), must be one of {1}"
                .format(fixed_legend_position, allowed_values)
            )

        self._fixed_legend_position = fixed_legend_position

    @property
    def fixed_legend_display_stats(self):
        """
        Gets the fixed_legend_display_stats of this ChartSettings.
        For a chart with a fixed legend, a list of statistics to display in the legend

        :return: The fixed_legend_display_stats of this ChartSettings.
        :rtype: list[str]
        """
        return self._fixed_legend_display_stats

    @fixed_legend_display_stats.setter
    def fixed_legend_display_stats(self, fixed_legend_display_stats):
        """
        Sets the fixed_legend_display_stats of this ChartSettings.
        For a chart with a fixed legend, a list of statistics to display in the legend

        :param fixed_legend_display_stats: The fixed_legend_display_stats of this ChartSettings.
        :type: list[str]
        """

        self._fixed_legend_display_stats = fixed_legend_display_stats

    @property
    def fixed_legend_filter_field(self):
        """
        Gets the fixed_legend_filter_field of this ChartSettings.
        Statistic to use for determining whether a series is displayed on the fixed legend

        :return: The fixed_legend_filter_field of this ChartSettings.
        :rtype: str
        """
        return self._fixed_legend_filter_field

    @fixed_legend_filter_field.setter
    def fixed_legend_filter_field(self, fixed_legend_filter_field):
        """
        Sets the fixed_legend_filter_field of this ChartSettings.
        Statistic to use for determining whether a series is displayed on the fixed legend

        :param fixed_legend_filter_field: The fixed_legend_filter_field of this ChartSettings.
        :type: str
        """
        allowed_values = ["CURRENT", "MEAN", "MEDIAN", "SUM", "MIN", "MAX", "COUNT"]
        if fixed_legend_filter_field not in allowed_values:
            raise ValueError(
                "Invalid value for `fixed_legend_filter_field` ({0}), must be one of {1}"
                .format(fixed_legend_filter_field, allowed_values)
            )

        self._fixed_legend_filter_field = fixed_legend_filter_field

    @property
    def fixed_legend_filter_limit(self):
        """
        Gets the fixed_legend_filter_limit of this ChartSettings.
        Number of series to include in the fixed legend

        :return: The fixed_legend_filter_limit of this ChartSettings.
        :rtype: int
        """
        return self._fixed_legend_filter_limit

    @fixed_legend_filter_limit.setter
    def fixed_legend_filter_limit(self, fixed_legend_filter_limit):
        """
        Sets the fixed_legend_filter_limit of this ChartSettings.
        Number of series to include in the fixed legend

        :param fixed_legend_filter_limit: The fixed_legend_filter_limit of this ChartSettings.
        :type: int
        """

        self._fixed_legend_filter_limit = fixed_legend_filter_limit

    @property
    def fixed_legend_filter_sort(self):
        """
        Gets the fixed_legend_filter_sort of this ChartSettings.
        Whether to display \"Top\"- or \"Bottom\"-ranked series in the fixed legend

        :return: The fixed_legend_filter_sort of this ChartSettings.
        :rtype: str
        """
        return self._fixed_legend_filter_sort

    @fixed_legend_filter_sort.setter
    def fixed_legend_filter_sort(self, fixed_legend_filter_sort):
        """
        Sets the fixed_legend_filter_sort of this ChartSettings.
        Whether to display \"Top\"- or \"Bottom\"-ranked series in the fixed legend

        :param fixed_legend_filter_sort: The fixed_legend_filter_sort of this ChartSettings.
        :type: str
        """
        allowed_values = ["TOP", "BOTTOM"]
        if fixed_legend_filter_sort not in allowed_values:
            raise ValueError(
                "Invalid value for `fixed_legend_filter_sort` ({0}), must be one of {1}"
                .format(fixed_legend_filter_sort, allowed_values)
            )

        self._fixed_legend_filter_sort = fixed_legend_filter_sort

    @property
    def fixed_legend_use_raw_stats(self):
        """
        Gets the fixed_legend_use_raw_stats of this ChartSettings.
        If true, the legend uses non-summarized stats instead of summarized

        :return: The fixed_legend_use_raw_stats of this ChartSettings.
        :rtype: bool
        """
        return self._fixed_legend_use_raw_stats

    @fixed_legend_use_raw_stats.setter
    def fixed_legend_use_raw_stats(self, fixed_legend_use_raw_stats):
        """
        Sets the fixed_legend_use_raw_stats of this ChartSettings.
        If true, the legend uses non-summarized stats instead of summarized

        :param fixed_legend_use_raw_stats: The fixed_legend_use_raw_stats of this ChartSettings.
        :type: bool
        """

        self._fixed_legend_use_raw_stats = fixed_legend_use_raw_stats

    @property
    def invert_dynamic_legend_hover_control(self):
        """
        Gets the invert_dynamic_legend_hover_control of this ChartSettings.
        Whether to disable the display of the floating legend (but reenable it when the ctrl-key is pressed)

        :return: The invert_dynamic_legend_hover_control of this ChartSettings.
        :rtype: bool
        """
        return self._invert_dynamic_legend_hover_control

    @invert_dynamic_legend_hover_control.setter
    def invert_dynamic_legend_hover_control(self, invert_dynamic_legend_hover_control):
        """
        Sets the invert_dynamic_legend_hover_control of this ChartSettings.
        Whether to disable the display of the floating legend (but reenable it when the ctrl-key is pressed)

        :param invert_dynamic_legend_hover_control: The invert_dynamic_legend_hover_control of this ChartSettings.
        :type: bool
        """

        self._invert_dynamic_legend_hover_control = invert_dynamic_legend_hover_control

    @property
    def sparkline_display_value_type(self):
        """
        Gets the sparkline_display_value_type of this ChartSettings.
        For the single stat view, whether to display the name of the query or the value of query

        :return: The sparkline_display_value_type of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_value_type

    @sparkline_display_value_type.setter
    def sparkline_display_value_type(self, sparkline_display_value_type):
        """
        Sets the sparkline_display_value_type of this ChartSettings.
        For the single stat view, whether to display the name of the query or the value of query

        :param sparkline_display_value_type: The sparkline_display_value_type of this ChartSettings.
        :type: str
        """
        allowed_values = ["VALUE", "LABEL"]
        if sparkline_display_value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sparkline_display_value_type` ({0}), must be one of {1}"
                .format(sparkline_display_value_type, allowed_values)
            )

        self._sparkline_display_value_type = sparkline_display_value_type

    @property
    def sparkline_display_color(self):
        """
        Gets the sparkline_display_color of this ChartSettings.
        For the single stat view, the color of the displayed text (when not dynamically determined). Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :return: The sparkline_display_color of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_color

    @sparkline_display_color.setter
    def sparkline_display_color(self, sparkline_display_color):
        """
        Sets the sparkline_display_color of this ChartSettings.
        For the single stat view, the color of the displayed text (when not dynamically determined). Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :param sparkline_display_color: The sparkline_display_color of this ChartSettings.
        :type: str
        """

        self._sparkline_display_color = sparkline_display_color

    @property
    def sparkline_display_horizontal_position(self):
        """
        Gets the sparkline_display_horizontal_position of this ChartSettings.
        For the single stat view, the horizontal position of the displayed text

        :return: The sparkline_display_horizontal_position of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_horizontal_position

    @sparkline_display_horizontal_position.setter
    def sparkline_display_horizontal_position(self, sparkline_display_horizontal_position):
        """
        Sets the sparkline_display_horizontal_position of this ChartSettings.
        For the single stat view, the horizontal position of the displayed text

        :param sparkline_display_horizontal_position: The sparkline_display_horizontal_position of this ChartSettings.
        :type: str
        """
        allowed_values = ["MIDDLE", "LEFT", "RIGHT"]
        if sparkline_display_horizontal_position not in allowed_values:
            raise ValueError(
                "Invalid value for `sparkline_display_horizontal_position` ({0}), must be one of {1}"
                .format(sparkline_display_horizontal_position, allowed_values)
            )

        self._sparkline_display_horizontal_position = sparkline_display_horizontal_position

    @property
    def sparkline_display_font_size(self):
        """
        Gets the sparkline_display_font_size of this ChartSettings.
        For the single stat view, the font size of the displayed text, in percent

        :return: The sparkline_display_font_size of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_font_size

    @sparkline_display_font_size.setter
    def sparkline_display_font_size(self, sparkline_display_font_size):
        """
        Sets the sparkline_display_font_size of this ChartSettings.
        For the single stat view, the font size of the displayed text, in percent

        :param sparkline_display_font_size: The sparkline_display_font_size of this ChartSettings.
        :type: str
        """

        self._sparkline_display_font_size = sparkline_display_font_size

    @property
    def sparkline_display_prefix(self):
        """
        Gets the sparkline_display_prefix of this ChartSettings.
        For the single stat view, a string to add before the displayed text

        :return: The sparkline_display_prefix of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_prefix

    @sparkline_display_prefix.setter
    def sparkline_display_prefix(self, sparkline_display_prefix):
        """
        Sets the sparkline_display_prefix of this ChartSettings.
        For the single stat view, a string to add before the displayed text

        :param sparkline_display_prefix: The sparkline_display_prefix of this ChartSettings.
        :type: str
        """

        self._sparkline_display_prefix = sparkline_display_prefix

    @property
    def sparkline_display_postfix(self):
        """
        Gets the sparkline_display_postfix of this ChartSettings.
        For the single stat view, a string to append to the displayed text

        :return: The sparkline_display_postfix of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_postfix

    @sparkline_display_postfix.setter
    def sparkline_display_postfix(self, sparkline_display_postfix):
        """
        Sets the sparkline_display_postfix of this ChartSettings.
        For the single stat view, a string to append to the displayed text

        :param sparkline_display_postfix: The sparkline_display_postfix of this ChartSettings.
        :type: str
        """

        self._sparkline_display_postfix = sparkline_display_postfix

    @property
    def sparkline_size(self):
        """
        Gets the sparkline_size of this ChartSettings.
        For the single stat view, a misleadingly named property.  This determines whether the sparkline of the statistic is displayed in the chart BACKGROUND, BOTTOM, or NONE

        :return: The sparkline_size of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_size

    @sparkline_size.setter
    def sparkline_size(self, sparkline_size):
        """
        Sets the sparkline_size of this ChartSettings.
        For the single stat view, a misleadingly named property.  This determines whether the sparkline of the statistic is displayed in the chart BACKGROUND, BOTTOM, or NONE

        :param sparkline_size: The sparkline_size of this ChartSettings.
        :type: str
        """
        allowed_values = ["BACKGROUND", "BOTTOM", "NONE"]
        if sparkline_size not in allowed_values:
            raise ValueError(
                "Invalid value for `sparkline_size` ({0}), must be one of {1}"
                .format(sparkline_size, allowed_values)
            )

        self._sparkline_size = sparkline_size

    @property
    def sparkline_line_color(self):
        """
        Gets the sparkline_line_color of this ChartSettings.
        For the single stat view, the color of the line. Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :return: The sparkline_line_color of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_line_color

    @sparkline_line_color.setter
    def sparkline_line_color(self, sparkline_line_color):
        """
        Sets the sparkline_line_color of this ChartSettings.
        For the single stat view, the color of the line. Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :param sparkline_line_color: The sparkline_line_color of this ChartSettings.
        :type: str
        """

        self._sparkline_line_color = sparkline_line_color

    @property
    def sparkline_fill_color(self):
        """
        Gets the sparkline_fill_color of this ChartSettings.
        For the single stat view, the color of the background fill. Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :return: The sparkline_fill_color of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_fill_color

    @sparkline_fill_color.setter
    def sparkline_fill_color(self, sparkline_fill_color):
        """
        Sets the sparkline_fill_color of this ChartSettings.
        For the single stat view, the color of the background fill. Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :param sparkline_fill_color: The sparkline_fill_color of this ChartSettings.
        :type: str
        """

        self._sparkline_fill_color = sparkline_fill_color

    @property
    def sparkline_value_color_map_colors(self):
        """
        Gets the sparkline_value_color_map_colors of this ChartSettings.
        For the single stat view, a list of colors that differing query values map to.  Must contain one more element than sparklineValueColorMapValuesV2. Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :return: The sparkline_value_color_map_colors of this ChartSettings.
        :rtype: list[str]
        """
        return self._sparkline_value_color_map_colors

    @sparkline_value_color_map_colors.setter
    def sparkline_value_color_map_colors(self, sparkline_value_color_map_colors):
        """
        Sets the sparkline_value_color_map_colors of this ChartSettings.
        For the single stat view, a list of colors that differing query values map to.  Must contain one more element than sparklineValueColorMapValuesV2. Values should be in\"rgba(<rval>, <gval>, <bval>, <aval>\" format

        :param sparkline_value_color_map_colors: The sparkline_value_color_map_colors of this ChartSettings.
        :type: list[str]
        """

        self._sparkline_value_color_map_colors = sparkline_value_color_map_colors

    @property
    def sparkline_value_color_map_values_v2(self):
        """
        Gets the sparkline_value_color_map_values_v2 of this ChartSettings.
        For the single stat view, a list of boundaries for mapping different query values to colors.  Must contain one less element than sparklineValueColorMapColors

        :return: The sparkline_value_color_map_values_v2 of this ChartSettings.
        :rtype: list[float]
        """
        return self._sparkline_value_color_map_values_v2

    @sparkline_value_color_map_values_v2.setter
    def sparkline_value_color_map_values_v2(self, sparkline_value_color_map_values_v2):
        """
        Sets the sparkline_value_color_map_values_v2 of this ChartSettings.
        For the single stat view, a list of boundaries for mapping different query values to colors.  Must contain one less element than sparklineValueColorMapColors

        :param sparkline_value_color_map_values_v2: The sparkline_value_color_map_values_v2 of this ChartSettings.
        :type: list[float]
        """

        self._sparkline_value_color_map_values_v2 = sparkline_value_color_map_values_v2

    @property
    def sparkline_value_color_map_apply_to(self):
        """
        Gets the sparkline_value_color_map_apply_to of this ChartSettings.
        For the single stat view, whether to apply dynamic color settings to the displayed TEXT or BACKGROUND

        :return: The sparkline_value_color_map_apply_to of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_value_color_map_apply_to

    @sparkline_value_color_map_apply_to.setter
    def sparkline_value_color_map_apply_to(self, sparkline_value_color_map_apply_to):
        """
        Sets the sparkline_value_color_map_apply_to of this ChartSettings.
        For the single stat view, whether to apply dynamic color settings to the displayed TEXT or BACKGROUND

        :param sparkline_value_color_map_apply_to: The sparkline_value_color_map_apply_to of this ChartSettings.
        :type: str
        """
        allowed_values = ["TEXT", "BACKGROUND"]
        if sparkline_value_color_map_apply_to not in allowed_values:
            raise ValueError(
                "Invalid value for `sparkline_value_color_map_apply_to` ({0}), must be one of {1}"
                .format(sparkline_value_color_map_apply_to, allowed_values)
            )

        self._sparkline_value_color_map_apply_to = sparkline_value_color_map_apply_to

    @property
    def sparkline_decimal_precision(self):
        """
        Gets the sparkline_decimal_precision of this ChartSettings.
        For the single stat view, the decimal precision of the displayed number

        :return: The sparkline_decimal_precision of this ChartSettings.
        :rtype: int
        """
        return self._sparkline_decimal_precision

    @sparkline_decimal_precision.setter
    def sparkline_decimal_precision(self, sparkline_decimal_precision):
        """
        Sets the sparkline_decimal_precision of this ChartSettings.
        For the single stat view, the decimal precision of the displayed number

        :param sparkline_decimal_precision: The sparkline_decimal_precision of this ChartSettings.
        :type: int
        """

        self._sparkline_decimal_precision = sparkline_decimal_precision

    @property
    def sparkline_value_text_map_text(self):
        """
        Gets the sparkline_value_text_map_text of this ChartSettings.
        For the single stat view, a list of display text values that different query values map to.  Must contain one more element than sparklineValueTextMapThresholds

        :return: The sparkline_value_text_map_text of this ChartSettings.
        :rtype: list[str]
        """
        return self._sparkline_value_text_map_text

    @sparkline_value_text_map_text.setter
    def sparkline_value_text_map_text(self, sparkline_value_text_map_text):
        """
        Sets the sparkline_value_text_map_text of this ChartSettings.
        For the single stat view, a list of display text values that different query values map to.  Must contain one more element than sparklineValueTextMapThresholds

        :param sparkline_value_text_map_text: The sparkline_value_text_map_text of this ChartSettings.
        :type: list[str]
        """

        self._sparkline_value_text_map_text = sparkline_value_text_map_text

    @property
    def sparkline_value_text_map_thresholds(self):
        """
        Gets the sparkline_value_text_map_thresholds of this ChartSettings.
        For the single stat view, a list of threshold boundaries for mapping different query values to display text. Must contain one less element than sparklineValueTextMapText

        :return: The sparkline_value_text_map_thresholds of this ChartSettings.
        :rtype: list[float]
        """
        return self._sparkline_value_text_map_thresholds

    @sparkline_value_text_map_thresholds.setter
    def sparkline_value_text_map_thresholds(self, sparkline_value_text_map_thresholds):
        """
        Sets the sparkline_value_text_map_thresholds of this ChartSettings.
        For the single stat view, a list of threshold boundaries for mapping different query values to display text. Must contain one less element than sparklineValueTextMapText

        :param sparkline_value_text_map_thresholds: The sparkline_value_text_map_thresholds of this ChartSettings.
        :type: list[float]
        """

        self._sparkline_value_text_map_thresholds = sparkline_value_text_map_thresholds

    @property
    def markdown_content(self):
        """
        Gets the markdown_content of this ChartSettings.
        The Markdown content for a Markdown display, base64-encoded

        :return: The markdown_content of this ChartSettings.
        :rtype: str
        """
        return self._markdown_content

    @markdown_content.setter
    def markdown_content(self, markdown_content):
        """
        Sets the markdown_content of this ChartSettings.
        The Markdown content for a Markdown display, base64-encoded

        :param markdown_content: The markdown_content of this ChartSettings.
        :type: str
        """

        self._markdown_content = markdown_content

    @property
    def plain_markdown_content(self):
        """
        Gets the plain_markdown_content of this ChartSettings.
        The Markdown content for a Markdown display, in plain text.  This is a derived field used for search and will not be persisted.

        :return: The plain_markdown_content of this ChartSettings.
        :rtype: str
        """
        return self._plain_markdown_content

    @plain_markdown_content.setter
    def plain_markdown_content(self, plain_markdown_content):
        """
        Sets the plain_markdown_content of this ChartSettings.
        The Markdown content for a Markdown display, in plain text.  This is a derived field used for search and will not be persisted.

        :param plain_markdown_content: The plain_markdown_content of this ChartSettings.
        :type: str
        """

        self._plain_markdown_content = plain_markdown_content

    @property
    def auto_column_tags(self):
        """
        Gets the auto_column_tags of this ChartSettings.
        deprecated

        :return: The auto_column_tags of this ChartSettings.
        :rtype: bool
        """
        return self._auto_column_tags

    @auto_column_tags.setter
    def auto_column_tags(self, auto_column_tags):
        """
        Sets the auto_column_tags of this ChartSettings.
        deprecated

        :param auto_column_tags: The auto_column_tags of this ChartSettings.
        :type: bool
        """

        self._auto_column_tags = auto_column_tags

    @property
    def column_tags(self):
        """
        Gets the column_tags of this ChartSettings.
        deprecated

        :return: The column_tags of this ChartSettings.
        :rtype: str
        """
        return self._column_tags

    @column_tags.setter
    def column_tags(self, column_tags):
        """
        Sets the column_tags of this ChartSettings.
        deprecated

        :param column_tags: The column_tags of this ChartSettings.
        :type: str
        """

        self._column_tags = column_tags

    @property
    def fixed_legend_hide_label(self):
        """
        Gets the fixed_legend_hide_label of this ChartSettings.
        deprecated

        :return: The fixed_legend_hide_label of this ChartSettings.
        :rtype: bool
        """
        return self._fixed_legend_hide_label

    @fixed_legend_hide_label.setter
    def fixed_legend_hide_label(self, fixed_legend_hide_label):
        """
        Sets the fixed_legend_hide_label of this ChartSettings.
        deprecated

        :param fixed_legend_hide_label: The fixed_legend_hide_label of this ChartSettings.
        :type: bool
        """

        self._fixed_legend_hide_label = fixed_legend_hide_label

    @property
    def sparkline_display_vertical_position(self):
        """
        Gets the sparkline_display_vertical_position of this ChartSettings.
        deprecated

        :return: The sparkline_display_vertical_position of this ChartSettings.
        :rtype: str
        """
        return self._sparkline_display_vertical_position

    @sparkline_display_vertical_position.setter
    def sparkline_display_vertical_position(self, sparkline_display_vertical_position):
        """
        Sets the sparkline_display_vertical_position of this ChartSettings.
        deprecated

        :param sparkline_display_vertical_position: The sparkline_display_vertical_position of this ChartSettings.
        :type: str
        """

        self._sparkline_display_vertical_position = sparkline_display_vertical_position

    @property
    def sparkline_value_color_map_values(self):
        """
        Gets the sparkline_value_color_map_values of this ChartSettings.
        deprecated

        :return: The sparkline_value_color_map_values of this ChartSettings.
        :rtype: list[int]
        """
        return self._sparkline_value_color_map_values

    @sparkline_value_color_map_values.setter
    def sparkline_value_color_map_values(self, sparkline_value_color_map_values):
        """
        Sets the sparkline_value_color_map_values of this ChartSettings.
        deprecated

        :param sparkline_value_color_map_values: The sparkline_value_color_map_values of this ChartSettings.
        :type: list[int]
        """

        self._sparkline_value_color_map_values = sparkline_value_color_map_values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChartSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
