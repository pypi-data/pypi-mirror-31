# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start_time=None, end_time=None, name=None, annotations=None, id=None, table=None, created_epoch_millis=None, updated_epoch_millis=None, updater_id=None, creator_id=None, tags=None, created_at=None, summarized_events=None, is_user_event=None, is_ephemeral=None, updated_at=None, hosts=None, running_state=None, can_close=None, creator_type=None, can_delete=None):
        """
        Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start_time': 'int',
            'end_time': 'int',
            'name': 'str',
            'annotations': 'dict(str, str)',
            'id': 'str',
            'table': 'str',
            'created_epoch_millis': 'int',
            'updated_epoch_millis': 'int',
            'updater_id': 'str',
            'creator_id': 'str',
            'tags': 'list[str]',
            'created_at': 'int',
            'summarized_events': 'int',
            'is_user_event': 'bool',
            'is_ephemeral': 'bool',
            'updated_at': 'int',
            'hosts': 'list[str]',
            'running_state': 'str',
            'can_close': 'bool',
            'creator_type': 'list[str]',
            'can_delete': 'bool'
        }

        self.attribute_map = {
            'start_time': 'startTime',
            'end_time': 'endTime',
            'name': 'name',
            'annotations': 'annotations',
            'id': 'id',
            'table': 'table',
            'created_epoch_millis': 'createdEpochMillis',
            'updated_epoch_millis': 'updatedEpochMillis',
            'updater_id': 'updaterId',
            'creator_id': 'creatorId',
            'tags': 'tags',
            'created_at': 'createdAt',
            'summarized_events': 'summarizedEvents',
            'is_user_event': 'isUserEvent',
            'is_ephemeral': 'isEphemeral',
            'updated_at': 'updatedAt',
            'hosts': 'hosts',
            'running_state': 'runningState',
            'can_close': 'canClose',
            'creator_type': 'creatorType',
            'can_delete': 'canDelete'
        }

        self._start_time = start_time
        self._end_time = end_time
        self._name = name
        self._annotations = annotations
        self._id = id
        self._table = table
        self._created_epoch_millis = created_epoch_millis
        self._updated_epoch_millis = updated_epoch_millis
        self._updater_id = updater_id
        self._creator_id = creator_id
        self._tags = tags
        self._created_at = created_at
        self._summarized_events = summarized_events
        self._is_user_event = is_user_event
        self._is_ephemeral = is_ephemeral
        self._updated_at = updated_at
        self._hosts = hosts
        self._running_state = running_state
        self._can_close = can_close
        self._creator_type = creator_type
        self._can_delete = can_delete

    @property
    def start_time(self):
        """
        Gets the start_time of this Event.
        Start time of the event, in epoch millis.  If the JSON value is missing or set to 0, startTime will be set to the current time

        :return: The start_time of this Event.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Event.
        Start time of the event, in epoch millis.  If the JSON value is missing or set to 0, startTime will be set to the current time

        :param start_time: The start_time of this Event.
        :type: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this Event.
        End time of the event, in epoch millis.  Set to startTime + 1 for an instantaneous event

        :return: The end_time of this Event.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this Event.
        End time of the event, in epoch millis.  Set to startTime + 1 for an instantaneous event

        :param end_time: The end_time of this Event.
        :type: int
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def name(self):
        """
        Gets the name of this Event.
        The name of the event.  If 'annotations.prettyName' is present, 'name' will be equivalent to that value

        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Event.
        The name of the event.  If 'annotations.prettyName' is present, 'name' will be equivalent to that value

        :param name: The name of this Event.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def annotations(self):
        """
        Gets the annotations of this Event.
        A string->string map of additional annotations on the event

        :return: The annotations of this Event.
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """
        Sets the annotations of this Event.
        A string->string map of additional annotations on the event

        :param annotations: The annotations of this Event.
        :type: dict(str, str)
        """
        if annotations is None:
            raise ValueError("Invalid value for `annotations`, must not be `None`")

        self._annotations = annotations

    @property
    def id(self):
        """
        Gets the id of this Event.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.

        :param id: The id of this Event.
        :type: str
        """

        self._id = id

    @property
    def table(self):
        """
        Gets the table of this Event.
        The customer to which the event belongs

        :return: The table of this Event.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """
        Sets the table of this Event.
        The customer to which the event belongs

        :param table: The table of this Event.
        :type: str
        """

        self._table = table

    @property
    def created_epoch_millis(self):
        """
        Gets the created_epoch_millis of this Event.

        :return: The created_epoch_millis of this Event.
        :rtype: int
        """
        return self._created_epoch_millis

    @created_epoch_millis.setter
    def created_epoch_millis(self, created_epoch_millis):
        """
        Sets the created_epoch_millis of this Event.

        :param created_epoch_millis: The created_epoch_millis of this Event.
        :type: int
        """

        self._created_epoch_millis = created_epoch_millis

    @property
    def updated_epoch_millis(self):
        """
        Gets the updated_epoch_millis of this Event.

        :return: The updated_epoch_millis of this Event.
        :rtype: int
        """
        return self._updated_epoch_millis

    @updated_epoch_millis.setter
    def updated_epoch_millis(self, updated_epoch_millis):
        """
        Sets the updated_epoch_millis of this Event.

        :param updated_epoch_millis: The updated_epoch_millis of this Event.
        :type: int
        """

        self._updated_epoch_millis = updated_epoch_millis

    @property
    def updater_id(self):
        """
        Gets the updater_id of this Event.

        :return: The updater_id of this Event.
        :rtype: str
        """
        return self._updater_id

    @updater_id.setter
    def updater_id(self, updater_id):
        """
        Sets the updater_id of this Event.

        :param updater_id: The updater_id of this Event.
        :type: str
        """

        self._updater_id = updater_id

    @property
    def creator_id(self):
        """
        Gets the creator_id of this Event.

        :return: The creator_id of this Event.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this Event.

        :param creator_id: The creator_id of this Event.
        :type: str
        """

        self._creator_id = creator_id

    @property
    def tags(self):
        """
        Gets the tags of this Event.
        A list of event tags

        :return: The tags of this Event.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Event.
        A list of event tags

        :param tags: The tags of this Event.
        :type: list[str]
        """

        self._tags = tags

    @property
    def created_at(self):
        """
        Gets the created_at of this Event.

        :return: The created_at of this Event.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Event.

        :param created_at: The created_at of this Event.
        :type: int
        """

        self._created_at = created_at

    @property
    def summarized_events(self):
        """
        Gets the summarized_events of this Event.
        In some event queries, multiple events that occur nearly simultaneously are summarized under a single event.  This value specifies the number of events summarized under this one

        :return: The summarized_events of this Event.
        :rtype: int
        """
        return self._summarized_events

    @summarized_events.setter
    def summarized_events(self, summarized_events):
        """
        Sets the summarized_events of this Event.
        In some event queries, multiple events that occur nearly simultaneously are summarized under a single event.  This value specifies the number of events summarized under this one

        :param summarized_events: The summarized_events of this Event.
        :type: int
        """
        if summarized_events is None:
            raise ValueError("Invalid value for `summarized_events`, must not be `None`")

        self._summarized_events = summarized_events

    @property
    def is_user_event(self):
        """
        Gets the is_user_event of this Event.
        Whether this event was created by a user, versus the system.  Default: system

        :return: The is_user_event of this Event.
        :rtype: bool
        """
        return self._is_user_event

    @is_user_event.setter
    def is_user_event(self, is_user_event):
        """
        Sets the is_user_event of this Event.
        Whether this event was created by a user, versus the system.  Default: system

        :param is_user_event: The is_user_event of this Event.
        :type: bool
        """

        self._is_user_event = is_user_event

    @property
    def is_ephemeral(self):
        """
        Gets the is_ephemeral of this Event.
        Whether the event ends immediately after it begins

        :return: The is_ephemeral of this Event.
        :rtype: bool
        """
        return self._is_ephemeral

    @is_ephemeral.setter
    def is_ephemeral(self, is_ephemeral):
        """
        Sets the is_ephemeral of this Event.
        Whether the event ends immediately after it begins

        :param is_ephemeral: The is_ephemeral of this Event.
        :type: bool
        """

        self._is_ephemeral = is_ephemeral

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Event.

        :return: The updated_at of this Event.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Event.

        :param updated_at: The updated_at of this Event.
        :type: int
        """

        self._updated_at = updated_at

    @property
    def hosts(self):
        """
        Gets the hosts of this Event.
        A list of sources/hosts affected by the event

        :return: The hosts of this Event.
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """
        Sets the hosts of this Event.
        A list of sources/hosts affected by the event

        :param hosts: The hosts of this Event.
        :type: list[str]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")

        self._hosts = hosts

    @property
    def running_state(self):
        """
        Gets the running_state of this Event.

        :return: The running_state of this Event.
        :rtype: str
        """
        return self._running_state

    @running_state.setter
    def running_state(self, running_state):
        """
        Sets the running_state of this Event.

        :param running_state: The running_state of this Event.
        :type: str
        """
        allowed_values = ["ONGOING", "PENDING", "ENDED"]
        if running_state not in allowed_values:
            raise ValueError(
                "Invalid value for `running_state` ({0}), must be one of {1}"
                .format(running_state, allowed_values)
            )

        self._running_state = running_state

    @property
    def can_close(self):
        """
        Gets the can_close of this Event.

        :return: The can_close of this Event.
        :rtype: bool
        """
        return self._can_close

    @can_close.setter
    def can_close(self, can_close):
        """
        Sets the can_close of this Event.

        :param can_close: The can_close of this Event.
        :type: bool
        """

        self._can_close = can_close

    @property
    def creator_type(self):
        """
        Gets the creator_type of this Event.

        :return: The creator_type of this Event.
        :rtype: list[str]
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """
        Sets the creator_type of this Event.

        :param creator_type: The creator_type of this Event.
        :type: list[str]
        """
        allowed_values = ["USER", "ALERT", "SYSTEM"]
        if not set(creator_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `creator_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(creator_type)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._creator_type = creator_type

    @property
    def can_delete(self):
        """
        Gets the can_delete of this Event.

        :return: The can_delete of this Event.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """
        Sets the can_delete of this Event.

        :param can_delete: The can_delete of this Event.
        :type: bool
        """

        self._can_delete = can_delete

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
