# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChartSourceQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, scatter_plot_source=None, querybuilder_serialization=None, querybuilder_enabled=None, secondary_axis=None, source_description=None, name=None, query=None, disabled=None):
        """
        ChartSourceQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'scatter_plot_source': 'str',
            'querybuilder_serialization': 'str',
            'querybuilder_enabled': 'bool',
            'secondary_axis': 'bool',
            'source_description': 'str',
            'name': 'str',
            'query': 'str',
            'disabled': 'bool'
        }

        self.attribute_map = {
            'scatter_plot_source': 'scatterPlotSource',
            'querybuilder_serialization': 'querybuilderSerialization',
            'querybuilder_enabled': 'querybuilderEnabled',
            'secondary_axis': 'secondaryAxis',
            'source_description': 'sourceDescription',
            'name': 'name',
            'query': 'query',
            'disabled': 'disabled'
        }

        self._scatter_plot_source = scatter_plot_source
        self._querybuilder_serialization = querybuilder_serialization
        self._querybuilder_enabled = querybuilder_enabled
        self._secondary_axis = secondary_axis
        self._source_description = source_description
        self._name = name
        self._query = query
        self._disabled = disabled

    @property
    def scatter_plot_source(self):
        """
        Gets the scatter_plot_source of this ChartSourceQuery.
        For scatter plots, does this query source the X-axis or the Y-axis

        :return: The scatter_plot_source of this ChartSourceQuery.
        :rtype: str
        """
        return self._scatter_plot_source

    @scatter_plot_source.setter
    def scatter_plot_source(self, scatter_plot_source):
        """
        Sets the scatter_plot_source of this ChartSourceQuery.
        For scatter plots, does this query source the X-axis or the Y-axis

        :param scatter_plot_source: The scatter_plot_source of this ChartSourceQuery.
        :type: str
        """
        allowed_values = ["X", "Y"]
        if scatter_plot_source not in allowed_values:
            raise ValueError(
                "Invalid value for `scatter_plot_source` ({0}), must be one of {1}"
                .format(scatter_plot_source, allowed_values)
            )

        self._scatter_plot_source = scatter_plot_source

    @property
    def querybuilder_serialization(self):
        """
        Gets the querybuilder_serialization of this ChartSourceQuery.
        Opaque representation of the querybuilder

        :return: The querybuilder_serialization of this ChartSourceQuery.
        :rtype: str
        """
        return self._querybuilder_serialization

    @querybuilder_serialization.setter
    def querybuilder_serialization(self, querybuilder_serialization):
        """
        Sets the querybuilder_serialization of this ChartSourceQuery.
        Opaque representation of the querybuilder

        :param querybuilder_serialization: The querybuilder_serialization of this ChartSourceQuery.
        :type: str
        """

        self._querybuilder_serialization = querybuilder_serialization

    @property
    def querybuilder_enabled(self):
        """
        Gets the querybuilder_enabled of this ChartSourceQuery.
        Whether or not this source line should have the query builder enabled

        :return: The querybuilder_enabled of this ChartSourceQuery.
        :rtype: bool
        """
        return self._querybuilder_enabled

    @querybuilder_enabled.setter
    def querybuilder_enabled(self, querybuilder_enabled):
        """
        Sets the querybuilder_enabled of this ChartSourceQuery.
        Whether or not this source line should have the query builder enabled

        :param querybuilder_enabled: The querybuilder_enabled of this ChartSourceQuery.
        :type: bool
        """

        self._querybuilder_enabled = querybuilder_enabled

    @property
    def secondary_axis(self):
        """
        Gets the secondary_axis of this ChartSourceQuery.
        Determines if this source relates to the right hand Y-axis or not

        :return: The secondary_axis of this ChartSourceQuery.
        :rtype: bool
        """
        return self._secondary_axis

    @secondary_axis.setter
    def secondary_axis(self, secondary_axis):
        """
        Sets the secondary_axis of this ChartSourceQuery.
        Determines if this source relates to the right hand Y-axis or not

        :param secondary_axis: The secondary_axis of this ChartSourceQuery.
        :type: bool
        """

        self._secondary_axis = secondary_axis

    @property
    def source_description(self):
        """
        Gets the source_description of this ChartSourceQuery.
        A description for the purpose of this source

        :return: The source_description of this ChartSourceQuery.
        :rtype: str
        """
        return self._source_description

    @source_description.setter
    def source_description(self, source_description):
        """
        Sets the source_description of this ChartSourceQuery.
        A description for the purpose of this source

        :param source_description: The source_description of this ChartSourceQuery.
        :type: str
        """

        self._source_description = source_description

    @property
    def name(self):
        """
        Gets the name of this ChartSourceQuery.
        Name of the source

        :return: The name of this ChartSourceQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChartSourceQuery.
        Name of the source

        :param name: The name of this ChartSourceQuery.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def query(self):
        """
        Gets the query of this ChartSourceQuery.
        Query expression to plot on the chart

        :return: The query of this ChartSourceQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ChartSourceQuery.
        Query expression to plot on the chart

        :param query: The query of this ChartSourceQuery.
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def disabled(self):
        """
        Gets the disabled of this ChartSourceQuery.
        Whether the source is disabled

        :return: The disabled of this ChartSourceQuery.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this ChartSourceQuery.
        Whether the source is disabled

        :param disabled: The disabled of this ChartSourceQuery.
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChartSourceQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
