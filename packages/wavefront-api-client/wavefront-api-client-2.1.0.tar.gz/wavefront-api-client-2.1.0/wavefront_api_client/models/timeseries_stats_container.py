# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TimeseriesStatsContainer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, query_key=None, sum=None, count=None, last_value=None, mean=None, max=None, min=None, median=None):
        """
        TimeseriesStatsContainer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'query_key': 'QueryKeyContainer',
            'sum': 'float',
            'count': 'int',
            'last_value': 'float',
            'mean': 'float',
            'max': 'float',
            'min': 'float',
            'median': 'float'
        }

        self.attribute_map = {
            'query_key': 'queryKey',
            'sum': 'sum',
            'count': 'count',
            'last_value': 'lastValue',
            'mean': 'mean',
            'max': 'max',
            'min': 'min',
            'median': 'median'
        }

        self._query_key = query_key
        self._sum = sum
        self._count = count
        self._last_value = last_value
        self._mean = mean
        self._max = max
        self._min = min
        self._median = median

    @property
    def query_key(self):
        """
        Gets the query_key of this TimeseriesStatsContainer.

        :return: The query_key of this TimeseriesStatsContainer.
        :rtype: QueryKeyContainer
        """
        return self._query_key

    @query_key.setter
    def query_key(self, query_key):
        """
        Sets the query_key of this TimeseriesStatsContainer.

        :param query_key: The query_key of this TimeseriesStatsContainer.
        :type: QueryKeyContainer
        """

        self._query_key = query_key

    @property
    def sum(self):
        """
        Gets the sum of this TimeseriesStatsContainer.

        :return: The sum of this TimeseriesStatsContainer.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """
        Sets the sum of this TimeseriesStatsContainer.

        :param sum: The sum of this TimeseriesStatsContainer.
        :type: float
        """

        self._sum = sum

    @property
    def count(self):
        """
        Gets the count of this TimeseriesStatsContainer.

        :return: The count of this TimeseriesStatsContainer.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this TimeseriesStatsContainer.

        :param count: The count of this TimeseriesStatsContainer.
        :type: int
        """

        self._count = count

    @property
    def last_value(self):
        """
        Gets the last_value of this TimeseriesStatsContainer.

        :return: The last_value of this TimeseriesStatsContainer.
        :rtype: float
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """
        Sets the last_value of this TimeseriesStatsContainer.

        :param last_value: The last_value of this TimeseriesStatsContainer.
        :type: float
        """

        self._last_value = last_value

    @property
    def mean(self):
        """
        Gets the mean of this TimeseriesStatsContainer.

        :return: The mean of this TimeseriesStatsContainer.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """
        Sets the mean of this TimeseriesStatsContainer.

        :param mean: The mean of this TimeseriesStatsContainer.
        :type: float
        """

        self._mean = mean

    @property
    def max(self):
        """
        Gets the max of this TimeseriesStatsContainer.

        :return: The max of this TimeseriesStatsContainer.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this TimeseriesStatsContainer.

        :param max: The max of this TimeseriesStatsContainer.
        :type: float
        """

        self._max = max

    @property
    def min(self):
        """
        Gets the min of this TimeseriesStatsContainer.

        :return: The min of this TimeseriesStatsContainer.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this TimeseriesStatsContainer.

        :param min: The min of this TimeseriesStatsContainer.
        :type: float
        """

        self._min = min

    @property
    def median(self):
        """
        Gets the median of this TimeseriesStatsContainer.

        :return: The median of this TimeseriesStatsContainer.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """
        Sets the median of this TimeseriesStatsContainer.

        :param median: The median of this TimeseriesStatsContainer.
        :type: float
        """

        self._median = median

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeseriesStatsContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
