# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CloudTrailConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, prefix=None, base_credentials=None, bucket_name=None):
        """
        CloudTrailConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'prefix': 'str',
            'base_credentials': 'AWSBaseCredentials',
            'bucket_name': 'str'
        }

        self.attribute_map = {
            'prefix': 'prefix',
            'base_credentials': 'baseCredentials',
            'bucket_name': 'bucketName'
        }

        self._prefix = prefix
        self._base_credentials = base_credentials
        self._bucket_name = bucket_name

    @property
    def prefix(self):
        """
        Gets the prefix of this CloudTrailConfiguration.
        The common prefix, if any, appended to all CloudTrail log files

        :return: The prefix of this CloudTrailConfiguration.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this CloudTrailConfiguration.
        The common prefix, if any, appended to all CloudTrail log files

        :param prefix: The prefix of this CloudTrailConfiguration.
        :type: str
        """

        self._prefix = prefix

    @property
    def base_credentials(self):
        """
        Gets the base_credentials of this CloudTrailConfiguration.

        :return: The base_credentials of this CloudTrailConfiguration.
        :rtype: AWSBaseCredentials
        """
        return self._base_credentials

    @base_credentials.setter
    def base_credentials(self, base_credentials):
        """
        Sets the base_credentials of this CloudTrailConfiguration.

        :param base_credentials: The base_credentials of this CloudTrailConfiguration.
        :type: AWSBaseCredentials
        """

        self._base_credentials = base_credentials

    @property
    def bucket_name(self):
        """
        Gets the bucket_name of this CloudTrailConfiguration.
        Name of the S3 bucket where CloudTrail logs are stored

        :return: The bucket_name of this CloudTrailConfiguration.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """
        Sets the bucket_name of this CloudTrailConfiguration.
        Name of the S3 bucket where CloudTrail logs are stored

        :param bucket_name: The bucket_name of this CloudTrailConfiguration.
        :type: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CloudTrailConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
