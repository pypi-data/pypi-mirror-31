# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FacetsSearchRequestContainer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, facets=None, facet_query=None, facet_query_matching_method=None, query=None, limit=None):
        """
        FacetsSearchRequestContainer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'facets': 'list[str]',
            'facet_query': 'str',
            'facet_query_matching_method': 'str',
            'query': 'list[SearchQuery]',
            'limit': 'int'
        }

        self.attribute_map = {
            'facets': 'facets',
            'facet_query': 'facetQuery',
            'facet_query_matching_method': 'facetQueryMatchingMethod',
            'query': 'query',
            'limit': 'limit'
        }

        self._facets = facets
        self._facet_query = facet_query
        self._facet_query_matching_method = facet_query_matching_method
        self._query = query
        self._limit = limit

    @property
    def facets(self):
        """
        Gets the facets of this FacetsSearchRequestContainer.
        A list of facets (property keys) to return values from found in entities matching 'query'.  Examples are 'tags', 'creatorId', etc

        :return: The facets of this FacetsSearchRequestContainer.
        :rtype: list[str]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """
        Sets the facets of this FacetsSearchRequestContainer.
        A list of facets (property keys) to return values from found in entities matching 'query'.  Examples are 'tags', 'creatorId', etc

        :param facets: The facets of this FacetsSearchRequestContainer.
        :type: list[str]
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")

        self._facets = facets

    @property
    def facet_query(self):
        """
        Gets the facet_query of this FacetsSearchRequestContainer.
        A string against which facet results are compared.  If the facet result either CONTAINs, STARTSWITH, or is an EXACT match for this value, as specified by facetQueryMatchingMethod, then it is returned

        :return: The facet_query of this FacetsSearchRequestContainer.
        :rtype: str
        """
        return self._facet_query

    @facet_query.setter
    def facet_query(self, facet_query):
        """
        Sets the facet_query of this FacetsSearchRequestContainer.
        A string against which facet results are compared.  If the facet result either CONTAINs, STARTSWITH, or is an EXACT match for this value, as specified by facetQueryMatchingMethod, then it is returned

        :param facet_query: The facet_query of this FacetsSearchRequestContainer.
        :type: str
        """

        self._facet_query = facet_query

    @property
    def facet_query_matching_method(self):
        """
        Gets the facet_query_matching_method of this FacetsSearchRequestContainer.
        The matching method used to filter when 'facetQuery' is used. Defaults to CONTAINS.

        :return: The facet_query_matching_method of this FacetsSearchRequestContainer.
        :rtype: str
        """
        return self._facet_query_matching_method

    @facet_query_matching_method.setter
    def facet_query_matching_method(self, facet_query_matching_method):
        """
        Sets the facet_query_matching_method of this FacetsSearchRequestContainer.
        The matching method used to filter when 'facetQuery' is used. Defaults to CONTAINS.

        :param facet_query_matching_method: The facet_query_matching_method of this FacetsSearchRequestContainer.
        :type: str
        """
        allowed_values = ["CONTAINS", "STARTSWITH", "EXACT", "TAGPATH"]
        if facet_query_matching_method not in allowed_values:
            raise ValueError(
                "Invalid value for `facet_query_matching_method` ({0}), must be one of {1}"
                .format(facet_query_matching_method, allowed_values)
            )

        self._facet_query_matching_method = facet_query_matching_method

    @property
    def query(self):
        """
        Gets the query of this FacetsSearchRequestContainer.
        A list of queries by which to limit the search results.  Entities that match ALL queries in this list constitute a set of 'entity search results'.  All facets listed in the 'facets' search parameter of all entities within 'entity search results' are scanned to produce the search results (of facet values).

        :return: The query of this FacetsSearchRequestContainer.
        :rtype: list[SearchQuery]
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this FacetsSearchRequestContainer.
        A list of queries by which to limit the search results.  Entities that match ALL queries in this list constitute a set of 'entity search results'.  All facets listed in the 'facets' search parameter of all entities within 'entity search results' are scanned to produce the search results (of facet values).

        :param query: The query of this FacetsSearchRequestContainer.
        :type: list[SearchQuery]
        """

        self._query = query

    @property
    def limit(self):
        """
        Gets the limit of this FacetsSearchRequestContainer.
        The number of results to return.  Default 100

        :return: The limit of this FacetsSearchRequestContainer.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this FacetsSearchRequestContainer.
        The number of results to return.  Default 100

        :param limit: The limit of this FacetsSearchRequestContainer.
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FacetsSearchRequestContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
