# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DashboardSectionRow(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, height_factor=None, charts=None):
        """
        DashboardSectionRow - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'height_factor': 'int',
            'charts': 'list[Chart]'
        }

        self.attribute_map = {
            'height_factor': 'heightFactor',
            'charts': 'charts'
        }

        self._height_factor = height_factor
        self._charts = charts

    @property
    def height_factor(self):
        """
        Gets the height_factor of this DashboardSectionRow.
        Scalar for the height of this row. 100 is normal and default. 50 is half height

        :return: The height_factor of this DashboardSectionRow.
        :rtype: int
        """
        return self._height_factor

    @height_factor.setter
    def height_factor(self, height_factor):
        """
        Sets the height_factor of this DashboardSectionRow.
        Scalar for the height of this row. 100 is normal and default. 50 is half height

        :param height_factor: The height_factor of this DashboardSectionRow.
        :type: int
        """

        self._height_factor = height_factor

    @property
    def charts(self):
        """
        Gets the charts of this DashboardSectionRow.
        Charts in this section row

        :return: The charts of this DashboardSectionRow.
        :rtype: list[Chart]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """
        Sets the charts of this DashboardSectionRow.
        Charts in this section row

        :param charts: The charts of this DashboardSectionRow.
        :type: list[Chart]
        """
        if charts is None:
            raise ValueError("Invalid value for `charts`, must not be `None`")

        self._charts = charts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DashboardSectionRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
