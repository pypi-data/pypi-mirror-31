# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AvroBackedStandardizedDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_epoch_millis=None, updated_epoch_millis=None, updater_id=None, creator_id=None, deleted=None):
        """
        AvroBackedStandardizedDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'created_epoch_millis': 'int',
            'updated_epoch_millis': 'int',
            'updater_id': 'str',
            'creator_id': 'str',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'created_epoch_millis': 'createdEpochMillis',
            'updated_epoch_millis': 'updatedEpochMillis',
            'updater_id': 'updaterId',
            'creator_id': 'creatorId',
            'deleted': 'deleted'
        }

        self._id = id
        self._created_epoch_millis = created_epoch_millis
        self._updated_epoch_millis = updated_epoch_millis
        self._updater_id = updater_id
        self._creator_id = creator_id
        self._deleted = deleted

    @property
    def id(self):
        """
        Gets the id of this AvroBackedStandardizedDTO.

        :return: The id of this AvroBackedStandardizedDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AvroBackedStandardizedDTO.

        :param id: The id of this AvroBackedStandardizedDTO.
        :type: str
        """

        self._id = id

    @property
    def created_epoch_millis(self):
        """
        Gets the created_epoch_millis of this AvroBackedStandardizedDTO.

        :return: The created_epoch_millis of this AvroBackedStandardizedDTO.
        :rtype: int
        """
        return self._created_epoch_millis

    @created_epoch_millis.setter
    def created_epoch_millis(self, created_epoch_millis):
        """
        Sets the created_epoch_millis of this AvroBackedStandardizedDTO.

        :param created_epoch_millis: The created_epoch_millis of this AvroBackedStandardizedDTO.
        :type: int
        """

        self._created_epoch_millis = created_epoch_millis

    @property
    def updated_epoch_millis(self):
        """
        Gets the updated_epoch_millis of this AvroBackedStandardizedDTO.

        :return: The updated_epoch_millis of this AvroBackedStandardizedDTO.
        :rtype: int
        """
        return self._updated_epoch_millis

    @updated_epoch_millis.setter
    def updated_epoch_millis(self, updated_epoch_millis):
        """
        Sets the updated_epoch_millis of this AvroBackedStandardizedDTO.

        :param updated_epoch_millis: The updated_epoch_millis of this AvroBackedStandardizedDTO.
        :type: int
        """

        self._updated_epoch_millis = updated_epoch_millis

    @property
    def updater_id(self):
        """
        Gets the updater_id of this AvroBackedStandardizedDTO.

        :return: The updater_id of this AvroBackedStandardizedDTO.
        :rtype: str
        """
        return self._updater_id

    @updater_id.setter
    def updater_id(self, updater_id):
        """
        Sets the updater_id of this AvroBackedStandardizedDTO.

        :param updater_id: The updater_id of this AvroBackedStandardizedDTO.
        :type: str
        """

        self._updater_id = updater_id

    @property
    def creator_id(self):
        """
        Gets the creator_id of this AvroBackedStandardizedDTO.

        :return: The creator_id of this AvroBackedStandardizedDTO.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this AvroBackedStandardizedDTO.

        :param creator_id: The creator_id of this AvroBackedStandardizedDTO.
        :type: str
        """

        self._creator_id = creator_id

    @property
    def deleted(self):
        """
        Gets the deleted of this AvroBackedStandardizedDTO.

        :return: The deleted of this AvroBackedStandardizedDTO.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this AvroBackedStandardizedDTO.

        :param deleted: The deleted of this AvroBackedStandardizedDTO.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AvroBackedStandardizedDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
