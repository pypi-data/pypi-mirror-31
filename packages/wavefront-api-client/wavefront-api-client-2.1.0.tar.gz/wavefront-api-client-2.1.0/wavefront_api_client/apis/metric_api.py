# coding: utf-8

"""
    Wavefront Public API

    <p>Wavefront public APIs enable you to interact with Wavefront servers using standard web service API tools. You can use the APIs to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront UI you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MetricApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_metric_details(self, m, **kwargs):
        """
        Get more details on a metric, including reporting sources and approximate last time reported
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metric_details(m, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str m: Metric name (required)
        :param str c: cursor value to continue if the number of results exceeds 1000
        :param list[str] h: glob pattern for sources to include in the query result
        :return: MetricDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_metric_details_with_http_info(m, **kwargs)
        else:
            (data) = self.get_metric_details_with_http_info(m, **kwargs)
            return data

    def get_metric_details_with_http_info(self, m, **kwargs):
        """
        Get more details on a metric, including reporting sources and approximate last time reported
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metric_details_with_http_info(m, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str m: Metric name (required)
        :param str c: cursor value to continue if the number of results exceeds 1000
        :param list[str] h: glob pattern for sources to include in the query result
        :return: MetricDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['m', 'c', 'h']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metric_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'm' is set
        if ('m' not in params) or (params['m'] is None):
            raise ValueError("Missing the required parameter `m` when calling `get_metric_details`")


        collection_formats = {}

        resource_path = '/api/v2/chart/metric/detail'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'm' in params:
            query_params['m'] = params['m']
        if 'c' in params:
            query_params['c'] = params['c']
        if 'h' in params:
            query_params['h'] = params['h']
            collection_formats['h'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/x-javascript', 'application/javascript'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetricDetailsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
