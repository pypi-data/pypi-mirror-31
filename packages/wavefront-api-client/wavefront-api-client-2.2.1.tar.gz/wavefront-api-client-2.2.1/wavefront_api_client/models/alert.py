# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Alert(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'target': 'str',
        'created': 'int',
        'minutes': 'int',
        'tags': 'WFTags',
        'status': 'list[str]',
        'event': 'Event',
        'updated': 'int',
        'display_expression': 'str',
        'condition_qb_enabled': 'bool',
        'display_expression_qb_enabled': 'bool',
        'condition': 'str',
        'condition_qb_serialization': 'str',
        'display_expression_qb_serialization': 'str',
        'severity': 'str',
        'failing_host_label_pairs': 'list[SourceLabelPair]',
        'in_maintenance_host_label_pairs': 'list[SourceLabelPair]',
        'process_rate_minutes': 'int',
        'last_processed_millis': 'int',
        'update_user_id': 'str',
        'alerts_last_day': 'int',
        'alerts_last_week': 'int',
        'alerts_last_month': 'int',
        'snoozed': 'int',
        'additional_information': 'str',
        'in_trash': 'bool',
        'resolve_after_minutes': 'int',
        'creator_id': 'str',
        'query_failing': 'bool',
        'last_failed_time': 'int',
        'last_error_message': 'str',
        'metrics_used': 'list[str]',
        'hosts_used': 'list[str]',
        'active_maintenance_windows': 'list[str]',
        'prefiring_host_label_pairs': 'list[SourceLabelPair]',
        'notificants': 'list[str]',
        'create_user_id': 'str',
        'points_scanned_at_last_query': 'int',
        'last_notification_millis': 'int',
        'notification_resend_frequency_minutes': 'int',
        'created_epoch_millis': 'int',
        'updated_epoch_millis': 'int',
        'updater_id': 'str',
        'deleted': 'bool',
        'target_info': 'list[TargetInfo]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'target': 'target',
        'created': 'created',
        'minutes': 'minutes',
        'tags': 'tags',
        'status': 'status',
        'event': 'event',
        'updated': 'updated',
        'display_expression': 'displayExpression',
        'condition_qb_enabled': 'conditionQBEnabled',
        'display_expression_qb_enabled': 'displayExpressionQBEnabled',
        'condition': 'condition',
        'condition_qb_serialization': 'conditionQBSerialization',
        'display_expression_qb_serialization': 'displayExpressionQBSerialization',
        'severity': 'severity',
        'failing_host_label_pairs': 'failingHostLabelPairs',
        'in_maintenance_host_label_pairs': 'inMaintenanceHostLabelPairs',
        'process_rate_minutes': 'processRateMinutes',
        'last_processed_millis': 'lastProcessedMillis',
        'update_user_id': 'updateUserId',
        'alerts_last_day': 'alertsLastDay',
        'alerts_last_week': 'alertsLastWeek',
        'alerts_last_month': 'alertsLastMonth',
        'snoozed': 'snoozed',
        'additional_information': 'additionalInformation',
        'in_trash': 'inTrash',
        'resolve_after_minutes': 'resolveAfterMinutes',
        'creator_id': 'creatorId',
        'query_failing': 'queryFailing',
        'last_failed_time': 'lastFailedTime',
        'last_error_message': 'lastErrorMessage',
        'metrics_used': 'metricsUsed',
        'hosts_used': 'hostsUsed',
        'active_maintenance_windows': 'activeMaintenanceWindows',
        'prefiring_host_label_pairs': 'prefiringHostLabelPairs',
        'notificants': 'notificants',
        'create_user_id': 'createUserId',
        'points_scanned_at_last_query': 'pointsScannedAtLastQuery',
        'last_notification_millis': 'lastNotificationMillis',
        'notification_resend_frequency_minutes': 'notificationResendFrequencyMinutes',
        'created_epoch_millis': 'createdEpochMillis',
        'updated_epoch_millis': 'updatedEpochMillis',
        'updater_id': 'updaterId',
        'deleted': 'deleted',
        'target_info': 'targetInfo'
    }

    def __init__(self, name=None, id=None, target=None, created=None, minutes=None, tags=None, status=None, event=None, updated=None, display_expression=None, condition_qb_enabled=None, display_expression_qb_enabled=None, condition=None, condition_qb_serialization=None, display_expression_qb_serialization=None, severity=None, failing_host_label_pairs=None, in_maintenance_host_label_pairs=None, process_rate_minutes=None, last_processed_millis=None, update_user_id=None, alerts_last_day=None, alerts_last_week=None, alerts_last_month=None, snoozed=None, additional_information=None, in_trash=None, resolve_after_minutes=None, creator_id=None, query_failing=None, last_failed_time=None, last_error_message=None, metrics_used=None, hosts_used=None, active_maintenance_windows=None, prefiring_host_label_pairs=None, notificants=None, create_user_id=None, points_scanned_at_last_query=None, last_notification_millis=None, notification_resend_frequency_minutes=None, created_epoch_millis=None, updated_epoch_millis=None, updater_id=None, deleted=None, target_info=None):
        """
        Alert - a model defined in Swagger
        """

        self._name = None
        self._id = None
        self._target = None
        self._created = None
        self._minutes = None
        self._tags = None
        self._status = None
        self._event = None
        self._updated = None
        self._display_expression = None
        self._condition_qb_enabled = None
        self._display_expression_qb_enabled = None
        self._condition = None
        self._condition_qb_serialization = None
        self._display_expression_qb_serialization = None
        self._severity = None
        self._failing_host_label_pairs = None
        self._in_maintenance_host_label_pairs = None
        self._process_rate_minutes = None
        self._last_processed_millis = None
        self._update_user_id = None
        self._alerts_last_day = None
        self._alerts_last_week = None
        self._alerts_last_month = None
        self._snoozed = None
        self._additional_information = None
        self._in_trash = None
        self._resolve_after_minutes = None
        self._creator_id = None
        self._query_failing = None
        self._last_failed_time = None
        self._last_error_message = None
        self._metrics_used = None
        self._hosts_used = None
        self._active_maintenance_windows = None
        self._prefiring_host_label_pairs = None
        self._notificants = None
        self._create_user_id = None
        self._points_scanned_at_last_query = None
        self._last_notification_millis = None
        self._notification_resend_frequency_minutes = None
        self._created_epoch_millis = None
        self._updated_epoch_millis = None
        self._updater_id = None
        self._deleted = None
        self._target_info = None
        self.discriminator = None

        self.name = name
        if id is not None:
          self.id = id
        self.target = target
        if created is not None:
          self.created = created
        self.minutes = minutes
        if tags is not None:
          self.tags = tags
        if status is not None:
          self.status = status
        if event is not None:
          self.event = event
        if updated is not None:
          self.updated = updated
        if display_expression is not None:
          self.display_expression = display_expression
        if condition_qb_enabled is not None:
          self.condition_qb_enabled = condition_qb_enabled
        if display_expression_qb_enabled is not None:
          self.display_expression_qb_enabled = display_expression_qb_enabled
        self.condition = condition
        if condition_qb_serialization is not None:
          self.condition_qb_serialization = condition_qb_serialization
        if display_expression_qb_serialization is not None:
          self.display_expression_qb_serialization = display_expression_qb_serialization
        self.severity = severity
        if failing_host_label_pairs is not None:
          self.failing_host_label_pairs = failing_host_label_pairs
        if in_maintenance_host_label_pairs is not None:
          self.in_maintenance_host_label_pairs = in_maintenance_host_label_pairs
        if process_rate_minutes is not None:
          self.process_rate_minutes = process_rate_minutes
        if last_processed_millis is not None:
          self.last_processed_millis = last_processed_millis
        if update_user_id is not None:
          self.update_user_id = update_user_id
        if alerts_last_day is not None:
          self.alerts_last_day = alerts_last_day
        if alerts_last_week is not None:
          self.alerts_last_week = alerts_last_week
        if alerts_last_month is not None:
          self.alerts_last_month = alerts_last_month
        if snoozed is not None:
          self.snoozed = snoozed
        if additional_information is not None:
          self.additional_information = additional_information
        if in_trash is not None:
          self.in_trash = in_trash
        if resolve_after_minutes is not None:
          self.resolve_after_minutes = resolve_after_minutes
        if creator_id is not None:
          self.creator_id = creator_id
        if query_failing is not None:
          self.query_failing = query_failing
        if last_failed_time is not None:
          self.last_failed_time = last_failed_time
        if last_error_message is not None:
          self.last_error_message = last_error_message
        if metrics_used is not None:
          self.metrics_used = metrics_used
        if hosts_used is not None:
          self.hosts_used = hosts_used
        if active_maintenance_windows is not None:
          self.active_maintenance_windows = active_maintenance_windows
        if prefiring_host_label_pairs is not None:
          self.prefiring_host_label_pairs = prefiring_host_label_pairs
        if notificants is not None:
          self.notificants = notificants
        if create_user_id is not None:
          self.create_user_id = create_user_id
        if points_scanned_at_last_query is not None:
          self.points_scanned_at_last_query = points_scanned_at_last_query
        if last_notification_millis is not None:
          self.last_notification_millis = last_notification_millis
        if notification_resend_frequency_minutes is not None:
          self.notification_resend_frequency_minutes = notification_resend_frequency_minutes
        if created_epoch_millis is not None:
          self.created_epoch_millis = created_epoch_millis
        if updated_epoch_millis is not None:
          self.updated_epoch_millis = updated_epoch_millis
        if updater_id is not None:
          self.updater_id = updater_id
        if deleted is not None:
          self.deleted = deleted
        if target_info is not None:
          self.target_info = target_info

    @property
    def name(self):
        """
        Gets the name of this Alert.

        :return: The name of this Alert.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Alert.

        :param name: The name of this Alert.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this Alert.

        :return: The id of this Alert.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Alert.

        :param id: The id of this Alert.
        :type: str
        """

        self._id = id

    @property
    def target(self):
        """
        Gets the target of this Alert.
        The email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes

        :return: The target of this Alert.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this Alert.
        The email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes

        :param target: The target of this Alert.
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def created(self):
        """
        Gets the created of this Alert.
        When this alert was created, in epoch millis

        :return: The created of this Alert.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Alert.
        When this alert was created, in epoch millis

        :param created: The created of this Alert.
        :type: int
        """

        self._created = created

    @property
    def minutes(self):
        """
        Gets the minutes of this Alert.
        The number of consecutive minutes that a series matching the condition query must evaluate to \"true\" (non-zero value) before the alert fires

        :return: The minutes of this Alert.
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """
        Sets the minutes of this Alert.
        The number of consecutive minutes that a series matching the condition query must evaluate to \"true\" (non-zero value) before the alert fires

        :param minutes: The minutes of this Alert.
        :type: int
        """
        if minutes is None:
            raise ValueError("Invalid value for `minutes`, must not be `None`")

        self._minutes = minutes

    @property
    def tags(self):
        """
        Gets the tags of this Alert.

        :return: The tags of this Alert.
        :rtype: WFTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Alert.

        :param tags: The tags of this Alert.
        :type: WFTags
        """

        self._tags = tags

    @property
    def status(self):
        """
        Gets the status of this Alert.
        Lists the current state of the alert. Can be one or more of: FIRING,SNOOZED, IN_MAINTENANCE, INVALID, NONE, CHECKING, TRASH, NO_DATA

        :return: The status of this Alert.
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Alert.
        Lists the current state of the alert. Can be one or more of: FIRING,SNOOZED, IN_MAINTENANCE, INVALID, NONE, CHECKING, TRASH, NO_DATA

        :param status: The status of this Alert.
        :type: list[str]
        """

        self._status = status

    @property
    def event(self):
        """
        Gets the event of this Alert.

        :return: The event of this Alert.
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """
        Sets the event of this Alert.

        :param event: The event of this Alert.
        :type: Event
        """

        self._event = event

    @property
    def updated(self):
        """
        Gets the updated of this Alert.
        When the alert was last updated, in epoch millis

        :return: The updated of this Alert.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Alert.
        When the alert was last updated, in epoch millis

        :param updated: The updated of this Alert.
        :type: int
        """

        self._updated = updated

    @property
    def display_expression(self):
        """
        Gets the display_expression of this Alert.
        A second query whose results are displayed in the alert user interface instead of the condition query. This field is often used to display a version of the condition query with Boolean operators removed so that numerical values are plotted

        :return: The display_expression of this Alert.
        :rtype: str
        """
        return self._display_expression

    @display_expression.setter
    def display_expression(self, display_expression):
        """
        Sets the display_expression of this Alert.
        A second query whose results are displayed in the alert user interface instead of the condition query. This field is often used to display a version of the condition query with Boolean operators removed so that numerical values are plotted

        :param display_expression: The display_expression of this Alert.
        :type: str
        """

        self._display_expression = display_expression

    @property
    def condition_qb_enabled(self):
        """
        Gets the condition_qb_enabled of this Alert.
        Whether the condition query was created using the Query Builder.  Default false

        :return: The condition_qb_enabled of this Alert.
        :rtype: bool
        """
        return self._condition_qb_enabled

    @condition_qb_enabled.setter
    def condition_qb_enabled(self, condition_qb_enabled):
        """
        Sets the condition_qb_enabled of this Alert.
        Whether the condition query was created using the Query Builder.  Default false

        :param condition_qb_enabled: The condition_qb_enabled of this Alert.
        :type: bool
        """

        self._condition_qb_enabled = condition_qb_enabled

    @property
    def display_expression_qb_enabled(self):
        """
        Gets the display_expression_qb_enabled of this Alert.
        Whether the display expression query was created using the Query Builder. Default false

        :return: The display_expression_qb_enabled of this Alert.
        :rtype: bool
        """
        return self._display_expression_qb_enabled

    @display_expression_qb_enabled.setter
    def display_expression_qb_enabled(self, display_expression_qb_enabled):
        """
        Sets the display_expression_qb_enabled of this Alert.
        Whether the display expression query was created using the Query Builder. Default false

        :param display_expression_qb_enabled: The display_expression_qb_enabled of this Alert.
        :type: bool
        """

        self._display_expression_qb_enabled = display_expression_qb_enabled

    @property
    def condition(self):
        """
        Gets the condition of this Alert.
        A Wavefront query that is evaluated at regular intervals (default 1m).  The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes

        :return: The condition of this Alert.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """
        Sets the condition of this Alert.
        A Wavefront query that is evaluated at regular intervals (default 1m).  The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes

        :param condition: The condition of this Alert.
        :type: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def condition_qb_serialization(self):
        """
        Gets the condition_qb_serialization of this Alert.
        The special serialization of the Query Builder that corresponds to the condition query.  Applicable only when conditionQBEnabled is true

        :return: The condition_qb_serialization of this Alert.
        :rtype: str
        """
        return self._condition_qb_serialization

    @condition_qb_serialization.setter
    def condition_qb_serialization(self, condition_qb_serialization):
        """
        Sets the condition_qb_serialization of this Alert.
        The special serialization of the Query Builder that corresponds to the condition query.  Applicable only when conditionQBEnabled is true

        :param condition_qb_serialization: The condition_qb_serialization of this Alert.
        :type: str
        """

        self._condition_qb_serialization = condition_qb_serialization

    @property
    def display_expression_qb_serialization(self):
        """
        Gets the display_expression_qb_serialization of this Alert.
        The special serialization of the Query Builder that corresponds to the display expression query.  Applicable only when displayExpressionQBEnabled is true

        :return: The display_expression_qb_serialization of this Alert.
        :rtype: str
        """
        return self._display_expression_qb_serialization

    @display_expression_qb_serialization.setter
    def display_expression_qb_serialization(self, display_expression_qb_serialization):
        """
        Sets the display_expression_qb_serialization of this Alert.
        The special serialization of the Query Builder that corresponds to the display expression query.  Applicable only when displayExpressionQBEnabled is true

        :param display_expression_qb_serialization: The display_expression_qb_serialization of this Alert.
        :type: str
        """

        self._display_expression_qb_serialization = display_expression_qb_serialization

    @property
    def severity(self):
        """
        Gets the severity of this Alert.
        Severity of the alert

        :return: The severity of this Alert.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this Alert.
        Severity of the alert

        :param severity: The severity of this Alert.
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")
        allowed_values = ["INFO", "SMOKE", "WARN", "SEVERE"]
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def failing_host_label_pairs(self):
        """
        Gets the failing_host_label_pairs of this Alert.
        Failing host/metric pairs

        :return: The failing_host_label_pairs of this Alert.
        :rtype: list[SourceLabelPair]
        """
        return self._failing_host_label_pairs

    @failing_host_label_pairs.setter
    def failing_host_label_pairs(self, failing_host_label_pairs):
        """
        Sets the failing_host_label_pairs of this Alert.
        Failing host/metric pairs

        :param failing_host_label_pairs: The failing_host_label_pairs of this Alert.
        :type: list[SourceLabelPair]
        """

        self._failing_host_label_pairs = failing_host_label_pairs

    @property
    def in_maintenance_host_label_pairs(self):
        """
        Gets the in_maintenance_host_label_pairs of this Alert.
        Lists the sources that will not be checked for this alert, due to matching a maintenance window

        :return: The in_maintenance_host_label_pairs of this Alert.
        :rtype: list[SourceLabelPair]
        """
        return self._in_maintenance_host_label_pairs

    @in_maintenance_host_label_pairs.setter
    def in_maintenance_host_label_pairs(self, in_maintenance_host_label_pairs):
        """
        Sets the in_maintenance_host_label_pairs of this Alert.
        Lists the sources that will not be checked for this alert, due to matching a maintenance window

        :param in_maintenance_host_label_pairs: The in_maintenance_host_label_pairs of this Alert.
        :type: list[SourceLabelPair]
        """

        self._in_maintenance_host_label_pairs = in_maintenance_host_label_pairs

    @property
    def process_rate_minutes(self):
        """
        Gets the process_rate_minutes of this Alert.
        The interval between checks for this alert, in minutes.  Defaults to 1 minute

        :return: The process_rate_minutes of this Alert.
        :rtype: int
        """
        return self._process_rate_minutes

    @process_rate_minutes.setter
    def process_rate_minutes(self, process_rate_minutes):
        """
        Sets the process_rate_minutes of this Alert.
        The interval between checks for this alert, in minutes.  Defaults to 1 minute

        :param process_rate_minutes: The process_rate_minutes of this Alert.
        :type: int
        """

        self._process_rate_minutes = process_rate_minutes

    @property
    def last_processed_millis(self):
        """
        Gets the last_processed_millis of this Alert.
        The time when this alert was last checked, in epoch millis

        :return: The last_processed_millis of this Alert.
        :rtype: int
        """
        return self._last_processed_millis

    @last_processed_millis.setter
    def last_processed_millis(self, last_processed_millis):
        """
        Sets the last_processed_millis of this Alert.
        The time when this alert was last checked, in epoch millis

        :param last_processed_millis: The last_processed_millis of this Alert.
        :type: int
        """

        self._last_processed_millis = last_processed_millis

    @property
    def update_user_id(self):
        """
        Gets the update_user_id of this Alert.
        The user that last updated this alert

        :return: The update_user_id of this Alert.
        :rtype: str
        """
        return self._update_user_id

    @update_user_id.setter
    def update_user_id(self, update_user_id):
        """
        Sets the update_user_id of this Alert.
        The user that last updated this alert

        :param update_user_id: The update_user_id of this Alert.
        :type: str
        """

        self._update_user_id = update_user_id

    @property
    def alerts_last_day(self):
        """
        Gets the alerts_last_day of this Alert.

        :return: The alerts_last_day of this Alert.
        :rtype: int
        """
        return self._alerts_last_day

    @alerts_last_day.setter
    def alerts_last_day(self, alerts_last_day):
        """
        Sets the alerts_last_day of this Alert.

        :param alerts_last_day: The alerts_last_day of this Alert.
        :type: int
        """

        self._alerts_last_day = alerts_last_day

    @property
    def alerts_last_week(self):
        """
        Gets the alerts_last_week of this Alert.

        :return: The alerts_last_week of this Alert.
        :rtype: int
        """
        return self._alerts_last_week

    @alerts_last_week.setter
    def alerts_last_week(self, alerts_last_week):
        """
        Sets the alerts_last_week of this Alert.

        :param alerts_last_week: The alerts_last_week of this Alert.
        :type: int
        """

        self._alerts_last_week = alerts_last_week

    @property
    def alerts_last_month(self):
        """
        Gets the alerts_last_month of this Alert.

        :return: The alerts_last_month of this Alert.
        :rtype: int
        """
        return self._alerts_last_month

    @alerts_last_month.setter
    def alerts_last_month(self, alerts_last_month):
        """
        Sets the alerts_last_month of this Alert.

        :param alerts_last_month: The alerts_last_month of this Alert.
        :type: int
        """

        self._alerts_last_month = alerts_last_month

    @property
    def snoozed(self):
        """
        Gets the snoozed of this Alert.
        The until which time this alert is snoozed (not checked), in epoch millis.  A negative value implies the alert is snoozed indefinitely

        :return: The snoozed of this Alert.
        :rtype: int
        """
        return self._snoozed

    @snoozed.setter
    def snoozed(self, snoozed):
        """
        Sets the snoozed of this Alert.
        The until which time this alert is snoozed (not checked), in epoch millis.  A negative value implies the alert is snoozed indefinitely

        :param snoozed: The snoozed of this Alert.
        :type: int
        """

        self._snoozed = snoozed

    @property
    def additional_information(self):
        """
        Gets the additional_information of this Alert.
        User-supplied additional explanatory information for this alert.  Useful for linking runbooks, mitigations,, etc

        :return: The additional_information of this Alert.
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """
        Sets the additional_information of this Alert.
        User-supplied additional explanatory information for this alert.  Useful for linking runbooks, mitigations,, etc

        :param additional_information: The additional_information of this Alert.
        :type: str
        """

        self._additional_information = additional_information

    @property
    def in_trash(self):
        """
        Gets the in_trash of this Alert.

        :return: The in_trash of this Alert.
        :rtype: bool
        """
        return self._in_trash

    @in_trash.setter
    def in_trash(self, in_trash):
        """
        Sets the in_trash of this Alert.

        :param in_trash: The in_trash of this Alert.
        :type: bool
        """

        self._in_trash = in_trash

    @property
    def resolve_after_minutes(self):
        """
        Gets the resolve_after_minutes of this Alert.
        The number of consecutive minutes that a firing series matching the condition query must evaluate to \"false\" (zero value) before the alert resolves.  When unset, this defaults to the same value as \"minutes\"

        :return: The resolve_after_minutes of this Alert.
        :rtype: int
        """
        return self._resolve_after_minutes

    @resolve_after_minutes.setter
    def resolve_after_minutes(self, resolve_after_minutes):
        """
        Sets the resolve_after_minutes of this Alert.
        The number of consecutive minutes that a firing series matching the condition query must evaluate to \"false\" (zero value) before the alert resolves.  When unset, this defaults to the same value as \"minutes\"

        :param resolve_after_minutes: The resolve_after_minutes of this Alert.
        :type: int
        """

        self._resolve_after_minutes = resolve_after_minutes

    @property
    def creator_id(self):
        """
        Gets the creator_id of this Alert.

        :return: The creator_id of this Alert.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this Alert.

        :param creator_id: The creator_id of this Alert.
        :type: str
        """

        self._creator_id = creator_id

    @property
    def query_failing(self):
        """
        Gets the query_failing of this Alert.
        Whether there was an exception when the alert condition last ran

        :return: The query_failing of this Alert.
        :rtype: bool
        """
        return self._query_failing

    @query_failing.setter
    def query_failing(self, query_failing):
        """
        Sets the query_failing of this Alert.
        Whether there was an exception when the alert condition last ran

        :param query_failing: The query_failing of this Alert.
        :type: bool
        """

        self._query_failing = query_failing

    @property
    def last_failed_time(self):
        """
        Gets the last_failed_time of this Alert.
        The time of the last error encountered when running this alert's condition query, in epoch millis

        :return: The last_failed_time of this Alert.
        :rtype: int
        """
        return self._last_failed_time

    @last_failed_time.setter
    def last_failed_time(self, last_failed_time):
        """
        Sets the last_failed_time of this Alert.
        The time of the last error encountered when running this alert's condition query, in epoch millis

        :param last_failed_time: The last_failed_time of this Alert.
        :type: int
        """

        self._last_failed_time = last_failed_time

    @property
    def last_error_message(self):
        """
        Gets the last_error_message of this Alert.
        The last error encountered when running this alert's condition query

        :return: The last_error_message of this Alert.
        :rtype: str
        """
        return self._last_error_message

    @last_error_message.setter
    def last_error_message(self, last_error_message):
        """
        Sets the last_error_message of this Alert.
        The last error encountered when running this alert's condition query

        :param last_error_message: The last_error_message of this Alert.
        :type: str
        """

        self._last_error_message = last_error_message

    @property
    def metrics_used(self):
        """
        Gets the metrics_used of this Alert.
        Number of metrics checked by the alert condition

        :return: The metrics_used of this Alert.
        :rtype: list[str]
        """
        return self._metrics_used

    @metrics_used.setter
    def metrics_used(self, metrics_used):
        """
        Sets the metrics_used of this Alert.
        Number of metrics checked by the alert condition

        :param metrics_used: The metrics_used of this Alert.
        :type: list[str]
        """

        self._metrics_used = metrics_used

    @property
    def hosts_used(self):
        """
        Gets the hosts_used of this Alert.
        Number of hosts checked by the alert condition

        :return: The hosts_used of this Alert.
        :rtype: list[str]
        """
        return self._hosts_used

    @hosts_used.setter
    def hosts_used(self, hosts_used):
        """
        Sets the hosts_used of this Alert.
        Number of hosts checked by the alert condition

        :param hosts_used: The hosts_used of this Alert.
        :type: list[str]
        """

        self._hosts_used = hosts_used

    @property
    def active_maintenance_windows(self):
        """
        Gets the active_maintenance_windows of this Alert.
        The names of the active maintenance windows that are affecting this alert

        :return: The active_maintenance_windows of this Alert.
        :rtype: list[str]
        """
        return self._active_maintenance_windows

    @active_maintenance_windows.setter
    def active_maintenance_windows(self, active_maintenance_windows):
        """
        Sets the active_maintenance_windows of this Alert.
        The names of the active maintenance windows that are affecting this alert

        :param active_maintenance_windows: The active_maintenance_windows of this Alert.
        :type: list[str]
        """

        self._active_maintenance_windows = active_maintenance_windows

    @property
    def prefiring_host_label_pairs(self):
        """
        Gets the prefiring_host_label_pairs of this Alert.
        Lists the series that are starting to fail, defined as failing for greater than 50% of the checks in the window determined by the \"minutes\" parameter

        :return: The prefiring_host_label_pairs of this Alert.
        :rtype: list[SourceLabelPair]
        """
        return self._prefiring_host_label_pairs

    @prefiring_host_label_pairs.setter
    def prefiring_host_label_pairs(self, prefiring_host_label_pairs):
        """
        Sets the prefiring_host_label_pairs of this Alert.
        Lists the series that are starting to fail, defined as failing for greater than 50% of the checks in the window determined by the \"minutes\" parameter

        :param prefiring_host_label_pairs: The prefiring_host_label_pairs of this Alert.
        :type: list[SourceLabelPair]
        """

        self._prefiring_host_label_pairs = prefiring_host_label_pairs

    @property
    def notificants(self):
        """
        Gets the notificants of this Alert.
        A derived field listing the webhook ids used by this alert

        :return: The notificants of this Alert.
        :rtype: list[str]
        """
        return self._notificants

    @notificants.setter
    def notificants(self, notificants):
        """
        Sets the notificants of this Alert.
        A derived field listing the webhook ids used by this alert

        :param notificants: The notificants of this Alert.
        :type: list[str]
        """

        self._notificants = notificants

    @property
    def create_user_id(self):
        """
        Gets the create_user_id of this Alert.

        :return: The create_user_id of this Alert.
        :rtype: str
        """
        return self._create_user_id

    @create_user_id.setter
    def create_user_id(self, create_user_id):
        """
        Sets the create_user_id of this Alert.

        :param create_user_id: The create_user_id of this Alert.
        :type: str
        """

        self._create_user_id = create_user_id

    @property
    def points_scanned_at_last_query(self):
        """
        Gets the points_scanned_at_last_query of this Alert.
        A derived field recording the number of data points scanned when the system last computed this alert's condition

        :return: The points_scanned_at_last_query of this Alert.
        :rtype: int
        """
        return self._points_scanned_at_last_query

    @points_scanned_at_last_query.setter
    def points_scanned_at_last_query(self, points_scanned_at_last_query):
        """
        Sets the points_scanned_at_last_query of this Alert.
        A derived field recording the number of data points scanned when the system last computed this alert's condition

        :param points_scanned_at_last_query: The points_scanned_at_last_query of this Alert.
        :type: int
        """

        self._points_scanned_at_last_query = points_scanned_at_last_query

    @property
    def last_notification_millis(self):
        """
        Gets the last_notification_millis of this Alert.
        When this alert last caused a notification, in epoch millis

        :return: The last_notification_millis of this Alert.
        :rtype: int
        """
        return self._last_notification_millis

    @last_notification_millis.setter
    def last_notification_millis(self, last_notification_millis):
        """
        Sets the last_notification_millis of this Alert.
        When this alert last caused a notification, in epoch millis

        :param last_notification_millis: The last_notification_millis of this Alert.
        :type: int
        """

        self._last_notification_millis = last_notification_millis

    @property
    def notification_resend_frequency_minutes(self):
        """
        Gets the notification_resend_frequency_minutes of this Alert.
        How often to re-trigger a continually failing alert. If absent or <= 0, no retriggering occurs

        :return: The notification_resend_frequency_minutes of this Alert.
        :rtype: int
        """
        return self._notification_resend_frequency_minutes

    @notification_resend_frequency_minutes.setter
    def notification_resend_frequency_minutes(self, notification_resend_frequency_minutes):
        """
        Sets the notification_resend_frequency_minutes of this Alert.
        How often to re-trigger a continually failing alert. If absent or <= 0, no retriggering occurs

        :param notification_resend_frequency_minutes: The notification_resend_frequency_minutes of this Alert.
        :type: int
        """

        self._notification_resend_frequency_minutes = notification_resend_frequency_minutes

    @property
    def created_epoch_millis(self):
        """
        Gets the created_epoch_millis of this Alert.

        :return: The created_epoch_millis of this Alert.
        :rtype: int
        """
        return self._created_epoch_millis

    @created_epoch_millis.setter
    def created_epoch_millis(self, created_epoch_millis):
        """
        Sets the created_epoch_millis of this Alert.

        :param created_epoch_millis: The created_epoch_millis of this Alert.
        :type: int
        """

        self._created_epoch_millis = created_epoch_millis

    @property
    def updated_epoch_millis(self):
        """
        Gets the updated_epoch_millis of this Alert.

        :return: The updated_epoch_millis of this Alert.
        :rtype: int
        """
        return self._updated_epoch_millis

    @updated_epoch_millis.setter
    def updated_epoch_millis(self, updated_epoch_millis):
        """
        Sets the updated_epoch_millis of this Alert.

        :param updated_epoch_millis: The updated_epoch_millis of this Alert.
        :type: int
        """

        self._updated_epoch_millis = updated_epoch_millis

    @property
    def updater_id(self):
        """
        Gets the updater_id of this Alert.

        :return: The updater_id of this Alert.
        :rtype: str
        """
        return self._updater_id

    @updater_id.setter
    def updater_id(self, updater_id):
        """
        Sets the updater_id of this Alert.

        :param updater_id: The updater_id of this Alert.
        :type: str
        """

        self._updater_id = updater_id

    @property
    def deleted(self):
        """
        Gets the deleted of this Alert.

        :return: The deleted of this Alert.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Alert.

        :param deleted: The deleted of this Alert.
        :type: bool
        """

        self._deleted = deleted

    @property
    def target_info(self):
        """
        Gets the target_info of this Alert.
        List of alert targets display information that includes name, id and type.

        :return: The target_info of this Alert.
        :rtype: list[TargetInfo]
        """
        return self._target_info

    @target_info.setter
    def target_info(self, target_info):
        """
        Sets the target_info of this Alert.
        List of alert targets display information that includes name, id and type.

        :param target_info: The target_info of this Alert.
        :type: list[TargetInfo]
        """

        self._target_info = target_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
