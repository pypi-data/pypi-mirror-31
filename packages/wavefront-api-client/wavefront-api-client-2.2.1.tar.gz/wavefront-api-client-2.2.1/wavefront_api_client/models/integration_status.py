# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IntegrationStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_status': 'str',
        'install_status': 'str',
        'metric_statuses': 'dict(str, MetricStatus)'
    }

    attribute_map = {
        'content_status': 'contentStatus',
        'install_status': 'installStatus',
        'metric_statuses': 'metricStatuses'
    }

    def __init__(self, content_status=None, install_status=None, metric_statuses=None):
        """
        IntegrationStatus - a model defined in Swagger
        """

        self._content_status = None
        self._install_status = None
        self._metric_statuses = None
        self.discriminator = None

        self.content_status = content_status
        self.install_status = install_status
        self.metric_statuses = metric_statuses

    @property
    def content_status(self):
        """
        Gets the content_status of this IntegrationStatus.
        Status of integration content, e.g. dashboards

        :return: The content_status of this IntegrationStatus.
        :rtype: str
        """
        return self._content_status

    @content_status.setter
    def content_status(self, content_status):
        """
        Sets the content_status of this IntegrationStatus.
        Status of integration content, e.g. dashboards

        :param content_status: The content_status of this IntegrationStatus.
        :type: str
        """
        if content_status is None:
            raise ValueError("Invalid value for `content_status`, must not be `None`")
        allowed_values = ["INVALID", "NOT_LOADED", "HIDDEN", "VISIBLE"]
        if content_status not in allowed_values:
            raise ValueError(
                "Invalid value for `content_status` ({0}), must be one of {1}"
                .format(content_status, allowed_values)
            )

        self._content_status = content_status

    @property
    def install_status(self):
        """
        Gets the install_status of this IntegrationStatus.
        Whether the customer or an automated process has chosen to install this integration

        :return: The install_status of this IntegrationStatus.
        :rtype: str
        """
        return self._install_status

    @install_status.setter
    def install_status(self, install_status):
        """
        Sets the install_status of this IntegrationStatus.
        Whether the customer or an automated process has chosen to install this integration

        :param install_status: The install_status of this IntegrationStatus.
        :type: str
        """
        if install_status is None:
            raise ValueError("Invalid value for `install_status`, must not be `None`")
        allowed_values = ["UNDECIDED", "UNINSTALLED", "INSTALLED"]
        if install_status not in allowed_values:
            raise ValueError(
                "Invalid value for `install_status` ({0}), must be one of {1}"
                .format(install_status, allowed_values)
            )

        self._install_status = install_status

    @property
    def metric_statuses(self):
        """
        Gets the metric_statuses of this IntegrationStatus.
        A Map from names of the required metrics to an object representing their reporting status.  The reporting status object has 3 boolean fields denoting whether the metric has been received during the corresponding time period: `ever`, `recentExceptNow`, and `now`.  `now` is on the order of a few hours, and `recentExceptNow` is on the order of the past few days, excluding the period considered to be `now`.

        :return: The metric_statuses of this IntegrationStatus.
        :rtype: dict(str, MetricStatus)
        """
        return self._metric_statuses

    @metric_statuses.setter
    def metric_statuses(self, metric_statuses):
        """
        Sets the metric_statuses of this IntegrationStatus.
        A Map from names of the required metrics to an object representing their reporting status.  The reporting status object has 3 boolean fields denoting whether the metric has been received during the corresponding time period: `ever`, `recentExceptNow`, and `now`.  `now` is on the order of a few hours, and `recentExceptNow` is on the order of the past few days, excluding the period considered to be `now`.

        :param metric_statuses: The metric_statuses of this IntegrationStatus.
        :type: dict(str, MetricStatus)
        """
        if metric_statuses is None:
            raise ValueError("Invalid value for `metric_statuses`, must not be `None`")

        self._metric_statuses = metric_statuses

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IntegrationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
