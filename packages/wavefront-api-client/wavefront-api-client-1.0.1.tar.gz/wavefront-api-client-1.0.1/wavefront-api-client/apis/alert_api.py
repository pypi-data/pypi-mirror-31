# coding: utf-8

"""
AlertApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AlertApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_alert_from_parts(self, name, condition, minutes, notifications, severity, **kwargs):
        """
        Create an alert
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_alert_from_parts(name, condition, minutes, notifications, severity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Descriptive name for the alert (required)
        :param str condition: A query that will trigger the alert if non-zero results are observed for given number of minutes (required)
        :param int minutes: Number of minutes for the query to return non-zero results before the alert fires. Must be 2 or higher (required)
        :param str notifications: Up to ten addresses can be listed, separated by commas. Notifications will be sent to all targets on the list. To trigger a PagerDuty incident, specify a \"pd:key\" target with the 32-digit hex API key you created. PagerDuty incidents will be automatically triggered, updated, and resolved. (required)
        :param str severity: Severity (required)
        :param str display_expression: An optional query that will be shown when the alert fires. Use this to show a more helpful chart, e.g. the underlying timeseries
        :param int resolve_minutes: Number of minutes for the query to return 0 as a result before the alert resolves. Defaults to the same as minutes to fire if not set. Must be 2 or higher
        :param str private_tags: Comma separated list of private tags to be associated with this alert
        :param str shared_tags: Comma separated list of shared tags to be associated with this alert
        :param str additional_information: Any additional information to be included with this alert
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'condition', 'minutes', 'notifications', 'severity', 'display_expression', 'resolve_minutes', 'private_tags', 'shared_tags', 'additional_information']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_alert_from_parts" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_alert_from_parts`")
        # verify the required parameter 'condition' is set
        if ('condition' not in params) or (params['condition'] is None):
            raise ValueError("Missing the required parameter `condition` when calling `create_alert_from_parts`")
        # verify the required parameter 'minutes' is set
        if ('minutes' not in params) or (params['minutes'] is None):
            raise ValueError("Missing the required parameter `minutes` when calling `create_alert_from_parts`")
        # verify the required parameter 'notifications' is set
        if ('notifications' not in params) or (params['notifications'] is None):
            raise ValueError("Missing the required parameter `notifications` when calling `create_alert_from_parts`")
        # verify the required parameter 'severity' is set
        if ('severity' not in params) or (params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `create_alert_from_parts`")

        resource_path = '/api/alert/create'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'condition' in params:
            form_params.append(('condition', params['condition']))
        if 'display_expression' in params:
            form_params.append(('displayExpression', params['display_expression']))
        if 'minutes' in params:
            form_params.append(('minutes', params['minutes']))
        if 'resolve_minutes' in params:
            form_params.append(('resolveMinutes', params['resolve_minutes']))
        if 'notifications' in params:
            form_params.append(('notifications', params['notifications']))
        if 'severity' in params:
            form_params.append(('severity', params['severity']))
        if 'private_tags' in params:
            form_params.append(('privateTags', params['private_tags']))
        if 'shared_tags' in params:
            form_params.append(('sharedTags', params['shared_tags']))
        if 'additional_information' in params:
            form_params.append(('additionalInformation', params['additional_information']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alert',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_active_alerts(self, **kwargs):
        """
        Get Active Alerts
        Return all firing alerts

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_active_alerts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] customer_tag: Restrict result to alerts with this shared tag
        :param list[str] user_tag: Restrict result to alerts with this private tag
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_tag', 'user_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_alerts" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/alert/active'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_tag' in params:
            query_params['customerTag'] = params['customer_tag']
        if 'user_tag' in params:
            query_params['userTag'] = params['user_tag']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Alert]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_alert(self, **kwargs):
        """
        Retrieve a list of alerts for a particular view. (Deprecated: Retrieve a single alert by its id (creation time))
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alert(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int created: (Deprecated)
        :param str view: 
        :param list[str] customer_tag: Restrict result to alerts with this shared tag
        :param list[str] user_tag: Restrict result to alerts with this private tag
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['created', 'view', 'customer_tag', 'user_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/alert'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'created' in params:
            query_params['created'] = params['created']
        if 'view' in params:
            query_params['view'] = params['view']
        if 'customer_tag' in params:
            query_params['customerTag'] = params['customer_tag']
        if 'user_tag' in params:
            query_params['userTag'] = params['user_tag']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alert',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_alerts(self, **kwargs):
        """
        Get All Alerts
        Return all alerts

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alerts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] customer_tag: Restrict result to alerts with this shared tag
        :param list[str] user_tag: Restrict result to alerts with this private tag
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_tag', 'user_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/alert/all'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_tag' in params:
            query_params['customerTag'] = params['customer_tag']
        if 'user_tag' in params:
            query_params['userTag'] = params['user_tag']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Alert]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_alerts_affected_by_maintenance(self, **kwargs):
        """
        Get In Maintenance Alerts
        Return all alerts currently in a maintenance window

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alerts_affected_by_maintenance(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] customer_tag: Restrict result to alerts with this shared tag
        :param list[str] user_tag: Restrict result to alerts with this private tag
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_tag', 'user_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts_affected_by_maintenance" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/alert/affected_by_maintenance'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_tag' in params:
            query_params['customerTag'] = params['customer_tag']
        if 'user_tag' in params:
            query_params['userTag'] = params['user_tag']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Alert]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_invalid_alerts(self, **kwargs):
        """
        Get Invalid Alerts
        Return all alerts that have an invalid query

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invalid_alerts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] customer_tag: Restrict result to alerts with this shared tag
        :param list[str] user_tag: Restrict result to alerts with this private tag
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_tag', 'user_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invalid_alerts" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/alert/invalid'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_tag' in params:
            query_params['customerTag'] = params['customer_tag']
        if 'user_tag' in params:
            query_params['userTag'] = params['user_tag']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Alert]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snoozed_alerts(self, **kwargs):
        """
        Get Snoozed Alerts
        Return all snoozed alerts

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snoozed_alerts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] customer_tag: Restrict result to alerts with this shared tag
        :param list[str] user_tag: Restrict result to alerts with this private tag
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_tag', 'user_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snoozed_alerts" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/alert/snoozed'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_tag' in params:
            query_params['customerTag'] = params['customer_tag']
        if 'user_tag' in params:
            query_params['userTag'] = params['user_tag']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Alert]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_specific_alert(self, created, **kwargs):
        """
        Retrieve a single alert by its id (creation time)
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_specific_alert(created, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int created:  (required)
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['created']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_specific_alert" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'created' is set
        if ('created' not in params) or (params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `get_specific_alert`")

        resource_path = '/api/alert/{created}'.replace('{format}', 'json')
        path_params = {}
        if 'created' in params:
            path_params['created'] = params['created']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alert',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_alert_from_parts(self, alert_id, **kwargs):
        """
        Update an alert
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_alert_from_parts(alert_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id:  (required)
        :param str name: Descriptive name for the alert
        :param str condition: A query that will trigger the alert if non-zero results are observed for given number of minutes
        :param str display_expression: An optional query that will be shown when the alert fires. Use this to show a more helpful chart, e.g. the underlying timeseries
        :param int minutes: Number of minutes for the query to return non-zero results before the alert fires. Must be 2 or higher
        :param int resolve_minutes: Number of minutes for the query to return 0 as a result before the alert resolves. Defaults to the same as minutes to fire if not set. Must be 2 or higher
        :param str notifications: Up to ten addresses can be listed,  separated by commas. Notifications will be sent to all targets on the list. To trigger a PagerDuty incident, specify a \"pd:key\" target with the 32-digit hex API key you created. PagerDuty incidents will be automatically triggered, updated, and resolved.
        :param str severity: Severity
        :param str private_tags: Comma separated list of private tags to be associated with this alert
        :param str shared_tags: Comma separated list of shared tags to be associated with this alert
        :param str additional_information: Any additional information to be included with this alert
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_id', 'name', 'condition', 'display_expression', 'minutes', 'resolve_minutes', 'notifications', 'severity', 'private_tags', 'shared_tags', 'additional_information']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alert_from_parts" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'alert_id' is set
        if ('alert_id' not in params) or (params['alert_id'] is None):
            raise ValueError("Missing the required parameter `alert_id` when calling `update_alert_from_parts`")

        resource_path = '/api/alert/{alertId}'.replace('{format}', 'json')
        path_params = {}
        if 'alert_id' in params:
            path_params['alertId'] = params['alert_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'condition' in params:
            form_params.append(('condition', params['condition']))
        if 'display_expression' in params:
            form_params.append(('displayExpression', params['display_expression']))
        if 'minutes' in params:
            form_params.append(('minutes', params['minutes']))
        if 'resolve_minutes' in params:
            form_params.append(('resolveMinutes', params['resolve_minutes']))
        if 'notifications' in params:
            form_params.append(('notifications', params['notifications']))
        if 'severity' in params:
            form_params.append(('severity', params['severity']))
        if 'private_tags' in params:
            form_params.append(('privateTags', params['private_tags']))
        if 'shared_tags' in params:
            form_params.append(('sharedTags', params['shared_tags']))
        if 'additional_information' in params:
            form_params.append(('additionalInformation', params['additional_information']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alert',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
