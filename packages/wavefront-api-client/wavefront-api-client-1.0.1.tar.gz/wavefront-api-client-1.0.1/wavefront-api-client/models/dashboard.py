# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Dashboard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Dashboard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'customer': 'str',
            'event_filter_type': 'str',
            'name': 'str',
            'parameters': 'dict(str, str)',
            'sections': 'list[DashboardSection]',
            'url': 'str'
        }

        self.attribute_map = {
            'customer': 'customer',
            'event_filter_type': 'eventFilterType',
            'name': 'name',
            'parameters': 'parameters',
            'sections': 'sections',
            'url': 'url'
        }

        self._customer = None
        self._event_filter_type = None
        self._name = None
        self._parameters = None
        self._sections = None
        self._url = None

    @property
    def customer(self):
        """
        Gets the customer of this Dashboard.
        ID of the customer to which this dashboard belongs

        :return: The customer of this Dashboard.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this Dashboard.
        ID of the customer to which this dashboard belongs

        :param customer: The customer of this Dashboard.
        :type: str
        """
        self._customer = customer

    @property
    def event_filter_type(self):
        """
        Gets the event_filter_type of this Dashboard.
        How should dashboard charts display events.  BYCHART is default if unspecified.

        :return: The event_filter_type of this Dashboard.
        :rtype: str
        """
        return self._event_filter_type

    @event_filter_type.setter
    def event_filter_type(self, event_filter_type):
        """
        Sets the event_filter_type of this Dashboard.
        How should dashboard charts display events.  BYCHART is default if unspecified.

        :param event_filter_type: The event_filter_type of this Dashboard.
        :type: str
        """
        allowed_values = ["BYCHART", "AUTOMATIC", "ALL", "NONE"]
        if event_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_filter_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._event_filter_type = event_filter_type

    @property
    def name(self):
        """
        Gets the name of this Dashboard.
        Name of the dashboard

        :return: The name of this Dashboard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Dashboard.
        Name of the dashboard

        :param name: The name of this Dashboard.
        :type: str
        """
        self._name = name

    @property
    def parameters(self):
        """
        Gets the parameters of this Dashboard.
        Dashboard variables, specified in JSON an Object (k-v string:string map)

        :return: The parameters of this Dashboard.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Dashboard.
        Dashboard variables, specified in JSON an Object (k-v string:string map)

        :param parameters: The parameters of this Dashboard.
        :type: dict(str, str)
        """
        self._parameters = parameters

    @property
    def sections(self):
        """
        Gets the sections of this Dashboard.
        Dashboard chart sections

        :return: The sections of this Dashboard.
        :rtype: list[DashboardSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """
        Sets the sections of this Dashboard.
        Dashboard chart sections

        :param sections: The sections of this Dashboard.
        :type: list[DashboardSection]
        """
        self._sections = sections

    @property
    def url(self):
        """
        Gets the url of this Dashboard.
        Unique identifier, also URL slug, of the dashboard

        :return: The url of this Dashboard.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Dashboard.
        Unique identifier, also URL slug, of the dashboard

        :param url: The url of this Dashboard.
        :type: str
        """
        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

