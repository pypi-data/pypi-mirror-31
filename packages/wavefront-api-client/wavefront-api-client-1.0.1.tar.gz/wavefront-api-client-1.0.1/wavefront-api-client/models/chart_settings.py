# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ChartSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ChartSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'expected_data_spacing': 'int',
            'line_type': 'str',
            'max': 'float',
            'min': 'float',
            'show_hosts': 'bool',
            'show_labels': 'bool',
            'show_raw_values': 'bool',
            'stack_type': 'str',
            'time_based_coloring': 'bool',
            'type': 'str',
            'window_size': 'int',
            'windowing': 'str',
            'xmax': 'float',
            'xmin': 'float',
            'ymax': 'float',
            'ymin': 'float'
        }

        self.attribute_map = {
            'expected_data_spacing': 'expectedDataSpacing',
            'line_type': 'lineType',
            'max': 'max',
            'min': 'min',
            'show_hosts': 'showHosts',
            'show_labels': 'showLabels',
            'show_raw_values': 'showRawValues',
            'stack_type': 'stackType',
            'time_based_coloring': 'timeBasedColoring',
            'type': 'type',
            'window_size': 'windowSize',
            'windowing': 'windowing',
            'xmax': 'xmax',
            'xmin': 'xmin',
            'ymax': 'ymax',
            'ymin': 'ymin'
        }

        self._expected_data_spacing = None
        self._line_type = None
        self._max = None
        self._min = None
        self._show_hosts = False
        self._show_labels = False
        self._show_raw_values = False
        self._stack_type = None
        self._time_based_coloring = False
        self._type = None
        self._window_size = None
        self._windowing = None
        self._xmax = None
        self._xmin = None
        self._ymax = None
        self._ymin = None

    @property
    def expected_data_spacing(self):
        """
        Gets the expected_data_spacing of this ChartSettings.
        Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid line in line plots.  60s is default.

        :return: The expected_data_spacing of this ChartSettings.
        :rtype: int
        """
        return self._expected_data_spacing

    @expected_data_spacing.setter
    def expected_data_spacing(self, expected_data_spacing):
        """
        Sets the expected_data_spacing of this ChartSettings.
        Threshold (in seconds) for time delta between consecutive points in a series above which a dotted line will replace a solid line in line plots.  60s is default.

        :param expected_data_spacing: The expected_data_spacing of this ChartSettings.
        :type: int
        """
        self._expected_data_spacing = expected_data_spacing

    @property
    def line_type(self):
        """
        Gets the line_type of this ChartSettings.
        Plot interpolation type.  linear is default

        :return: The line_type of this ChartSettings.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """
        Sets the line_type of this ChartSettings.
        Plot interpolation type.  linear is default

        :param line_type: The line_type of this ChartSettings.
        :type: str
        """
        allowed_values = ["linear", "step-before", "step-after", "basis", "cardinal", "monotone"]
        if line_type not in allowed_values:
            raise ValueError(
                "Invalid value for `line_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._line_type = line_type

    @property
    def max(self):
        """
        Gets the max of this ChartSettings.
        Max value of Y-axis.  Set to null for auto

        :return: The max of this ChartSettings.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this ChartSettings.
        Max value of Y-axis.  Set to null for auto

        :param max: The max of this ChartSettings.
        :type: float
        """
        self._max = max

    @property
    def min(self):
        """
        Gets the min of this ChartSettings.
        Min value of Y-axis.  Set to null for auto

        :return: The min of this ChartSettings.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this ChartSettings.
        Min value of Y-axis.  Set to null for auto

        :param min: The min of this ChartSettings.
        :type: float
        """
        self._min = min

    @property
    def show_hosts(self):
        """
        Gets the show_hosts of this ChartSettings.
        For table \"plots\", whether to display sources.  Default true

        :return: The show_hosts of this ChartSettings.
        :rtype: bool
        """
        return self._show_hosts

    @show_hosts.setter
    def show_hosts(self, show_hosts):
        """
        Sets the show_hosts of this ChartSettings.
        For table \"plots\", whether to display sources.  Default true

        :param show_hosts: The show_hosts of this ChartSettings.
        :type: bool
        """
        self._show_hosts = show_hosts

    @property
    def show_labels(self):
        """
        Gets the show_labels of this ChartSettings.
        For table \"plots\", whether to display labels.  Default true

        :return: The show_labels of this ChartSettings.
        :rtype: bool
        """
        return self._show_labels

    @show_labels.setter
    def show_labels(self, show_labels):
        """
        Sets the show_labels of this ChartSettings.
        For table \"plots\", whether to display labels.  Default true

        :param show_labels: The show_labels of this ChartSettings.
        :type: bool
        """
        self._show_labels = show_labels

    @property
    def show_raw_values(self):
        """
        Gets the show_raw_values of this ChartSettings.
        For table \"plots\", whether to display raw values.  Default false

        :return: The show_raw_values of this ChartSettings.
        :rtype: bool
        """
        return self._show_raw_values

    @show_raw_values.setter
    def show_raw_values(self, show_raw_values):
        """
        Sets the show_raw_values of this ChartSettings.
        For table \"plots\", whether to display raw values.  Default false

        :param show_raw_values: The show_raw_values of this ChartSettings.
        :type: bool
        """
        self._show_raw_values = show_raw_values

    @property
    def stack_type(self):
        """
        Gets the stack_type of this ChartSettings.
        Type of stacked chart (applicable only if chart type is stacked).  zero (default) means stacked from y=0.  expand means Normalized from 0 to 1.  wiggle means Minimize weighted changes. silhouette means to Center the Stream

        :return: The stack_type of this ChartSettings.
        :rtype: str
        """
        return self._stack_type

    @stack_type.setter
    def stack_type(self, stack_type):
        """
        Sets the stack_type of this ChartSettings.
        Type of stacked chart (applicable only if chart type is stacked).  zero (default) means stacked from y=0.  expand means Normalized from 0 to 1.  wiggle means Minimize weighted changes. silhouette means to Center the Stream

        :param stack_type: The stack_type of this ChartSettings.
        :type: str
        """
        allowed_values = ["zero", "expand", "wiggle", "silhouette"]
        if stack_type not in allowed_values:
            raise ValueError(
                "Invalid value for `stack_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._stack_type = stack_type

    @property
    def time_based_coloring(self):
        """
        Gets the time_based_coloring of this ChartSettings.
        Fox x-y scatterplots, whether to color more recent points as darker than older points. Default false

        :return: The time_based_coloring of this ChartSettings.
        :rtype: bool
        """
        return self._time_based_coloring

    @time_based_coloring.setter
    def time_based_coloring(self, time_based_coloring):
        """
        Sets the time_based_coloring of this ChartSettings.
        Fox x-y scatterplots, whether to color more recent points as darker than older points. Default false

        :param time_based_coloring: The time_based_coloring of this ChartSettings.
        :type: bool
        """
        self._time_based_coloring = time_based_coloring

    @property
    def type(self):
        """
        Gets the type of this ChartSettings.
        Chart type.  'line' is default

        :return: The type of this ChartSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ChartSettings.
        Chart type.  'line' is default

        :param type: The type of this ChartSettings.
        :type: str
        """
        allowed_values = ["line", "scatterplot", "stacked-area", "table", "scatterplot-xy"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def window_size(self):
        """
        Gets the window_size of this ChartSettings.
        Width, in minutes, of the time window to use for \"last\" windowing

        :return: The window_size of this ChartSettings.
        :rtype: int
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """
        Sets the window_size of this ChartSettings.
        Width, in minutes, of the time window to use for \"last\" windowing

        :param window_size: The window_size of this ChartSettings.
        :type: int
        """
        self._window_size = window_size

    @property
    def windowing(self):
        """
        Gets the windowing of this ChartSettings.
        For table \"plots\", whether to use the full time window for the query or the last x minutes

        :return: The windowing of this ChartSettings.
        :rtype: str
        """
        return self._windowing

    @windowing.setter
    def windowing(self, windowing):
        """
        Sets the windowing of this ChartSettings.
        For table \"plots\", whether to use the full time window for the query or the last x minutes

        :param windowing: The windowing of this ChartSettings.
        :type: str
        """
        allowed_values = ["full", "last"]
        if windowing not in allowed_values:
            raise ValueError(
                "Invalid value for `windowing`, must be one of {0}"
                .format(allowed_values)
            )
        self._windowing = windowing

    @property
    def xmax(self):
        """
        Gets the xmax of this ChartSettings.
        For x-y scatterplots, max value for x-axis.  Set null for auto

        :return: The xmax of this ChartSettings.
        :rtype: float
        """
        return self._xmax

    @xmax.setter
    def xmax(self, xmax):
        """
        Sets the xmax of this ChartSettings.
        For x-y scatterplots, max value for x-axis.  Set null for auto

        :param xmax: The xmax of this ChartSettings.
        :type: float
        """
        self._xmax = xmax

    @property
    def xmin(self):
        """
        Gets the xmin of this ChartSettings.
        For x-y scatterplots, min value for x-axis.  Set null for auto

        :return: The xmin of this ChartSettings.
        :rtype: float
        """
        return self._xmin

    @xmin.setter
    def xmin(self, xmin):
        """
        Sets the xmin of this ChartSettings.
        For x-y scatterplots, min value for x-axis.  Set null for auto

        :param xmin: The xmin of this ChartSettings.
        :type: float
        """
        self._xmin = xmin

    @property
    def ymax(self):
        """
        Gets the ymax of this ChartSettings.
        For x-y scatterplots, max value for y-axis.  Set null for auto

        :return: The ymax of this ChartSettings.
        :rtype: float
        """
        return self._ymax

    @ymax.setter
    def ymax(self, ymax):
        """
        Sets the ymax of this ChartSettings.
        For x-y scatterplots, max value for y-axis.  Set null for auto

        :param ymax: The ymax of this ChartSettings.
        :type: float
        """
        self._ymax = ymax

    @property
    def ymin(self):
        """
        Gets the ymin of this ChartSettings.
        For x-y scatterplots, min value for y-axis.  Set null for auto

        :return: The ymin of this ChartSettings.
        :rtype: float
        """
        return self._ymin

    @ymin.setter
    def ymin(self, ymin):
        """
        Sets the ymin of this ChartSettings.
        For x-y scatterplots, min value for y-axis.  Set null for auto

        :param ymin: The ymin of this ChartSettings.
        :type: float
        """
        self._ymin = ymin

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

