# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class HostLabelPair(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HostLabelPair - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'firing': 'int',
            'host': 'str',
            'label': 'str',
            'observed': 'int',
            'tags': 'dict(str, str)'
        }

        self.attribute_map = {
            'firing': 'firing',
            'host': 'host',
            'label': 'label',
            'observed': 'observed',
            'tags': 'tags'
        }

        self._firing = None
        self._host = None
        self._label = None
        self._observed = None
        self._tags = None

    @property
    def firing(self):
        """
        Gets the firing of this HostLabelPair.


        :return: The firing of this HostLabelPair.
        :rtype: int
        """
        return self._firing

    @firing.setter
    def firing(self, firing):
        """
        Sets the firing of this HostLabelPair.


        :param firing: The firing of this HostLabelPair.
        :type: int
        """
        self._firing = firing

    @property
    def host(self):
        """
        Gets the host of this HostLabelPair.


        :return: The host of this HostLabelPair.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this HostLabelPair.


        :param host: The host of this HostLabelPair.
        :type: str
        """
        self._host = host

    @property
    def label(self):
        """
        Gets the label of this HostLabelPair.


        :return: The label of this HostLabelPair.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this HostLabelPair.


        :param label: The label of this HostLabelPair.
        :type: str
        """
        self._label = label

    @property
    def observed(self):
        """
        Gets the observed of this HostLabelPair.


        :return: The observed of this HostLabelPair.
        :rtype: int
        """
        return self._observed

    @observed.setter
    def observed(self, observed):
        """
        Sets the observed of this HostLabelPair.


        :param observed: The observed of this HostLabelPair.
        :type: int
        """
        self._observed = observed

    @property
    def tags(self):
        """
        Gets the tags of this HostLabelPair.


        :return: The tags of this HostLabelPair.
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this HostLabelPair.


        :param tags: The tags of this HostLabelPair.
        :type: dict(str, str)
        """
        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

