# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ChartSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ChartSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'disabled': 'bool',
            'name': 'str',
            'query': 'str',
            'scatter_plot_source': 'str'
        }

        self.attribute_map = {
            'disabled': 'disabled',
            'name': 'name',
            'query': 'query',
            'scatter_plot_source': 'scatterPlotSource'
        }

        self._disabled = False
        self._name = None
        self._query = None
        self._scatter_plot_source = None

    @property
    def disabled(self):
        """
        Gets the disabled of this ChartSource.
        Whether the source is disabled, default is false

        :return: The disabled of this ChartSource.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this ChartSource.
        Whether the source is disabled, default is false

        :param disabled: The disabled of this ChartSource.
        :type: bool
        """
        self._disabled = disabled

    @property
    def name(self):
        """
        Gets the name of this ChartSource.
        Name of the source

        :return: The name of this ChartSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChartSource.
        Name of the source

        :param name: The name of this ChartSource.
        :type: str
        """
        self._name = name

    @property
    def query(self):
        """
        Gets the query of this ChartSource.
        Query expression to plot on the chart

        :return: The query of this ChartSource.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ChartSource.
        Query expression to plot on the chart

        :param query: The query of this ChartSource.
        :type: str
        """
        self._query = query

    @property
    def scatter_plot_source(self):
        """
        Gets the scatter_plot_source of this ChartSource.
        For scatter plots, does this query source the x-axis or the y-axis.

        :return: The scatter_plot_source of this ChartSource.
        :rtype: str
        """
        return self._scatter_plot_source

    @scatter_plot_source.setter
    def scatter_plot_source(self, scatter_plot_source):
        """
        Sets the scatter_plot_source of this ChartSource.
        For scatter plots, does this query source the x-axis or the y-axis.

        :param scatter_plot_source: The scatter_plot_source of this ChartSource.
        :type: str
        """
        allowed_values = ["X", "Y"]
        if scatter_plot_source not in allowed_values:
            raise ValueError(
                "Invalid value for `scatter_plot_source`, must be one of {0}"
                .format(allowed_values)
            )
        self._scatter_plot_source = scatter_plot_source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

