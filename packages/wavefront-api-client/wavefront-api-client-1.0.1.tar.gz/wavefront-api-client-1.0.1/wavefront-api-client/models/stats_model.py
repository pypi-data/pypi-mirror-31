# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StatsModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StatsModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'buffer_keys': 'int',
            'cached_compacted_points': 'int',
            'compacted_keys': 'int',
            'compacted_points': 'int',
            'cpu_ns': 'int',
            'hosts_used': 'int',
            'keys': 'int',
            'latency': 'int',
            'metrics_used': 'int',
            'missing_s3_keys': 'int',
            'points': 'int',
            'queries': 'int',
            'query_tasks': 'int',
            's3_keys': 'int',
            'skipped_compacted_keys': 'int',
            'summaries': 'int',
            'summarized_points': 'int',
            'summarized_summaries': 'int'
        }

        self.attribute_map = {
            'buffer_keys': 'bufferKeys',
            'cached_compacted_points': 'cachedCompactedPoints',
            'compacted_keys': 'compactedKeys',
            'compacted_points': 'compactedPoints',
            'cpu_ns': 'cpuNs',
            'hosts_used': 'hostsUsed',
            'keys': 'keys',
            'latency': 'latency',
            'metrics_used': 'metricsUsed',
            'missing_s3_keys': 'missingS3Keys',
            'points': 'points',
            'queries': 'queries',
            'query_tasks': 'queryTasks',
            's3_keys': 's3Keys',
            'skipped_compacted_keys': 'skippedCompactedKeys',
            'summaries': 'summaries',
            'summarized_points': 'summarizedPoints',
            'summarized_summaries': 'summarizedSummaries'
        }

        self._buffer_keys = None
        self._cached_compacted_points = None
        self._compacted_keys = None
        self._compacted_points = None
        self._cpu_ns = None
        self._hosts_used = None
        self._keys = None
        self._latency = None
        self._metrics_used = None
        self._missing_s3_keys = None
        self._points = None
        self._queries = None
        self._query_tasks = None
        self._s3_keys = None
        self._skipped_compacted_keys = None
        self._summaries = None
        self._summarized_points = None
        self._summarized_summaries = None

    @property
    def buffer_keys(self):
        """
        Gets the buffer_keys of this StatsModel.


        :return: The buffer_keys of this StatsModel.
        :rtype: int
        """
        return self._buffer_keys

    @buffer_keys.setter
    def buffer_keys(self, buffer_keys):
        """
        Sets the buffer_keys of this StatsModel.


        :param buffer_keys: The buffer_keys of this StatsModel.
        :type: int
        """
        self._buffer_keys = buffer_keys

    @property
    def cached_compacted_points(self):
        """
        Gets the cached_compacted_points of this StatsModel.


        :return: The cached_compacted_points of this StatsModel.
        :rtype: int
        """
        return self._cached_compacted_points

    @cached_compacted_points.setter
    def cached_compacted_points(self, cached_compacted_points):
        """
        Sets the cached_compacted_points of this StatsModel.


        :param cached_compacted_points: The cached_compacted_points of this StatsModel.
        :type: int
        """
        self._cached_compacted_points = cached_compacted_points

    @property
    def compacted_keys(self):
        """
        Gets the compacted_keys of this StatsModel.


        :return: The compacted_keys of this StatsModel.
        :rtype: int
        """
        return self._compacted_keys

    @compacted_keys.setter
    def compacted_keys(self, compacted_keys):
        """
        Sets the compacted_keys of this StatsModel.


        :param compacted_keys: The compacted_keys of this StatsModel.
        :type: int
        """
        self._compacted_keys = compacted_keys

    @property
    def compacted_points(self):
        """
        Gets the compacted_points of this StatsModel.


        :return: The compacted_points of this StatsModel.
        :rtype: int
        """
        return self._compacted_points

    @compacted_points.setter
    def compacted_points(self, compacted_points):
        """
        Sets the compacted_points of this StatsModel.


        :param compacted_points: The compacted_points of this StatsModel.
        :type: int
        """
        self._compacted_points = compacted_points

    @property
    def cpu_ns(self):
        """
        Gets the cpu_ns of this StatsModel.


        :return: The cpu_ns of this StatsModel.
        :rtype: int
        """
        return self._cpu_ns

    @cpu_ns.setter
    def cpu_ns(self, cpu_ns):
        """
        Sets the cpu_ns of this StatsModel.


        :param cpu_ns: The cpu_ns of this StatsModel.
        :type: int
        """
        self._cpu_ns = cpu_ns

    @property
    def hosts_used(self):
        """
        Gets the hosts_used of this StatsModel.


        :return: The hosts_used of this StatsModel.
        :rtype: int
        """
        return self._hosts_used

    @hosts_used.setter
    def hosts_used(self, hosts_used):
        """
        Sets the hosts_used of this StatsModel.


        :param hosts_used: The hosts_used of this StatsModel.
        :type: int
        """
        self._hosts_used = hosts_used

    @property
    def keys(self):
        """
        Gets the keys of this StatsModel.


        :return: The keys of this StatsModel.
        :rtype: int
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """
        Sets the keys of this StatsModel.


        :param keys: The keys of this StatsModel.
        :type: int
        """
        self._keys = keys

    @property
    def latency(self):
        """
        Gets the latency of this StatsModel.


        :return: The latency of this StatsModel.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """
        Sets the latency of this StatsModel.


        :param latency: The latency of this StatsModel.
        :type: int
        """
        self._latency = latency

    @property
    def metrics_used(self):
        """
        Gets the metrics_used of this StatsModel.


        :return: The metrics_used of this StatsModel.
        :rtype: int
        """
        return self._metrics_used

    @metrics_used.setter
    def metrics_used(self, metrics_used):
        """
        Sets the metrics_used of this StatsModel.


        :param metrics_used: The metrics_used of this StatsModel.
        :type: int
        """
        self._metrics_used = metrics_used

    @property
    def missing_s3_keys(self):
        """
        Gets the missing_s3_keys of this StatsModel.


        :return: The missing_s3_keys of this StatsModel.
        :rtype: int
        """
        return self._missing_s3_keys

    @missing_s3_keys.setter
    def missing_s3_keys(self, missing_s3_keys):
        """
        Sets the missing_s3_keys of this StatsModel.


        :param missing_s3_keys: The missing_s3_keys of this StatsModel.
        :type: int
        """
        self._missing_s3_keys = missing_s3_keys

    @property
    def points(self):
        """
        Gets the points of this StatsModel.


        :return: The points of this StatsModel.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """
        Sets the points of this StatsModel.


        :param points: The points of this StatsModel.
        :type: int
        """
        self._points = points

    @property
    def queries(self):
        """
        Gets the queries of this StatsModel.


        :return: The queries of this StatsModel.
        :rtype: int
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """
        Sets the queries of this StatsModel.


        :param queries: The queries of this StatsModel.
        :type: int
        """
        self._queries = queries

    @property
    def query_tasks(self):
        """
        Gets the query_tasks of this StatsModel.


        :return: The query_tasks of this StatsModel.
        :rtype: int
        """
        return self._query_tasks

    @query_tasks.setter
    def query_tasks(self, query_tasks):
        """
        Sets the query_tasks of this StatsModel.


        :param query_tasks: The query_tasks of this StatsModel.
        :type: int
        """
        self._query_tasks = query_tasks

    @property
    def s3_keys(self):
        """
        Gets the s3_keys of this StatsModel.


        :return: The s3_keys of this StatsModel.
        :rtype: int
        """
        return self._s3_keys

    @s3_keys.setter
    def s3_keys(self, s3_keys):
        """
        Sets the s3_keys of this StatsModel.


        :param s3_keys: The s3_keys of this StatsModel.
        :type: int
        """
        self._s3_keys = s3_keys

    @property
    def skipped_compacted_keys(self):
        """
        Gets the skipped_compacted_keys of this StatsModel.


        :return: The skipped_compacted_keys of this StatsModel.
        :rtype: int
        """
        return self._skipped_compacted_keys

    @skipped_compacted_keys.setter
    def skipped_compacted_keys(self, skipped_compacted_keys):
        """
        Sets the skipped_compacted_keys of this StatsModel.


        :param skipped_compacted_keys: The skipped_compacted_keys of this StatsModel.
        :type: int
        """
        self._skipped_compacted_keys = skipped_compacted_keys

    @property
    def summaries(self):
        """
        Gets the summaries of this StatsModel.


        :return: The summaries of this StatsModel.
        :rtype: int
        """
        return self._summaries

    @summaries.setter
    def summaries(self, summaries):
        """
        Sets the summaries of this StatsModel.


        :param summaries: The summaries of this StatsModel.
        :type: int
        """
        self._summaries = summaries

    @property
    def summarized_points(self):
        """
        Gets the summarized_points of this StatsModel.


        :return: The summarized_points of this StatsModel.
        :rtype: int
        """
        return self._summarized_points

    @summarized_points.setter
    def summarized_points(self, summarized_points):
        """
        Sets the summarized_points of this StatsModel.


        :param summarized_points: The summarized_points of this StatsModel.
        :type: int
        """
        self._summarized_points = summarized_points

    @property
    def summarized_summaries(self):
        """
        Gets the summarized_summaries of this StatsModel.


        :return: The summarized_summaries of this StatsModel.
        :rtype: int
        """
        return self._summarized_summaries

    @summarized_summaries.setter
    def summarized_summaries(self, summarized_summaries):
        """
        Sets the summarized_summaries of this StatsModel.


        :param summarized_summaries: The summarized_summaries of this StatsModel.
        :type: int
        """
        self._summarized_summaries = summarized_summaries

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

