# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TaggedSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TaggedSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'hostname': 'str',
            'id': 'UUID',
            'machine_id': 'UUID',
            'raw_address': 'str',
            'target': 'MonitoringTarget',
            'user_tags': 'list[str]'
        }

        self.attribute_map = {
            'description': 'description',
            'hostname': 'hostname',
            'id': 'id',
            'machine_id': 'machineId',
            'raw_address': 'rawAddress',
            'target': 'target',
            'user_tags': 'userTags'
        }

        self._description = None
        self._hostname = None
        self._id = None
        self._machine_id = None
        self._raw_address = None
        self._target = None
        self._user_tags = None

    @property
    def description(self):
        """
        Gets the description of this TaggedSource.
        User-supplied description

        :return: The description of this TaggedSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TaggedSource.
        User-supplied description

        :param description: The description of this TaggedSource.
        :type: str
        """
        self._description = description

    @property
    def hostname(self):
        """
        Gets the hostname of this TaggedSource.
        Hostname

        :return: The hostname of this TaggedSource.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this TaggedSource.
        Hostname

        :param hostname: The hostname of this TaggedSource.
        :type: str
        """
        self._hostname = hostname

    @property
    def id(self):
        """
        Gets the id of this TaggedSource.
        Unique Id of the Machine

        :return: The id of this TaggedSource.
        :rtype: UUID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TaggedSource.
        Unique Id of the Machine

        :param id: The id of this TaggedSource.
        :type: UUID
        """
        self._id = id

    @property
    def machine_id(self):
        """
        Gets the machine_id of this TaggedSource.


        :return: The machine_id of this TaggedSource.
        :rtype: UUID
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """
        Sets the machine_id of this TaggedSource.


        :param machine_id: The machine_id of this TaggedSource.
        :type: UUID
        """
        self._machine_id = machine_id

    @property
    def raw_address(self):
        """
        Gets the raw_address of this TaggedSource.


        :return: The raw_address of this TaggedSource.
        :rtype: str
        """
        return self._raw_address

    @raw_address.setter
    def raw_address(self, raw_address):
        """
        Sets the raw_address of this TaggedSource.


        :param raw_address: The raw_address of this TaggedSource.
        :type: str
        """
        self._raw_address = raw_address

    @property
    def target(self):
        """
        Gets the target of this TaggedSource.
        Associated target

        :return: The target of this TaggedSource.
        :rtype: MonitoringTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this TaggedSource.
        Associated target

        :param target: The target of this TaggedSource.
        :type: MonitoringTarget
        """
        self._target = target

    @property
    def user_tags(self):
        """
        Gets the user_tags of this TaggedSource.
        Tags

        :return: The user_tags of this TaggedSource.
        :rtype: list[str]
        """
        return self._user_tags

    @user_tags.setter
    def user_tags(self, user_tags):
        """
        Sets the user_tags of this TaggedSource.
        Tags

        :param user_tags: The user_tags of this TaggedSource.
        :type: list[str]
        """
        self._user_tags = user_tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

