---

- name: Create directory
  file: state=directory path={{ item }} mode=0770
  with_items:
  - "{{ pipeline_dir }}"

- name: create virtual environment
  shell: "conda create --yes -q -n {{ item.name }} \
         python={{ item.python_version }} {{ item.pkgs }} \
         creates={{ miniconda_dir }}/envs/{{ item.name }} "
  with_items:
  - "{{ pipeline_env }}"
  when: create_venv

- name: install pipeline from cache dir
  copy:
    src: "{{ pipeline_cache_path }}/"
    dest: "{{ pipeline_dir }}"
    force: yes

- name: install pipeline requirements
  shell: "conda install -n {{ item.name }} \
         -c bioconda \
         -c conda-forge \
         -c defaults \
         --file {{ pipeline_dir }}/requirements.txt"
  with_items:
  - "{{ pipeline_env }}"

- name: copy run script
  template:
    src: "run.project.j2"
    dest: "{{ pipeline_dir }}/run.project.sh"
    mode: 0750

- name: copy notify rule
  template:
    src: "notify.smk.j2"
    dest: "{{ pipeline_dir }}/notify.smk"

- name: include notify rule into the Snakefile
  lineinfile:
    path: "{{ pipeline_dir }}/Snakefile"
    line: 'include: "notify.smk"'

- name: replace paths into the project configuration file
  replace:
    dest: "{{ pipeline_dir }}/{{ project_config_file }}"
    regexp: "{{ item.reg }}"
    replace: "{{ item.rep }}"
  with_items:
  - { reg: 'path_to_references_data', rep: "{{ references_dir }}" }
  - { reg: 'path_to_datasets', rep: "{{ datasets_dir }}" }
  - { reg: 'path_to_tmp_dir', rep: "{{ tmp_dir }}" }

#- name: rename cluster config file
#  shell: "mv {{ pipeline_dir }}/_cluster.json {{ pipeline_dir }}/cluster.json"
#  when: cluster_setup
#
#- name: replace default_host_group into cluster.json
#  replace:
#    dest: "{{ pipeline_dir }}/cluster.json"
#    regexp: 'default_host_group'
#    replace: "{{ default_host_group }}"
#  when: cluster_setup
