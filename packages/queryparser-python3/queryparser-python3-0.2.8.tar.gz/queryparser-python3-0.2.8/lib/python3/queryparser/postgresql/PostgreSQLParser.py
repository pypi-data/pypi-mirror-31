# Generated from src/queryparser/postgresql/PostgreSQLParser.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0184")
        buf.write("\u0471\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\3\2\3\2")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u00c1\n\3\3\3\3\3\3\3\3\3\5\3\u00c7")
        buf.write("\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00d0\n\3\3\3\5\3")
        buf.write("\u00d3\n\3\3\3\3\3\5\3\u00d7\n\3\3\3\3\3\3\3\5\3\u00dc")
        buf.write("\n\3\5\3\u00de\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00e7")
        buf.write("\n\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00ef\n\4\3\5\3\5\3\6")
        buf.write("\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\5\n\u00fc\n\n\3\n\3\n")
        buf.write("\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3")
        buf.write("\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u0113\n\22")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u011b\n\23\3\24\3")
        buf.write("\24\5\24\u011f\n\24\3\24\5\24\u0122\n\24\3\24\5\24\u0125")
        buf.write("\n\24\3\24\5\24\u0128\n\24\3\24\5\24\u012b\n\24\3\24\5")
        buf.write("\24\u012e\n\24\3\24\5\24\u0131\n\24\3\24\5\24\u0134\n")
        buf.write("\24\3\24\3\24\3\24\3\24\5\24\u013a\n\24\3\24\5\24\u013d")
        buf.write("\n\24\3\24\5\24\u0140\n\24\3\24\5\24\u0143\n\24\5\24\u0145")
        buf.write("\n\24\3\24\5\24\u0148\n\24\3\24\5\24\u014b\n\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\5\24\u0153\n\24\3\24\5\24\u0156")
        buf.write("\n\24\3\25\5\25\u0159\n\25\3\25\3\25\3\26\3\26\3\26\5")
        buf.write("\26\u0160\n\26\3\27\3\27\3\27\3\27\5\27\u0166\n\27\3\27")
        buf.write("\5\27\u0169\n\27\3\27\3\27\5\27\u016d\n\27\3\30\3\30\3")
        buf.write("\30\5\30\u0172\n\30\3\30\3\30\5\30\u0176\n\30\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\6\31\u017f\n\31\r\31\16\31\u0180")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\6\32\u0189\n\32\r\32\16")
        buf.write("\32\u018a\3\33\3\33\3\33\3\33\7\33\u0191\n\33\f\33\16")
        buf.write("\33\u0194\13\33\3\33\3\33\3\34\3\34\3\35\3\35\3\35\5\35")
        buf.write("\u019d\n\35\3\35\3\35\3\35\5\35\u01a2\n\35\3\35\3\35\5")
        buf.write("\35\u01a6\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u01ae")
        buf.write("\n\36\3\36\5\36\u01b1\n\36\5\36\u01b3\n\36\3\37\3\37\3")
        buf.write("\37\7\37\u01b8\n\37\f\37\16\37\u01bb\13\37\3 \3 \3 \7")
        buf.write(" \u01c0\n \f \16 \u01c3\13 \3!\5!\u01c6\n!\3!\3!\3\"\3")
        buf.write("\"\3\"\5\"\u01cd\n\"\3\"\3\"\3\"\3\"\5\"\u01d3\n\"\5\"")
        buf.write("\u01d5\n\"\3\"\5\"\u01d8\n\"\5\"\u01da\n\"\3#\3#\3#\7")
        buf.write("#\u01df\n#\f#\16#\u01e2\13#\3$\3$\3$\3$\7$\u01e8\n$\f")
        buf.write("$\16$\u01eb\13$\3$\3$\3%\3%\3%\5%\u01f2\n%\3&\3&\3&\5")
        buf.write("&\u01f7\n&\3\'\3\'\3\'\7\'\u01fc\n\'\f\'\16\'\u01ff\13")
        buf.write("\'\3(\3(\3(\7(\u0204\n(\f(\16(\u0207\13(\3)\5)\u020a\n")
        buf.write(")\3)\3)\3)\5)\u020f\n)\3*\3*\3*\3*\3*\7*\u0216\n*\f*\16")
        buf.write("*\u0219\13*\5*\u021b\n*\3*\5*\u021e\n*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\5*\u0238\n*\3*\3*\5*\u023c\n*\5*\u023e\n*\3*\3*\5")
        buf.write("*\u0242\n*\3+\3+\3+\3+\3+\7+\u0249\n+\f+\16+\u024c\13")
        buf.write("+\3+\3+\5+\u0250\n+\3,\3,\3,\5,\u0255\n,\3,\5,\u0258\n")
        buf.write(",\3-\3-\3-\3.\3.\3.\3.\5.\u0261\n.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\5.\u0271\n.\3/\3/\3/\7/\u0276\n")
        buf.write("/\f/\16/\u0279\13/\3\60\3\60\3\61\3\61\3\61\7\61\u0280")
        buf.write("\n\61\f\61\16\61\u0283\13\61\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\5\62\u028c\n\62\5\62\u028e\n\62\3\63\3\63\3")
        buf.write("\63\3\63\3\64\3\64\3\64\3\64\5\64\u0298\n\64\3\65\3\65")
        buf.write("\3\65\3\65\5\65\u029e\n\65\3\65\3\65\3\65\3\65\3\65\5")
        buf.write("\65\u02a5\n\65\3\66\3\66\3\66\3\66\7\66\u02ab\n\66\f\66")
        buf.write("\16\66\u02ae\13\66\3\66\3\66\3\66\5\66\u02b3\n\66\3\67")
        buf.write("\3\67\38\38\39\39\39\39\39\79\u02be\n9\f9\169\u02c1\13")
        buf.write("9\3:\3:\5:\u02c5\n:\3:\3:\5:\u02c9\n:\5:\u02cb\n:\3:\3")
        buf.write(":\3:\3:\5:\u02d1\n:\3;\3;\3;\3;\3;\3<\3<\3=\3=\3=\7=\u02dd")
        buf.write("\n=\f=\16=\u02e0\13=\3>\5>\u02e3\n>\3>\3>\3>\5>\u02e8")
        buf.write("\n>\3>\3>\3>\3>\5>\u02ee\n>\3>\3>\3>\5>\u02f3\n>\3>\3")
        buf.write(">\5>\u02f7\n>\3>\3>\5>\u02fb\n>\3>\3>\3>\5>\u0300\n>\3")
        buf.write("?\3?\3?\3?\5?\u0306\n?\3@\3@\5@\u030a\n@\3@\3@\5@\u030e")
        buf.write("\n@\3A\3A\3A\3B\3B\3C\3C\3C\7C\u0318\nC\fC\16C\u031b\13")
        buf.write("C\3C\3C\3C\3C\3C\7C\u0322\nC\fC\16C\u0325\13C\5C\u0327")
        buf.write("\nC\5C\u0329\nC\3D\3D\3D\5D\u032e\nD\3D\7D\u0331\nD\f")
        buf.write("D\16D\u0334\13D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5")
        buf.write("E\u0342\nE\3F\3F\3F\3F\5F\u0348\nF\3F\7F\u034b\nF\fF\16")
        buf.write("F\u034e\13F\3G\3G\3G\3G\3H\3H\5H\u0356\nH\3H\5H\u0359")
        buf.write("\nH\3H\5H\u035c\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\5H\u036e\nH\3I\3I\3J\3J\5J\u0374\nJ\3J\3")
        buf.write("J\3J\5J\u0379\nJ\7J\u037b\nJ\fJ\16J\u037e\13J\3K\3K\3")
        buf.write("K\3K\3K\5K\u0385\nK\5K\u0387\nK\3L\3L\3L\5L\u038c\nL\3")
        buf.write("L\3L\3L\3L\7L\u0392\nL\fL\16L\u0395\13L\3M\3M\3M\3M\5")
        buf.write("M\u039b\nM\5M\u039d\nM\3M\3M\5M\u03a1\nM\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\5N\u03aa\nN\5N\u03ac\nN\3O\3O\3O\7O\u03b1\nO\f")
        buf.write("O\16O\u03b4\13O\3P\3P\3P\5P\u03b9\nP\3P\3P\3Q\3Q\3Q\3")
        buf.write("Q\7Q\u03c1\nQ\fQ\16Q\u03c4\13Q\3R\3R\3R\3S\3S\3T\3T\5")
        buf.write("T\u03cd\nT\3T\3T\5T\u03d1\nT\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u03e4\nT\3T\3T\3T\5T\u03e9")
        buf.write("\nT\3T\3T\3T\3T\5T\u03ef\nT\3T\3T\3T\3T\3T\5T\u03f6\n")
        buf.write("T\3T\3T\3T\3T\5T\u03fc\nT\3T\3T\3T\3T\5T\u0402\nT\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\5T\u040b\nT\3T\5T\u040e\nT\3T\6T\u0411")
        buf.write("\nT\rT\16T\u0412\5T\u0415\nT\3U\3U\3U\3U\3U\3U\3U\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3")
        buf.write("W\3W\5W\u0433\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0452")
        buf.write("\nZ\3[\3[\3[\3[\3[\3[\3[\5[\u045b\n[\3\\\3\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3]\3]\5]\u046f")
        buf.write("\n]\3]\2\2^\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\2\33\4\2\u0155\u0158\u016c\u016d\13\2MQ\u0082")
        buf.write("\u0085\u00c0\u00c2\u00c6\u00c6\u00de\u00de\u00f0\u00f1")
        buf.write("\u013b\u013b\u0143\u0143\u0145\u0145\4\2\u00a0\u00a0\u0134")
        buf.write("\u0134\4\2ii\u0123\u0123\3\2\u0165\u0166\4\2\u017a\u017a")
        buf.write("\u017d\u017d\"\2\16\16\27\27\33\33%%\'\'+,]]ggjkooss\u0080")
        buf.write("\u0080\u008e\u008f\u00a6\u00a7\u00ac\u00ad\u00b2\u00b4")
        buf.write("\u00b9\u00b9\u00bf\u00bf\u00cf\u00cf\u00d4\u00d4\u00e0")
        buf.write("\u00e0\u00e6\u00e9\u00ed\u00ee\u00fc\u00fc\u00fe\u00fe")
        buf.write("\u010b\u010b\u010d\u010e\u011f\u011f\u0122\u0122\u0127")
        buf.write("\u0127\u012c\u012c\u013e\u013e\f\2\23\23\31\32\34\35\63")
        buf.write("\63||\u00bc\u00bc\u00c3\u00c3\u0106\u0109\u0110\u0110")
        buf.write("\u0137\u0139\30\2\3\4\17\17\21\22#$..\61\62<<VVeemm\u00aa")
        buf.write("\u00aa\u00af\u00af\u00c4\u00c4\u00db\u00dd\u00e1\u00e2")
        buf.write("\u00eb\u00eb\u00f7\u00f7\u00f9\u00f9\u0105\u0105\u0115")
        buf.write("\u0115\u0124\u0124\u0183\u0184\"\2\7\b\24\24&&((**--@")
        buf.write("@BBTUXY^_qqzz\u0087\u0088\u008b\u008c\u0093\u0093\u0096")
        buf.write("\u0096\u009f\u009f\u00ac\u00ac\u00b9\u00ba\u00bd\u00bd")
        buf.write("\u00c8\u00c8\u00d2\u00d2\u00d8\u00d8\u00e5\u00e5\u00ef")
        buf.write("\u00ef\u00f4\u00f4\u00fb\u00fb\u0114\u0114\u012e\u012e")
        buf.write("\u0135\u0136\u013a\u013a\37\2\5\6\60\60??AACCELhhtuyy")
        buf.write("\u0082\u0082\u009e\u009e\u00b7\u00b8\u00be\u00be\u00c0")
        buf.write("\u00c0\u00c6\u00c7\u00cc\u00cc\u00d9\u00da\u00de\u00de")
        buf.write("\u00f0\u00f0\u00f2\u00f2\u010c\u010c\u010f\u010f\u0113")
        buf.write("\u0113\u0117\u011d\u0120\u0121\u0129\u0129\u0131\u0133")
        buf.write("\u013b\u013d\u0143\u0144\4\2\n\nZ[\4\2\u0101\u0101\u0103")
        buf.write("\u0103\4\2\u0094\u0094\u00cb\u00cb\3\2\u015a\u015b\5\2")
        buf.write("\u0150\u0151\u0160\u0160\u016a\u016a\4\2\30\30\u0165\u0167")
        buf.write("\5\2\n\nZZ\u0160\u0160\4\2\r\rWW\4\2\u008a\u008a\u0099")
        buf.write("\u0099\4\2ll\u009d\u009d\3\2\u016c\u016d\4\2>>\u008d\u008d")
        buf.write("\4\2\u00a6\u00a6\u00e9\u00e9\5\2\u0153\u0153\u0167\u0167")
        buf.write("\u016e\u0175\2\u04e1\2\u00ba\3\2\2\2\4\u00dd\3\2\2\2\6")
        buf.write("\u00ee\3\2\2\2\b\u00f0\3\2\2\2\n\u00f2\3\2\2\2\f\u00f4")
        buf.write("\3\2\2\2\16\u00f6\3\2\2\2\20\u00f8\3\2\2\2\22\u00fb\3")
        buf.write("\2\2\2\24\u00ff\3\2\2\2\26\u0101\3\2\2\2\30\u0103\3\2")
        buf.write("\2\2\32\u0105\3\2\2\2\34\u0107\3\2\2\2\36\u0109\3\2\2")
        buf.write("\2 \u010b\3\2\2\2\"\u0112\3\2\2\2$\u011a\3\2\2\2&\u011c")
        buf.write("\3\2\2\2(\u0158\3\2\2\2*\u015c\3\2\2\2,\u016c\3\2\2\2")
        buf.write(".\u016e\3\2\2\2\60\u017e\3\2\2\2\62\u0182\3\2\2\2\64\u018c")
        buf.write("\3\2\2\2\66\u0197\3\2\2\28\u01a1\3\2\2\2:\u01b2\3\2\2")
        buf.write("\2<\u01b4\3\2\2\2>\u01bc\3\2\2\2@\u01c5\3\2\2\2B\u01c9")
        buf.write("\3\2\2\2D\u01db\3\2\2\2F\u01e3\3\2\2\2H\u01ee\3\2\2\2")
        buf.write("J\u01f3\3\2\2\2L\u01f8\3\2\2\2N\u0200\3\2\2\2P\u0209\3")
        buf.write("\2\2\2R\u0241\3\2\2\2T\u0243\3\2\2\2V\u0254\3\2\2\2X\u0259")
        buf.write("\3\2\2\2Z\u0270\3\2\2\2\\\u0272\3\2\2\2^\u027a\3\2\2\2")
        buf.write("`\u027c\3\2\2\2b\u0284\3\2\2\2d\u028f\3\2\2\2f\u0297\3")
        buf.write("\2\2\2h\u02a4\3\2\2\2j\u02a6\3\2\2\2l\u02b4\3\2\2\2n\u02b6")
        buf.write("\3\2\2\2p\u02b8\3\2\2\2r\u02d0\3\2\2\2t\u02d2\3\2\2\2")
        buf.write("v\u02d7\3\2\2\2x\u02d9\3\2\2\2z\u02e2\3\2\2\2|\u0301\3")
        buf.write("\2\2\2~\u0309\3\2\2\2\u0080\u030f\3\2\2\2\u0082\u0312")
        buf.write("\3\2\2\2\u0084\u0328\3\2\2\2\u0086\u032a\3\2\2\2\u0088")
        buf.write("\u0341\3\2\2\2\u008a\u034c\3\2\2\2\u008c\u034f\3\2\2\2")
        buf.write("\u008e\u036d\3\2\2\2\u0090\u036f\3\2\2\2\u0092\u0371\3")
        buf.write("\2\2\2\u0094\u037f\3\2\2\2\u0096\u0388\3\2\2\2\u0098\u0396")
        buf.write("\3\2\2\2\u009a\u03ab\3\2\2\2\u009c\u03ad\3\2\2\2\u009e")
        buf.write("\u03b8\3\2\2\2\u00a0\u03bc\3\2\2\2\u00a2\u03c5\3\2\2\2")
        buf.write("\u00a4\u03c8\3\2\2\2\u00a6\u0414\3\2\2\2\u00a8\u0416\3")
        buf.write("\2\2\2\u00aa\u041d\3\2\2\2\u00ac\u0432\3\2\2\2\u00ae\u0434")
        buf.write("\3\2\2\2\u00b0\u043f\3\2\2\2\u00b2\u0451\3\2\2\2\u00b4")
        buf.write("\u045a\3\2\2\2\u00b6\u045c\3\2\2\2\u00b8\u046e\3\2\2\2")
        buf.write("\u00ba\u00bb\t\2\2\2\u00bb\3\3\2\2\2\u00bc\u00c0\7\30")
        buf.write("\2\2\u00bd\u00be\7\u0162\2\2\u00be\u00bf\7\u017a\2\2\u00bf")
        buf.write("\u00c1\7\u0161\2\2\u00c0\u00bd\3\2\2\2\u00c0\u00c1\3\2")
        buf.write("\2\2\u00c1\u00de\3\2\2\2\u00c2\u00c6\7%\2\2\u00c3\u00c4")
        buf.write("\7\u0162\2\2\u00c4\u00c5\7\u017a\2\2\u00c5\u00c7\7\u0161")
        buf.write("\2\2\u00c6\u00c3\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00de")
        buf.write("\3\2\2\2\u00c8\u00de\7H\2\2\u00c9\u00de\7D\2\2\u00ca\u00d2")
        buf.write("\7S\2\2\u00cb\u00cc\7\u0162\2\2\u00cc\u00cf\7\u017a\2")
        buf.write("\2\u00cd\u00ce\7\u015f\2\2\u00ce\u00d0\7\u017a\2\2\u00cf")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d1\3\2\2\2")
        buf.write("\u00d1\u00d3\7\u0161\2\2\u00d2\u00cb\3\2\2\2\u00d2\u00d3")
        buf.write("\3\2\2\2\u00d3\u00de\3\2\2\2\u00d4\u00d6\7\u00f8\2\2\u00d5")
        buf.write("\u00d7\7\u0090\2\2\u00d6\u00d5\3\2\2\2\u00d6\u00d7\3\2")
        buf.write("\2\2\u00d7\u00de\3\2\2\2\u00d8\u00de\7\u011c\2\2\u00d9")
        buf.write("\u00db\7\u012a\2\2\u00da\u00dc\7\u0090\2\2\u00db\u00da")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00de\3\2\2\2\u00dd")
        buf.write("\u00bc\3\2\2\2\u00dd\u00c2\3\2\2\2\u00dd\u00c8\3\2\2\2")
        buf.write("\u00dd\u00c9\3\2\2\2\u00dd\u00ca\3\2\2\2\u00dd\u00d4\3")
        buf.write("\2\2\2\u00dd\u00d8\3\2\2\2\u00dd\u00d9\3\2\2\2\u00de\5")
        buf.write("\3\2\2\2\u00df\u00e0\7\u0092\2\2\u00e0\u00e1\7\u00c9\2")
        buf.write("\2\u00e1\u00e2\7\u009c\2\2\u00e2\u00e6\7\u00c5\2\2\u00e3")
        buf.write("\u00e4\7\u0141\2\2\u00e4\u00e5\7\u00df\2\2\u00e5\u00e7")
        buf.write("\7f\2\2\u00e6\u00e3\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00ef\3\2\2\2\u00e8\u00e9\7\u0092\2\2\u00e9\u00ea\7\36")
        buf.write("\2\2\u00ea\u00ef\7\u00c5\2\2\u00eb\u00ec\7\u0141\2\2\u00ec")
        buf.write("\u00ed\7\u00df\2\2\u00ed\u00ef\7f\2\2\u00ee\u00df\3\2")
        buf.write("\2\2\u00ee\u00e8\3\2\2\2\u00ee\u00eb\3\2\2\2\u00ef\7\3")
        buf.write("\2\2\2\u00f0\u00f1\t\3\2\2\u00f1\t\3\2\2\2\u00f2\u00f3")
        buf.write("\t\4\2\2\u00f3\13\3\2\2\2\u00f4\u00f5\7\u017c\2\2\u00f5")
        buf.write("\r\3\2\2\2\u00f6\u00f7\t\5\2\2\u00f7\17\3\2\2\2\u00f8")
        buf.write("\u00f9\7\u017b\2\2\u00f9\21\3\2\2\2\u00fa\u00fc\t\6\2")
        buf.write("\2\u00fb\u00fa\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fd")
        buf.write("\3\2\2\2\u00fd\u00fe\t\7\2\2\u00fe\23\3\2\2\2\u00ff\u0100")
        buf.write("\7\u017f\2\2\u0100\25\3\2\2\2\u0101\u0102\t\b\2\2\u0102")
        buf.write("\27\3\2\2\2\u0103\u0104\t\t\2\2\u0104\31\3\2\2\2\u0105")
        buf.write("\u0106\t\n\2\2\u0106\33\3\2\2\2\u0107\u0108\t\13\2\2\u0108")
        buf.write("\35\3\2\2\2\u0109\u010a\t\f\2\2\u010a\37\3\2\2\2\u010b")
        buf.write("\u010c\7\u014f\2\2\u010c!\3\2\2\2\u010d\u0113\5\32\16")
        buf.write("\2\u010e\u0113\5\26\f\2\u010f\u0113\5\36\20\2\u0110\u0113")
        buf.write("\5\34\17\2\u0111\u0113\5 \21\2\u0112\u010d\3\2\2\2\u0112")
        buf.write("\u010e\3\2\2\2\u0112\u010f\3\2\2\2\u0112\u0110\3\2\2\2")
        buf.write("\u0112\u0111\3\2\2\2\u0113#\3\2\2\2\u0114\u011b\5\24\13")
        buf.write("\2\u0115\u011b\5\22\n\2\u0116\u011b\5\20\t\2\u0117\u011b")
        buf.write("\5\16\b\2\u0118\u011b\5\f\7\2\u0119\u011b\7\u00cd\2\2")
        buf.write("\u011a\u0114\3\2\2\2\u011a\u0115\3\2\2\2\u011a\u0116\3")
        buf.write("\2\2\2\u011a\u0117\3\2\2\2\u011a\u0118\3\2\2\2\u011a\u0119")
        buf.write("\3\2\2\2\u011b%\3\2\2\2\u011c\u011e\7\u00f3\2\2\u011d")
        buf.write("\u011f\t\r\2\2\u011e\u011d\3\2\2\2\u011e\u011f\3\2\2\2")
        buf.write("\u011f\u0121\3\2\2\2\u0120\u0122\7\u0081\2\2\u0121\u0120")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123")
        buf.write("\u0125\7\u010a\2\2\u0124\u0123\3\2\2\2\u0124\u0125\3\2")
        buf.write("\2\2\u0125\u0127\3\2\2\2\u0126\u0128\7\u0104\2\2\u0127")
        buf.write("\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012a\3\2\2\2")
        buf.write("\u0129\u012b\7\u00ff\2\2\u012a\u0129\3\2\2\2\u012a\u012b")
        buf.write("\3\2\2\2\u012b\u012d\3\2\2\2\u012c\u012e\7\u0100\2\2\u012d")
        buf.write("\u012c\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130\3\2\2\2")
        buf.write("\u012f\u0131\t\16\2\2\u0130\u012f\3\2\2\2\u0130\u0131")
        buf.write("\3\2\2\2\u0131\u0133\3\2\2\2\u0132\u0134\7\u0102\2\2\u0133")
        buf.write("\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3\2\2\2")
        buf.write("\u0135\u0144\5\u0084C\2\u0136\u0137\7r\2\2\u0137\u0139")
        buf.write("\5\u009cO\2\u0138\u013a\5t;\2\u0139\u0138\3\2\2\2\u0139")
        buf.write("\u013a\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u013d\5\u00a2")
        buf.write("R\2\u013c\u013b\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f")
        buf.write("\3\2\2\2\u013e\u0140\5T+\2\u013f\u013e\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u0143\5X-\2\u0142\u0141")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0145\3\2\2\2\u0144")
        buf.write("\u0136\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0147\3\2\2\2")
        buf.write("\u0146\u0148\5p9\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2")
        buf.write("\2\2\u0148\u014a\3\2\2\2\u0149\u014b\5h\65\2\u014a\u0149")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u0152\3\2\2\2\u014c")
        buf.write("\u014d\7p\2\2\u014d\u0153\7\u012b\2\2\u014e\u014f\7\u00ae")
        buf.write("\2\2\u014f\u0150\7\u0092\2\2\u0150\u0151\7\u00f6\2\2\u0151")
        buf.write("\u0153\7\u00c5\2\2\u0152\u014c\3\2\2\2\u0152\u014e\3\2")
        buf.write("\2\2\u0152\u0153\3\2\2\2\u0153\u0155\3\2\2\2\u0154\u0156")
        buf.write("\7\u015c\2\2\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2\u0156")
        buf.write("\'\3\2\2\2\u0157\u0159\7\20\2\2\u0158\u0157\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\7\u0180")
        buf.write("\2\2\u015b)\3\2\2\2\u015c\u015f\5H%\2\u015d\u015e\7\u0168")
        buf.write("\2\2\u015e\u0160\5H%\2\u015f\u015d\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160+\3\2\2\2\u0161\u0165\5~@\2\u0162\u0163")
        buf.write("\5\2\2\2\u0163\u0164\5~@\2\u0164\u0166\3\2\2\2\u0165\u0162")
        buf.write("\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u016d\3\2\2\2\u0167")
        buf.write("\u0169\7\u00ca\2\2\u0168\u0167\3\2\2\2\u0168\u0169\3\2")
        buf.write("\2\2\u0169\u016a\3\2\2\2\u016a\u016b\7d\2\2\u016b\u016d")
        buf.write("\5\u008cG\2\u016c\u0161\3\2\2\2\u016c\u0168\3\2\2\2\u016d")
        buf.write("-\3\2\2\2\u016e\u0171\7!\2\2\u016f\u0172\5\60\31\2\u0170")
        buf.write("\u0172\5\62\32\2\u0171\u016f\3\2\2\2\u0171\u0170\3\2\2")
        buf.write("\2\u0172\u0175\3\2\2\2\u0173\u0174\7\\\2\2\u0174\u0176")
        buf.write("\5*\26\2\u0175\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u0178\7`\2\2\u0178/\3\2\2\2\u0179")
        buf.write("\u017a\7\u013f\2\2\u017a\u017b\5D#\2\u017b\u017c\7\u0116")
        buf.write("\2\2\u017c\u017d\5*\26\2\u017d\u017f\3\2\2\2\u017e\u0179")
        buf.write("\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u017e\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\61\3\2\2\2\u0182\u0188\5*\26\2\u0183")
        buf.write("\u0184\7\u013f\2\2\u0184\u0185\5*\26\2\u0185\u0186\7\u0116")
        buf.write("\2\2\u0186\u0187\5*\26\2\u0187\u0189\3\2\2\2\u0188\u0183")
        buf.write("\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u0188\3\2\2\2\u018a")
        buf.write("\u018b\3\2\2\2\u018b\63\3\2\2\2\u018c\u018d\7\u0162\2")
        buf.write("\2\u018d\u0192\58\35\2\u018e\u018f\7\u015f\2\2\u018f\u0191")
        buf.write("\58\35\2\u0190\u018e\3\2\2\2\u0191\u0194\3\2\2\2\u0192")
        buf.write("\u0190\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0195\3\2\2\2")
        buf.write("\u0194\u0192\3\2\2\2\u0195\u0196\7\u0161\2\2\u0196\65")
        buf.write("\3\2\2\2\u0197\u0198\7\u0180\2\2\u0198\67\3\2\2\2\u0199")
        buf.write("\u019a\5\u0082B\2\u019a\u019b\7\u015e\2\2\u019b\u019d")
        buf.write("\3\2\2\2\u019c\u0199\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e\u019f\5\u0090I\2\u019f\u01a0\7\u015e")
        buf.write("\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019c\3\2\2\2\u01a1\u01a2")
        buf.write("\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5\5\66\34\2\u01a4")
        buf.write("\u01a6\5\u008aF\2\u01a5\u01a4\3\2\2\2\u01a5\u01a6\3\2")
        buf.write("\2\2\u01a69\3\2\2\2\u01a7\u01a8\5\u009eP\2\u01a8\u01a9")
        buf.write("\7\u015e\2\2\u01a9\u01aa\7\u0160\2\2\u01aa\u01b3\3\2\2")
        buf.write("\2\u01ab\u01ae\5*\26\2\u01ac\u01ae\5\u00a6T\2\u01ad\u01ab")
        buf.write("\3\2\2\2\u01ad\u01ac\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af")
        buf.write("\u01b1\5(\25\2\u01b0\u01af\3\2\2\2\u01b0\u01b1\3\2\2\2")
        buf.write("\u01b1\u01b3\3\2\2\2\u01b2\u01a7\3\2\2\2\u01b2\u01ad\3")
        buf.write("\2\2\2\u01b3;\3\2\2\2\u01b4\u01b9\5> \2\u01b5\u01b6\7")
        buf.write("\u0142\2\2\u01b6\u01b8\5> \2\u01b7\u01b5\3\2\2\2\u01b8")
        buf.write("\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2")
        buf.write("\u01ba=\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01c1\5@!\2")
        buf.write("\u01bd\u01be\7\u0153\2\2\u01be\u01c0\5@!\2\u01bf\u01bd")
        buf.write("\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1")
        buf.write("\u01c2\3\2\2\2\u01c2?\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4")
        buf.write("\u01c6\7\u00ca\2\2\u01c5\u01c4\3\2\2\2\u01c5\u01c6\3\2")
        buf.write("\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c8\5B\"\2\u01c8A\3\2")
        buf.write("\2\2\u01c9\u01d9\5,\27\2\u01ca\u01cc\7\u0095\2\2\u01cb")
        buf.write("\u01cd\7\u00ca\2\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2")
        buf.write("\2\2\u01cd\u01d2\3\2\2\2\u01ce\u01d3\5\16\b\2\u01cf\u01d3")
        buf.write("\7\u00cd\2\2\u01d0\u01d1\7Z\2\2\u01d1\u01d3\7r\2\2\u01d2")
        buf.write("\u01ce\3\2\2\2\u01d2\u01cf\3\2\2\2\u01d2\u01d0\3\2\2\2")
        buf.write("\u01d3\u01d5\3\2\2\2\u01d4\u01ca\3\2\2\2\u01d4\u01d5\3")
        buf.write("\2\2\2\u01d5\u01da\3\2\2\2\u01d6\u01d8\t\17\2\2\u01d7")
        buf.write("\u01d6\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da\3\2\2\2")
        buf.write("\u01d9\u01d4\3\2\2\2\u01d9\u01d7\3\2\2\2\u01daC\3\2\2")
        buf.write("\2\u01db\u01e0\5<\37\2\u01dc\u01dd\7\u0152\2\2\u01dd\u01df")
        buf.write("\5<\37\2\u01de\u01dc\3\2\2\2\u01df\u01e2\3\2\2\2\u01e0")
        buf.write("\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1E\3\2\2\2\u01e2")
        buf.write("\u01e0\3\2\2\2\u01e3\u01e4\7\u0162\2\2\u01e4\u01e9\5D")
        buf.write("#\2\u01e5\u01e6\7\u015f\2\2\u01e6\u01e8\5D#\2\u01e7\u01e5")
        buf.write("\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2\u01e9")
        buf.write("\u01ea\3\2\2\2\u01ea\u01ec\3\2\2\2\u01eb\u01e9\3\2\2\2")
        buf.write("\u01ec\u01ed\7\u0161\2\2\u01edG\3\2\2\2\u01ee\u01f1\5")
        buf.write("J&\2\u01ef\u01f0\7\u0169\2\2\u01f0\u01f2\5J&\2\u01f1\u01ef")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2I\3\2\2\2\u01f3\u01f6")
        buf.write("\5L\'\2\u01f4\u01f5\t\20\2\2\u01f5\u01f7\5L\'\2\u01f6")
        buf.write("\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7K\3\2\2\2\u01f8")
        buf.write("\u01fd\5N(\2\u01f9\u01fa\t\6\2\2\u01fa\u01fc\5N(\2\u01fb")
        buf.write("\u01f9\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fb\3\2\2\2")
        buf.write("\u01fd\u01fe\3\2\2\2\u01feM\3\2\2\2\u01ff\u01fd\3\2\2")
        buf.write("\2\u0200\u0205\5P)\2\u0201\u0202\t\21\2\2\u0202\u0204")
        buf.write("\5P)\2\u0203\u0201\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203")
        buf.write("\3\2\2\2\u0205\u0206\3\2\2\2\u0206O\3\2\2\2\u0207\u0205")
        buf.write("\3\2\2\2\u0208\u020a\t\22\2\2\u0209\u0208\3\2\2\2\u0209")
        buf.write("\u020a\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020e\5\u0088")
        buf.write("E\2\u020c\u020d\t\6\2\2\u020d\u020f\5d\63\2\u020e\u020c")
        buf.write("\3\2\2\2\u020e\u020f\3\2\2\2\u020fQ\3\2\2\2\u0210\u021d")
        buf.write("\5\"\22\2\u0211\u021a\7\u0162\2\2\u0212\u0217\5D#\2\u0213")
        buf.write("\u0214\7\u015f\2\2\u0214\u0216\5D#\2\u0215\u0213\3\2\2")
        buf.write("\2\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u021b\3\2\2\2\u0219\u0217\3\2\2\2\u021a")
        buf.write("\u0212\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c\3\2\2\2")
        buf.write("\u021c\u021e\7\u0161\2\2\u021d\u0211\3\2\2\2\u021d\u021e")
        buf.write("\3\2\2\2\u021e\u0242\3\2\2\2\u021f\u0220\7/\2\2\u0220")
        buf.write("\u0221\7\u0162\2\2\u0221\u0222\5D#\2\u0222\u0223\7\u015f")
        buf.write("\2\2\u0223\u0224\5\4\3\2\u0224\u0225\7\u0161\2\2\u0225")
        buf.write("\u0242\3\2\2\2\u0226\u0227\7/\2\2\u0227\u0228\7\u0162")
        buf.write("\2\2\u0228\u0229\5D#\2\u0229\u022a\7\u0130\2\2\u022a\u022b")
        buf.write("\5\n\6\2\u022b\u022c\7\u0161\2\2\u022c\u0242\3\2\2\2\u022d")
        buf.write("\u022e\7\"\2\2\u022e\u022f\7\u0162\2\2\u022f\u0230\5D")
        buf.write("#\2\u0230\u0231\7\20\2\2\u0231\u0232\5\4\3\2\u0232\u0233")
        buf.write("\7\u0161\2\2\u0233\u0242\3\2\2\2\u0234\u0235\5\30\r\2")
        buf.write("\u0235\u0237\7\u0162\2\2\u0236\u0238\t\23\2\2\u0237\u0236")
        buf.write("\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u023d\3\2\2\2\u0239")
        buf.write("\u023c\5*\26\2\u023a\u023c\5\u00a6T\2\u023b\u0239\3\2")
        buf.write("\2\2\u023b\u023a\3\2\2\2\u023c\u023e\3\2\2\2\u023d\u023b")
        buf.write("\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\3\2\2\2\u023f")
        buf.write("\u0240\7\u0161\2\2\u0240\u0242\3\2\2\2\u0241\u0210\3\2")
        buf.write("\2\2\u0241\u021f\3\2\2\2\u0241\u0226\3\2\2\2\u0241\u022d")
        buf.write("\3\2\2\2\u0241\u0234\3\2\2\2\u0242S\3\2\2\2\u0243\u0244")
        buf.write("\7}\2\2\u0244\u0245\7\37\2\2\u0245\u024a\5V,\2\u0246\u0247")
        buf.write("\7\u015f\2\2\u0247\u0249\5V,\2\u0248\u0246\3\2\2\2\u0249")
        buf.write("\u024c\3\2\2\2\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2")
        buf.write("\u024b\u024f\3\2\2\2\u024c\u024a\3\2\2\2\u024d\u024e\7")
        buf.write("\u0141\2\2\u024e\u0250\7\u00ea\2\2\u024f\u024d\3\2\2\2")
        buf.write("\u024f\u0250\3\2\2\2\u0250U\3\2\2\2\u0251\u0255\58\35")
        buf.write("\2\u0252\u0255\7\u017a\2\2\u0253\u0255\5*\26\2\u0254\u0251")
        buf.write("\3\2\2\2\u0254\u0252\3\2\2\2\u0254\u0253\3\2\2\2\u0255")
        buf.write("\u0257\3\2\2\2\u0256\u0258\t\24\2\2\u0257\u0256\3\2\2")
        buf.write("\2\u0257\u0258\3\2\2\2\u0258W\3\2\2\2\u0259\u025a\7~\2")
        buf.write("\2\u025a\u025b\5D#\2\u025bY\3\2\2\2\u025c\u025d\7\u012f")
        buf.write("\2\2\u025d\u025e\5b\62\2\u025e\u0260\7\u0162\2\2\u025f")
        buf.write("\u0261\5`\61\2\u0260\u025f\3\2\2\2\u0260\u0261\3\2\2\2")
        buf.write("\u0261\u0262\3\2\2\2\u0262\u0263\7\u0161\2\2\u0263\u0271")
        buf.write("\3\2\2\2\u0264\u0265\7\u0089\2\2\u0265\u0266\5b\62\2\u0266")
        buf.write("\u0267\7\u0162\2\2\u0267\u0268\5`\61\2\u0268\u0269\7\u0161")
        buf.write("\2\2\u0269\u0271\3\2\2\2\u026a\u026b\7n\2\2\u026b\u026c")
        buf.write("\5b\62\2\u026c\u026d\7\u0162\2\2\u026d\u026e\5`\61\2\u026e")
        buf.write("\u026f\7\u0161\2\2\u026f\u0271\3\2\2\2\u0270\u025c\3\2")
        buf.write("\2\2\u0270\u0264\3\2\2\2\u0270\u026a\3\2\2\2\u0271[\3")
        buf.write("\2\2\2\u0272\u0277\5Z.\2\u0273\u0274\7\u015f\2\2\u0274")
        buf.write("\u0276\5Z.\2\u0275\u0273\3\2\2\2\u0276\u0279\3\2\2\2\u0277")
        buf.write("\u0275\3\2\2\2\u0277\u0278\3\2\2\2\u0278]\3\2\2\2\u0279")
        buf.write("\u0277\3\2\2\2\u027a\u027b\7\u0180\2\2\u027b_\3\2\2\2")
        buf.write("\u027c\u0281\5^\60\2\u027d\u027e\7\u015f\2\2\u027e\u0280")
        buf.write("\5^\60\2\u027f\u027d\3\2\2\2\u0280\u0283\3\2\2\2\u0281")
        buf.write("\u027f\3\2\2\2\u0281\u0282\3\2\2\2\u0282a\3\2\2\2\u0283")
        buf.write("\u0281\3\2\2\2\u0284\u028d\t\25\2\2\u0285\u028b\7p\2\2")
        buf.write("\u0286\u028c\7\u0097\2\2\u0287\u0288\7\u00d5\2\2\u0288")
        buf.write("\u028c\7\37\2\2\u0289\u028a\7}\2\2\u028a\u028c\7\37\2")
        buf.write("\2\u028b\u0286\3\2\2\2\u028b\u0287\3\2\2\2\u028b\u0289")
        buf.write("\3\2\2\2\u028c\u028e\3\2\2\2\u028d\u0285\3\2\2\2\u028d")
        buf.write("\u028e\3\2\2\2\u028ec\3\2\2\2\u028f\u0290\7\u0091\2\2")
        buf.write("\u0290\u0291\5D#\2\u0291\u0292\5\b\5\2\u0292e\3\2\2\2")
        buf.write("\u0293\u0294\7\u00d3\2\2\u0294\u0298\5D#\2\u0295\u0296")
        buf.write("\7\u0130\2\2\u0296\u0298\5\64\33\2\u0297\u0293\3\2\2\2")
        buf.write("\u0297\u0295\3\2\2\2\u0298g\3\2\2\2\u0299\u029d\7\u00a9")
        buf.write("\2\2\u029a\u029b\5l\67\2\u029b\u029c\7\u015f\2\2\u029c")
        buf.write("\u029e\3\2\2\2\u029d\u029a\3\2\2\2\u029d\u029e\3\2\2\2")
        buf.write("\u029e\u029f\3\2\2\2\u029f\u02a5\5n8\2\u02a0\u02a1\5n")
        buf.write("8\2\u02a1\u02a2\7\u00d0\2\2\u02a2\u02a3\5l\67\2\u02a3")
        buf.write("\u02a5\3\2\2\2\u02a4\u0299\3\2\2\2\u02a4\u02a0\3\2\2\2")
        buf.write("\u02a5i\3\2\2\2\u02a6\u02a7\7\u00bb\2\2\u02a7\u02ac\5")
        buf.write("8\35\2\u02a8\u02a9\7\u015f\2\2\u02a9\u02ab\58\35\2\u02aa")
        buf.write("\u02a8\3\2\2\2\u02ab\u02ae\3\2\2\2\u02ac\u02aa\3\2\2\2")
        buf.write("\u02ac\u02ad\3\2\2\2\u02ad\u02af\3\2\2\2\u02ae\u02ac\3")
        buf.write("\2\2\2\u02af\u02b0\7\t\2\2\u02b0\u02b2\5D#\2\u02b1\u02b3")
        buf.write("\5\6\4\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3")
        buf.write("k\3\2\2\2\u02b4\u02b5\7\u017a\2\2\u02b5m\3\2\2\2\u02b6")
        buf.write("\u02b7\7\u017a\2\2\u02b7o\3\2\2\2\u02b8\u02b9\7\u00d5")
        buf.write("\2\2\u02b9\u02ba\7\37\2\2\u02ba\u02bf\5r:\2\u02bb\u02bc")
        buf.write("\7\u015f\2\2\u02bc\u02be\5r:\2\u02bd\u02bb\3\2\2\2\u02be")
        buf.write("\u02c1\3\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0q\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02ca\5V,\2")
        buf.write("\u02c3\u02c5\t\24\2\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5")
        buf.write("\3\2\2\2\u02c5\u02cb\3\2\2\2\u02c6\u02c7\7\u00ce\2\2\u02c7")
        buf.write("\u02c9\t\26\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2")
        buf.write("\2\u02c9\u02cb\3\2\2\2\u02ca\u02c4\3\2\2\2\u02ca\u02c8")
        buf.write("\3\2\2\2\u02cb\u02d1\3\2\2\2\u02cc\u02cd\5V,\2\u02cd\u02ce")
        buf.write("\7\u0130\2\2\u02ce\u02cf\t\27\2\2\u02cf\u02d1\3\2\2\2")
        buf.write("\u02d0\u02c2\3\2\2\2\u02d0\u02cc\3\2\2\2\u02d1s\3\2\2")
        buf.write("\2\u02d2\u02d3\7\u00d7\2\2\u02d3\u02d4\7\u0162\2\2\u02d4")
        buf.write("\u02d5\5x=\2\u02d5\u02d6\7\u0161\2\2\u02d6u\3\2\2\2\u02d7")
        buf.write("\u02d8\7\u0180\2\2\u02d8w\3\2\2\2\u02d9\u02de\5v<\2\u02da")
        buf.write("\u02db\7\u015f\2\2\u02db\u02dd\5v<\2\u02dc\u02da\3\2\2")
        buf.write("\2\u02dd\u02e0\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df")
        buf.write("\3\2\2\2\u02dfy\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1\u02e3")
        buf.write("\7\u00ca\2\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3")
        buf.write("\u02ff\3\2\2\2\u02e4\u02e7\7\u0092\2\2\u02e5\u02e8\5\u008c")
        buf.write("G\2\u02e6\u02e8\5F$\2\u02e7\u02e5\3\2\2\2\u02e7\u02e6")
        buf.write("\3\2\2\2\u02e8\u0300\3\2\2\2\u02e9\u02ea\7\u00a8\2\2\u02ea")
        buf.write("\u02ed\5\u0088E\2\u02eb\u02ec\7a\2\2\u02ec\u02ee\5\u0088")
        buf.write("E\2\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u0300")
        buf.write("\3\2\2\2\u02ef\u02f2\7\u00e4\2\2\u02f0\u02f3\5*\26\2\u02f1")
        buf.write("\u02f3\5\u00a6T\2\u02f2\u02f0\3\2\2\2\u02f2\u02f1\3\2")
        buf.write("\2\2\u02f3\u0300\3\2\2\2\u02f4\u02f6\7\25\2\2\u02f5\u02f7")
        buf.write("\7\u0112\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7")
        buf.write("\u02fa\3\2\2\2\u02f8\u02fb\5*\26\2\u02f9\u02fb\5\u00a6")
        buf.write("T\2\u02fa\u02f8\3\2\2\2\u02fa\u02f9\3\2\2\2\u02fb\u02fc")
        buf.write("\3\2\2\2\u02fc\u02fd\7\u0153\2\2\u02fd\u02fe\5~@\2\u02fe")
        buf.write("\u0300\3\2\2\2\u02ff\u02e4\3\2\2\2\u02ff\u02e9\3\2\2\2")
        buf.write("\u02ff\u02ef\3\2\2\2\u02ff\u02f4\3\2\2\2\u0300{\3\2\2")
        buf.write("\2\u0301\u0302\7\u00fd\2\2\u0302\u0305\7\u00a8\2\2\u0303")
        buf.write("\u0306\5*\26\2\u0304\u0306\5\u00a6T\2\u0305\u0303\3\2")
        buf.write("\2\2\u0305\u0304\3\2\2\2\u0306}\3\2\2\2\u0307\u030a\5")
        buf.write("*\26\2\u0308\u030a\5\u00a6T\2\u0309\u0307\3\2\2\2\u0309")
        buf.write("\u0308\3\2\2\2\u030a\u030d\3\2\2\2\u030b\u030e\5z>\2\u030c")
        buf.write("\u030e\5|?\2\u030d\u030b\3\2\2\2\u030d\u030c\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\177\3\2\2\2\u030f\u0310\5\u0086D")
        buf.write("\2\u0310\u0311\7\u015c\2\2\u0311\u0081\3\2\2\2\u0312\u0313")
        buf.write("\7\u0180\2\2\u0313\u0083\3\2\2\2\u0314\u0319\5:\36\2\u0315")
        buf.write("\u0316\7\u015f\2\2\u0316\u0318\5:\36\2\u0317\u0315\3\2")
        buf.write("\2\2\u0318\u031b\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a")
        buf.write("\3\2\2\2\u031a\u0329\3\2\2\2\u031b\u0319\3\2\2\2\u031c")
        buf.write("\u0326\7\u0160\2\2\u031d\u031e\7\u015f\2\2\u031e\u0323")
        buf.write("\5:\36\2\u031f\u0320\7\u015f\2\2\u0320\u0322\5:\36\2\u0321")
        buf.write("\u031f\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2\2")
        buf.write("\u0323\u0324\3\2\2\2\u0324\u0327\3\2\2\2\u0325\u0323\3")
        buf.write("\2\2\2\u0326\u031d\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0329")
        buf.write("\3\2\2\2\u0328\u0314\3\2\2\2\u0328\u031c\3\2\2\2\u0329")
        buf.write("\u0085\3\2\2\2\u032a\u0332\5&\24\2\u032b\u032d\7\u0128")
        buf.write("\2\2\u032c\u032e\7\n\2\2\u032d\u032c\3\2\2\2\u032d\u032e")
        buf.write("\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331\5&\24\2\u0330")
        buf.write("\u032b\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330\3\2\2\2")
        buf.write("\u0332\u0333\3\2\2\2\u0333\u0087\3\2\2\2\u0334\u0332\3")
        buf.write("\2\2\2\u0335\u0342\5$\23\2\u0336\u0342\5F$\2\u0337\u0342")
        buf.write("\58\35\2\u0338\u0342\5R*\2\u0339\u033a\7\u00ec\2\2\u033a")
        buf.write("\u0342\5F$\2\u033b\u0342\5\u008cG\2\u033c\u033d\7d\2\2")
        buf.write("\u033d\u0342\5\u008cG\2\u033e\u0342\5d\63\2\u033f\u0342")
        buf.write("\5j\66\2\u0340\u0342\5.\30\2\u0341\u0335\3\2\2\2\u0341")
        buf.write("\u0336\3\2\2\2\u0341\u0337\3\2\2\2\u0341\u0338\3\2\2\2")
        buf.write("\u0341\u0339\3\2\2\2\u0341\u033b\3\2\2\2\u0341\u033c\3")
        buf.write("\2\2\2\u0341\u033e\3\2\2\2\u0341\u033f\3\2\2\2\u0341\u0340")
        buf.write("\3\2\2\2\u0342\u0089\3\2\2\2\u0343\u0344\7\u0164\2\2\u0344")
        buf.write("\u0347\7\u017a\2\2\u0345\u0346\7\u015d\2\2\u0346\u0348")
        buf.write("\7\u017a\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349\u034b\7\u0163\2\2\u034a\u0343\3\2")
        buf.write("\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2\u034c\u034d")
        buf.write("\3\2\2\2\u034d\u008b\3\2\2\2\u034e\u034c\3\2\2\2\u034f")
        buf.write("\u0350\7\u0162\2\2\u0350\u0351\5\u0086D\2\u0351\u0352")
        buf.write("\7\u0161\2\2\u0352\u008d\3\2\2\2\u0353\u0355\5\u009eP")
        buf.write("\2\u0354\u0356\5t;\2\u0355\u0354\3\2\2\2\u0355\u0356\3")
        buf.write("\2\2\2\u0356\u0358\3\2\2\2\u0357\u0359\5(\25\2\u0358\u0357")
        buf.write("\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2\2\u035a")
        buf.write("\u035c\5\\/\2\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\u036e\3\2\2\2\u035d\u035e\5\u008cG\2\u035e\u035f")
        buf.write("\5(\25\2\u035f\u036e\3\2\2\2\u0360\u0361\7\u0162\2\2\u0361")
        buf.write("\u0362\5\u009cO\2\u0362\u0363\7\u0161\2\2\u0363\u036e")
        buf.write("\3\2\2\2\u0364\u0365\7\u00d1\2\2\u0365\u0366\5\u009aN")
        buf.write("\2\u0366\u0367\7\u00a6\2\2\u0367\u0368\7\u00d6\2\2\u0368")
        buf.write("\u0369\7\u0097\2\2\u0369\u036a\5\u009aN\2\u036a\u036b")
        buf.write("\7\u00d3\2\2\u036b\u036c\5D#\2\u036c\u036e\3\2\2\2\u036d")
        buf.write("\u0353\3\2\2\2\u036d\u035d\3\2\2\2\u036d\u0360\3\2\2\2")
        buf.write("\u036d\u0364\3\2\2\2\u036e\u008f\3\2\2\2\u036f\u0370\7")
        buf.write("\u0180\2\2\u0370\u0091\3\2\2\2\u0371\u037c\5\u0094K\2")
        buf.write("\u0372\u0374\t\30\2\2\u0373\u0372\3\2\2\2\u0373\u0374")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\7\u0097\2\2\u0376")
        buf.write("\u0378\5\u008eH\2\u0377\u0379\5f\64\2\u0378\u0377\3\2")
        buf.write("\2\2\u0378\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u0373")
        buf.write("\3\2\2\2\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c")
        buf.write("\u037d\3\2\2\2\u037d\u0093\3\2\2\2\u037e\u037c\3\2\2\2")
        buf.write("\u037f\u0386\5\u0096L\2\u0380\u0381\7\u010a\2\2\u0381")
        buf.write("\u0384\5\u008eH\2\u0382\u0383\7\u00d3\2\2\u0383\u0385")
        buf.write("\5D#\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0387")
        buf.write("\3\2\2\2\u0386\u0380\3\2\2\2\u0386\u0387\3\2\2\2\u0387")
        buf.write("\u0095\3\2\2\2\u0388\u0393\5\u0098M\2\u0389\u038b\t\31")
        buf.write("\2\2\u038a\u038c\7\u00d6\2\2\u038b\u038a\3\2\2\2\u038b")
        buf.write("\u038c\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\7\u0097")
        buf.write("\2\2\u038e\u038f\5\u0098M\2\u038f\u0390\5f\64\2\u0390")
        buf.write("\u0392\3\2\2\2\u0391\u0389\3\2\2\2\u0392\u0395\3\2\2\2")
        buf.write("\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0097\3")
        buf.write("\2\2\2\u0395\u0393\3\2\2\2\u0396\u03a0\5\u008eH\2\u0397")
        buf.write("\u039c\7\u00c9\2\2\u0398\u039a\t\31\2\2\u0399\u039b\7")
        buf.write("\u00d6\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b")
        buf.write("\u039d\3\2\2\2\u039c\u0398\3\2\2\2\u039c\u039d\3\2\2\2")
        buf.write("\u039d\u039e\3\2\2\2\u039e\u039f\7\u0097\2\2\u039f\u03a1")
        buf.write("\5\u008eH\2\u03a0\u0397\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u0099\3\2\2\2\u03a2\u03ac\5\u0092J\2\u03a3\u03a4\7\u0162")
        buf.write("\2\2\u03a4\u03a5\5\u00a0Q\2\u03a5\u03a6\7\u0161\2\2\u03a6")
        buf.write("\u03a7\3\2\2\2\u03a7\u03a9\5(\25\2\u03a8\u03aa\5\64\33")
        buf.write("\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac")
        buf.write("\3\2\2\2\u03ab\u03a2\3\2\2\2\u03ab\u03a3\3\2\2\2\u03ac")
        buf.write("\u009b\3\2\2\2\u03ad\u03b2\5\u009aN\2\u03ae\u03af\7\u015f")
        buf.write("\2\2\u03af\u03b1\5\u009aN\2\u03b0\u03ae\3\2\2\2\u03b1")
        buf.write("\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2")
        buf.write("\u03b3\u009d\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b5\u03b6\5")
        buf.write("\u0082B\2\u03b6\u03b7\7\u015e\2\2\u03b7\u03b9\3\2\2\2")
        buf.write("\u03b8\u03b5\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3")
        buf.write("\2\2\2\u03ba\u03bb\5\u0090I\2\u03bb\u009f\3\2\2\2\u03bc")
        buf.write("\u03bd\7\u0136\2\2\u03bd\u03c2\5F$\2\u03be\u03bf\7\u015f")
        buf.write("\2\2\u03bf\u03c1\5F$\2\u03c0\u03be\3\2\2\2\u03c1\u03c4")
        buf.write("\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write("\u00a1\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03c6\7\u0140")
        buf.write("\2\2\u03c6\u03c7\5D#\2\u03c7\u00a3\3\2\2\2\u03c8\u03c9")
        buf.write("\t\32\2\2\u03c9\u00a5\3\2\2\2\u03ca\u03cd\5\u00b8]\2\u03cb")
        buf.write("\u03cd\5\u00a8U\2\u03cc\u03ca\3\2\2\2\u03cc\u03cb\3\2")
        buf.write("\2\2\u03cd\u0415\3\2\2\2\u03ce\u03d1\5\u00a8U\2\u03cf")
        buf.write("\u03d1\5\u0088E\2\u03d0\u03ce\3\2\2\2\u03d0\u03cf\3\2")
        buf.write("\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\5\u00a4S\2\u03d3")
        buf.write("\u03d4\5\u00b8]\2\u03d4\u0415\3\2\2\2\u03d5\u03d6\5\u00b8")
        buf.write("]\2\u03d6\u03d7\7\u0155\2\2\u03d7\u03d8\5\u00b8]\2\u03d8")
        buf.write("\u0415\3\2\2\2\u03d9\u03da\5\u00b8]\2\u03da\u03db\5\u00a4")
        buf.write("S\2\u03db\u03dc\5\u00b8]\2\u03dc\u0415\3\2\2\2\u03dd\u03e4")
        buf.write("\5\u00acW\2\u03de\u03df\5\u0088E\2\u03df\u03e0\7\u0176")
        buf.write("\2\2\u03e0\u03e1\5\u00acW\2\u03e1\u03e4\3\2\2\2\u03e2")
        buf.write("\u03e4\5\u0088E\2\u03e3\u03dd\3\2\2\2\u03e3\u03de\3\2")
        buf.write("\2\2\u03e3\u03e2\3\2\2\2\u03e4\u0415\3\2\2\2\u03e5\u03e9")
        buf.write("\5\u00a8U\2\u03e6\u03e9\5\u00aaV\2\u03e7\u03e9\5\u0088")
        buf.write("E\2\u03e8\u03e5\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e7")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ee\7\u0177\2\2\u03eb")
        buf.write("\u03ef\5\u00a8U\2\u03ec\u03ef\5\u00aaV\2\u03ed\u03ef\5")
        buf.write("\u0088E\2\u03ee\u03eb\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee")
        buf.write("\u03ed\3\2\2\2\u03ef\u0415\3\2\2\2\u03f0\u03f5\7\u0178")
        buf.write("\2\2\u03f1\u03f6\5\u00aaV\2\u03f2\u03f6\5\u00b0Y\2\u03f3")
        buf.write("\u03f6\5\u00b2Z\2\u03f4\u03f6\5\u0088E\2\u03f5\u03f1\3")
        buf.write("\2\2\2\u03f5\u03f2\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f6\u0415\3\2\2\2\u03f7\u03fb\7\u0179\2\2\u03f8")
        buf.write("\u03fc\5\u00aaV\2\u03f9\u03fc\5\u00aeX\2\u03fa\u03fc\5")
        buf.write("\u0088E\2\u03fb\u03f8\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb")
        buf.write("\u03fa\3\2\2\2\u03fc\u0415\3\2\2\2\u03fd\u0401\7\u0166")
        buf.write("\2\2\u03fe\u0402\5\u00acW\2\u03ff\u0402\5\u00b4[\2\u0400")
        buf.write("\u0402\5\u0088E\2\u0401\u03fe\3\2\2\2\u0401\u03ff\3\2")
        buf.write("\2\2\u0401\u0400\3\2\2\2\u0402\u0415\3\2\2\2\u0403\u040b")
        buf.write("\5\u00a8U\2\u0404\u040b\5\u00aaV\2\u0405\u040b\5\u00ac")
        buf.write("W\2\u0406\u040b\5\u00aeX\2\u0407\u040b\5\u00b2Z\2\u0408")
        buf.write("\u040b\5\u00b4[\2\u0409\u040b\5\u0088E\2\u040a\u0403\3")
        buf.write("\2\2\2\u040a\u0404\3\2\2\2\u040a\u0405\3\2\2\2\u040a\u0406")
        buf.write("\3\2\2\2\u040a\u0407\3\2\2\2\u040a\u0408\3\2\2\2\u040a")
        buf.write("\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u0410\3\2\2\2")
        buf.write("\u040c\u040e\t\6\2\2\u040d\u040c\3\2\2\2\u040d\u040e\3")
        buf.write("\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\5\u00b6\\\2\u0410")
        buf.write("\u040d\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2\u0414\u03cc\3")
        buf.write("\2\2\2\u0414\u03d0\3\2\2\2\u0414\u03d5\3\2\2\2\u0414\u03d9")
        buf.write("\3\2\2\2\u0414\u03e3\3\2\2\2\u0414\u03e8\3\2\2\2\u0414")
        buf.write("\u03f0\3\2\2\2\u0414\u03f7\3\2\2\2\u0414\u03fd\3\2\2\2")
        buf.write("\u0414\u040a\3\2\2\2\u0415\u00a7\3\2\2\2\u0416\u0417\7")
        buf.write("\u0146\2\2\u0417\u0418\7\u0162\2\2\u0418\u0419\5*\26\2")
        buf.write("\u0419\u041a\7\u015f\2\2\u041a\u041b\5*\26\2\u041b\u041c")
        buf.write("\7\u0161\2\2\u041c\u00a9\3\2\2\2\u041d\u041e\7\u0147\2")
        buf.write("\2\u041e\u041f\7\u0162\2\2\u041f\u0420\5\u00a8U\2\u0420")
        buf.write("\u0421\7\u015f\2\2\u0421\u0422\5*\26\2\u0422\u0423\7\u0161")
        buf.write("\2\2\u0423\u00ab\3\2\2\2\u0424\u0425\7\u0148\2\2\u0425")
        buf.write("\u0426\7\u0162\2\2\u0426\u0427\5\u00a8U\2\u0427\u0428")
        buf.write("\7\u015f\2\2\u0428\u0429\5\u00a8U\2\u0429\u042a\7\u0161")
        buf.write("\2\2\u042a\u0433\3\2\2\2\u042b\u042c\7\u0148\2\2\u042c")
        buf.write("\u042d\7\u0162\2\2\u042d\u042e\5\u00b6\\\2\u042e\u042f")
        buf.write("\7\u015f\2\2\u042f\u0430\5*\26\2\u0430\u0431\7\u0161\2")
        buf.write("\2\u0431\u0433\3\2\2\2\u0432\u0424\3\2\2\2\u0432\u042b")
        buf.write("\3\2\2\2\u0433\u00ad\3\2\2\2\u0434\u0435\7\u0149\2\2\u0435")
        buf.write("\u0436\7\u0162\2\2\u0436\u0437\5\u00a8U\2\u0437\u0438")
        buf.write("\7\u015f\2\2\u0438\u0439\5*\26\2\u0439\u043a\7\u015f\2")
        buf.write("\2\u043a\u043b\5*\26\2\u043b\u043c\7\u015f\2\2\u043c\u043d")
        buf.write("\5*\26\2\u043d\u043e\7\u0161\2\2\u043e\u00af\3\2\2\2\u043f")
        buf.write("\u0440\7\u014c\2\2\u0440\u0441\7\u0162\2\2\u0441\u0442")
        buf.write("\5\u00a8U\2\u0442\u0443\7\u015f\2\2\u0443\u0444\5\u00a8")
        buf.write("U\2\u0444\u0445\7\u0161\2\2\u0445\u00b1\3\2\2\2\u0446")
        buf.write("\u0447\7\u014a\2\2\u0447\u0452\7\u017f\2\2\u0448\u0449")
        buf.write("\7\u014a\2\2\u0449\u044a\7\u0162\2\2\u044a\u044b\58\35")
        buf.write("\2\u044b\u044c\7\u0161\2\2\u044c\u0452\3\2\2\2\u044d\u044e")
        buf.write("\7\u014a\2\2\u044e\u044f\7\u0162\2\2\u044f\u0450\7\u017f")
        buf.write("\2\2\u0450\u0452\7\u0161\2\2\u0451\u0446\3\2\2\2\u0451")
        buf.write("\u0448\3\2\2\2\u0451\u044d\3\2\2\2\u0452\u00b3\3\2\2\2")
        buf.write("\u0453\u0454\7\u014b\2\2\u0454\u045b\7\u017f\2\2\u0455")
        buf.write("\u0456\7\u014b\2\2\u0456\u0457\7\u0162\2\2\u0457\u0458")
        buf.write("\58\35\2\u0458\u0459\7\u0161\2\2\u0459\u045b\3\2\2\2\u045a")
        buf.write("\u0453\3\2\2\2\u045a\u0455\3\2\2\2\u045b\u00b5\3\2\2\2")
        buf.write("\u045c\u045d\7\u014d\2\2\u045d\u045e\7\u0162\2\2\u045e")
        buf.write("\u045f\5*\26\2\u045f\u0460\7\u015f\2\2\u0460\u0461\5*")
        buf.write("\26\2\u0461\u0462\7\u015f\2\2\u0462\u0463\5*\26\2\u0463")
        buf.write("\u0464\7\u015f\2\2\u0464\u0465\7\u017e\2\2\u0465\u0466")
        buf.write("\7\u0161\2\2\u0466\u00b7\3\2\2\2\u0467\u046f\5\u00aaV")
        buf.write("\2\u0468\u046f\5\u00acW\2\u0469\u046f\5\u00aeX\2\u046a")
        buf.write("\u046f\5\u00b0Y\2\u046b\u046f\5\u00b2Z\2\u046c\u046f\5")
        buf.write("\u00b4[\2\u046d\u046f\5\u0088E\2\u046e\u0467\3\2\2\2\u046e")
        buf.write("\u0468\3\2\2\2\u046e\u0469\3\2\2\2\u046e\u046a\3\2\2\2")
        buf.write("\u046e\u046b\3\2\2\2\u046e\u046c\3\2\2\2\u046e\u046d\3")
        buf.write("\2\2\2\u046f\u00b9\3\2\2\2\u0091\u00c0\u00c6\u00cf\u00d2")
        buf.write("\u00d6\u00db\u00dd\u00e6\u00ee\u00fb\u0112\u011a\u011e")
        buf.write("\u0121\u0124\u0127\u012a\u012d\u0130\u0133\u0139\u013c")
        buf.write("\u013f\u0142\u0144\u0147\u014a\u0152\u0155\u0158\u015f")
        buf.write("\u0165\u0168\u016c\u0171\u0175\u0180\u018a\u0192\u019c")
        buf.write("\u01a1\u01a5\u01ad\u01b0\u01b2\u01b9\u01c1\u01c5\u01cc")
        buf.write("\u01d2\u01d4\u01d7\u01d9\u01e0\u01e9\u01f1\u01f6\u01fd")
        buf.write("\u0205\u0209\u020e\u0217\u021a\u021d\u0237\u023b\u023d")
        buf.write("\u0241\u024a\u024f\u0254\u0257\u0260\u0270\u0277\u0281")
        buf.write("\u028b\u028d\u0297\u029d\u02a4\u02ac\u02b2\u02bf\u02c4")
        buf.write("\u02c8\u02ca\u02d0\u02de\u02e2\u02e7\u02ed\u02f2\u02f6")
        buf.write("\u02fa\u02ff\u0305\u0309\u030d\u0319\u0323\u0326\u0328")
        buf.write("\u032d\u0332\u0341\u0347\u034c\u0355\u0358\u035b\u036d")
        buf.write("\u0373\u0378\u037c\u0384\u0386\u038b\u0393\u039a\u039c")
        buf.write("\u03a0\u03a9\u03ab\u03b2\u03b8\u03c2\u03cc\u03d0\u03e3")
        buf.write("\u03e8\u03ee\u03f5\u03fb\u0401\u040a\u040d\u0412\u0414")
        buf.write("\u0432\u0451\u045a\u046e")
        return buf.getvalue()


class PostgreSQLParser ( Parser ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'USER'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'=>'", "<INVALID>", "<INVALID>", "'<='", 
                     "'>='", "':='", "'<<'", "'>>'", "';'", "':'", "'.'", 
                     "','", "'*'", "')'", "'('", "']'", "'['", "'+'", "'-'", 
                     "'~'", "'|'", "'&'", "'^'", "'`'", "'>'", "'<'", "'@'", 
                     "'<@'", "'@>'", "'!@'", "'!<@'", "'!~'", "'!@>'", "'!&&'", 
                     "'#'", "'<->'", "'@-@'", "'@@'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
                      "AES_DECRYPT", "AES_ENCRYPT", "AGAINST", "ALL", "ANY", 
                      "ARMSCII8", "ASC", "ASCII_SYM", "ASIN", "AS_SYM", 
                      "ATAN", "ATAN2", "AVG", "BENCHMARK", "BETWEEN", "BIG5", 
                      "BIN", "BINARY", "BIT_AND", "BIT_COUNT", "BIT_LENGTH", 
                      "BIT_OR", "BIT_XOR", "BOOLEAN_SYM", "BY_SYM", "CACHE_SYM", 
                      "CASE_SYM", "CAST_SYM", "CEIL", "CEILING", "CHAR", 
                      "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATE_SYM", 
                      "COLLATION", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                      "CONV", "CONVERT_SYM", "CONVERT_TZ", "COS", "COT", 
                      "COUNT", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
                      "CP852", "CP866", "CP932", "CRC32", "CROSECOND", "CROSS", 
                      "CURDATE", "CURRENT_USER", "CURTIME", "DATABASE", 
                      "DATEDIFF", "DATETIME", "DATE_ADD", "DATE_FORMAT", 
                      "DATE_SUB", "DATE_SYM", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
                      "DAYOFYEAR", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", 
                      "DAY_SECOND", "DAY_SYM", "DEC8", "DECIMAL_SYM", "DECODE", 
                      "DEFAULT", "DEGREES", "DESC", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DISTINCT", "DISTINCTROW", "ELSE_SYM", "ELT", "ENCODE", 
                      "ENCRYPT", "END_SYM", "ESCAPE_SYM", "EUCJPMS", "EUCKR", 
                      "EXISTS", "EXP", "EXPANSION_SYM", "EXPORT_SET", "EXTRACT", 
                      "FALSE_SYM", "FIELD", "FIND_IN_SET", "FIRST_SYM", 
                      "FLOOR", "FORCE_SYM", "FORMAT", "FOR_SYM", "FOUND_ROWS", 
                      "FROM", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
                      "GB2312", "GBK", "GEOSTD8", "GET_FORMAT", "GET_LOCK", 
                      "GREEK", "GROUP_CONCAT", "GROUP_SYM", "HAVING", "HEBREW", 
                      "HEX", "HIGH_PRIORITY", "HOUR", "HOUR_MICROSECOND", 
                      "HOUR_MINUTE", "HOUR_SECOND", "HP8", "IF", "IFNULL", 
                      "IGNORE_SYM", "INDEX_SYM", "INET_ATON", "INET_NTOA", 
                      "INNER_SYM", "INSERT", "INSTR", "INTEGER_SYM", "INTERVAL_SYM", 
                      "IN_SYM", "IS_FREE_LOCK", "ISNULL", "IS_SYM", "IS_USED_LOCK", 
                      "JOIN_SYM", "KEYBCS2", "KEY_SYM", "KOI8R", "KOI8U", 
                      "LANGUAGE", "LAST_SYM", "LAST_DAY", "LAST_INSERT_ID", 
                      "LATIN1", "LATIN1_BIN", "LATIN1_GENERAL_CS", "LATIN2", 
                      "LATIN5", "LATIN7", "LEFT", "LENGTH", "LIKE_SYM", 
                      "LIMIT", "LN", "LOAD", "LOAD_FILE", "LOCATE", "LOCK", 
                      "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", 
                      "MACCE", "MACROMAN", "MAKEDATE", "MAKETIME", "MAKE_SET", 
                      "MASTER_POS_WAIT", "MATCH", "MAX_SYM", "MD5", "MICROSECOND", 
                      "MID", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", 
                      "MIN_SYM", "MOD", "MODE_SYM", "MONTH", "MONTHNAME", 
                      "NAME_CONST", "NATURAL", "NOT_SYM", "NOTNULL", "NOW", 
                      "NULL_SYM", "NULLS_SYM", "OCT", "OFFSET_SYM", "OJ_SYM", 
                      "OLD_PASSWORD", "ON", "ORD", "ORDER_SYM", "OUTER", 
                      "PARTITION_SYM", "PASSWORD", "PERIOD_ADD", "PERIOD_DIFF", 
                      "PI", "POW", "POWER", "QUARTER", "QUERY_SYM", "QUOTE", 
                      "RADIANS", "RAND", "REAL", "REGEXP", "RELEASE_LOCK", 
                      "REPEAT", "REPLACE", "REVERSE", "RIGHT", "ROLLUP_SYM", 
                      "ROUND", "ROW_SYM", "RPAD", "RTRIM", "SCHEMA", "SECOND", 
                      "SECOND_MICROSECOND", "SEC_TO_TIME", "SELECT", "SESSION_USER", 
                      "SET_SYM", "SHARE_SYM", "SIGN", "SIGNED_SYM", "SIN", 
                      "SJIS", "SLEEP", "SOUNDEX", "SOUNDS_SYM", "SPACE", 
                      "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", 
                      "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", 
                      "SQRT", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
                      "STRAIGHT_JOIN", "STRCMP", "STR_TO_DATE", "SUBSTRING", 
                      "SUBSTRING_INDEX", "SUBTIME", "SUM", "SWE7", "SYMMETRIC", 
                      "SYSDATE", "SYSTEM_USER", "TAN", "THEN_SYM", "TIMEDIFF", 
                      "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_SYM", "TIME_TO_SEC", "TIS620", "TO_BASE64", 
                      "TO_DAYS", "TO_SECONDS", "TRIM", "TRUE_SYM", "TRUNCATE", 
                      "UCS2", "UJIS", "UNHEX", "UNION_SYM", "UNIX_TIMESTAMP", 
                      "UNSIGNED_SYM", "UPDATE", "UPPER", "USE", "USER", 
                      "USE_SYM", "USING_SYM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
                      "UTF8", "UUID", "VALUES", "VARIANCE", "VAR_POP", "VAR_SAMP", 
                      "VERSION_SYM", "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", 
                      "WHEN_SYM", "WHERE", "WITH", "XOR", "YEAR", "YEARWEEK", 
                      "YEAR_MONTH", "SPOINT", "SCIRCLE", "SLINE", "SELLIPSE", 
                      "SPOLY", "SPATH", "SBOX", "STRANS", "RADIUS", "AREA", 
                      "DIVIDE", "MOD_SYM", "OR_SYM", "AND_SYM", "ARROW", 
                      "EQ", "NOT_EQ", "LET", "GET", "SET_VAR", "SHIFT_LEFT", 
                      "SHIFT_RIGHT", "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", 
                      "RPAREN", "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", 
                      "NEGATION", "VERTBAR", "BITAND", "POWER_OP", "BACKTICK", 
                      "GTH", "LTH", "SCONTAINS", "SCONTAINS2", "SLEFTCONTAINS2", 
                      "SNOTCONTAINS", "SNOTCONTAINS2", "SLEFTNOTCONTAINS", 
                      "SLEFTNOTCONTAINS2", "SNOTOVERLAP", "SCROSS", "SDISTANCE", 
                      "SLENGTH", "SCENTER", "INTEGER_NUM", "HEX_DIGIT", 
                      "BIT_NUM", "REAL_NUMBER", "TRANS", "TEXT_STRING", 
                      "ID", "COMMENT", "WS", "CBRT", "DIV" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_search_modifier = 2
    RULE_interval_unit = 3
    RULE_transcoding_name = 4
    RULE_bit_literal = 5
    RULE_boolean_literal = 6
    RULE_hex_literal = 7
    RULE_number_literal = 8
    RULE_string_literal = 9
    RULE_char_functions = 10
    RULE_group_functions = 11
    RULE_number_functions = 12
    RULE_other_functions = 13
    RULE_time_functions = 14
    RULE_pg_sphere_functions = 15
    RULE_functionList = 16
    RULE_literal_value = 17
    RULE_select_expression = 18
    RULE_alias = 19
    RULE_bit_expr = 20
    RULE_bool_primary = 21
    RULE_case_when_statement = 22
    RULE_case_when_statement1 = 23
    RULE_case_when_statement2 = 24
    RULE_column_list = 25
    RULE_column_name = 26
    RULE_column_spec = 27
    RULE_displayed_column = 28
    RULE_exp_factor1 = 29
    RULE_exp_factor2 = 30
    RULE_exp_factor3 = 31
    RULE_exp_factor4 = 32
    RULE_expression = 33
    RULE_expression_list = 34
    RULE_factor1 = 35
    RULE_factor2 = 36
    RULE_factor3 = 37
    RULE_factor4 = 38
    RULE_factor5 = 39
    RULE_function_call = 40
    RULE_groupby_clause = 41
    RULE_groupby_item = 42
    RULE_having_clause = 43
    RULE_index_hint = 44
    RULE_index_hint_list = 45
    RULE_index_name = 46
    RULE_index_list = 47
    RULE_index_options = 48
    RULE_interval_expr = 49
    RULE_join_condition = 50
    RULE_limit_clause = 51
    RULE_match_against_statement = 52
    RULE_offset = 53
    RULE_row_count = 54
    RULE_orderby_clause = 55
    RULE_orderby_item = 56
    RULE_partition_clause = 57
    RULE_partition_name = 58
    RULE_partition_names = 59
    RULE_bit_fac1 = 60
    RULE_bit_fac2 = 61
    RULE_predicate = 62
    RULE_query = 63
    RULE_schema_name = 64
    RULE_select_list = 65
    RULE_select_statement = 66
    RULE_simple_expr = 67
    RULE_slice_spec = 68
    RULE_subquery = 69
    RULE_table_atom = 70
    RULE_table_name = 71
    RULE_table_factor1 = 72
    RULE_table_factor2 = 73
    RULE_table_factor3 = 74
    RULE_table_factor4 = 75
    RULE_table_reference = 76
    RULE_table_references = 77
    RULE_table_spec = 78
    RULE_values_list = 79
    RULE_where_clause = 80
    RULE_pg_sphere_op = 81
    RULE_sbit_expr = 82
    RULE_spoint = 83
    RULE_scircle = 84
    RULE_sline = 85
    RULE_sellipse = 86
    RULE_sbox = 87
    RULE_spoly = 88
    RULE_spath = 89
    RULE_strans = 90
    RULE_pg_sphere_object = 91

    ruleNames =  [ "relational_op", "cast_data_type", "search_modifier", 
                   "interval_unit", "transcoding_name", "bit_literal", "boolean_literal", 
                   "hex_literal", "number_literal", "string_literal", "char_functions", 
                   "group_functions", "number_functions", "other_functions", 
                   "time_functions", "pg_sphere_functions", "functionList", 
                   "literal_value", "select_expression", "alias", "bit_expr", 
                   "bool_primary", "case_when_statement", "case_when_statement1", 
                   "case_when_statement2", "column_list", "column_name", 
                   "column_spec", "displayed_column", "exp_factor1", "exp_factor2", 
                   "exp_factor3", "exp_factor4", "expression", "expression_list", 
                   "factor1", "factor2", "factor3", "factor4", "factor5", 
                   "function_call", "groupby_clause", "groupby_item", "having_clause", 
                   "index_hint", "index_hint_list", "index_name", "index_list", 
                   "index_options", "interval_expr", "join_condition", "limit_clause", 
                   "match_against_statement", "offset", "row_count", "orderby_clause", 
                   "orderby_item", "partition_clause", "partition_name", 
                   "partition_names", "bit_fac1", "bit_fac2", "predicate", 
                   "query", "schema_name", "select_list", "select_statement", 
                   "simple_expr", "slice_spec", "subquery", "table_atom", 
                   "table_name", "table_factor1", "table_factor2", "table_factor3", 
                   "table_factor4", "table_reference", "table_references", 
                   "table_spec", "values_list", "where_clause", "pg_sphere_op", 
                   "sbit_expr", "spoint", "scircle", "sline", "sellipse", 
                   "sbox", "spoly", "spath", "strans", "pg_sphere_object" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ADDDATE=3
    ADDTIME=4
    AES_DECRYPT=5
    AES_ENCRYPT=6
    AGAINST=7
    ALL=8
    ANY=9
    ARMSCII8=10
    ASC=11
    ASCII_SYM=12
    ASIN=13
    AS_SYM=14
    ATAN=15
    ATAN2=16
    AVG=17
    BENCHMARK=18
    BETWEEN=19
    BIG5=20
    BIN=21
    BINARY=22
    BIT_AND=23
    BIT_COUNT=24
    BIT_LENGTH=25
    BIT_OR=26
    BIT_XOR=27
    BOOLEAN_SYM=28
    BY_SYM=29
    CACHE_SYM=30
    CASE_SYM=31
    CAST_SYM=32
    CEIL=33
    CEILING=34
    CHAR=35
    CHARSET=36
    CHAR_LENGTH=37
    COERCIBILITY=38
    COLLATE_SYM=39
    COLLATION=40
    CONCAT=41
    CONCAT_WS=42
    CONNECTION_ID=43
    CONV=44
    CONVERT_SYM=45
    CONVERT_TZ=46
    COS=47
    COT=48
    COUNT=49
    CP1250=50
    CP1251=51
    CP1256=52
    CP1257=53
    CP850=54
    CP852=55
    CP866=56
    CP932=57
    CRC32=58
    CROSECOND=59
    CROSS=60
    CURDATE=61
    CURRENT_USER=62
    CURTIME=63
    DATABASE=64
    DATEDIFF=65
    DATETIME=66
    DATE_ADD=67
    DATE_FORMAT=68
    DATE_SUB=69
    DATE_SYM=70
    DAYNAME=71
    DAYOFMONTH=72
    DAYOFWEEK=73
    DAYOFYEAR=74
    DAY_HOUR=75
    DAY_MICROSECOND=76
    DAY_MINUTE=77
    DAY_SECOND=78
    DAY_SYM=79
    DEC8=80
    DECIMAL_SYM=81
    DECODE=82
    DEFAULT=83
    DEGREES=84
    DESC=85
    DES_DECRYPT=86
    DES_ENCRYPT=87
    DISTINCT=88
    DISTINCTROW=89
    ELSE_SYM=90
    ELT=91
    ENCODE=92
    ENCRYPT=93
    END_SYM=94
    ESCAPE_SYM=95
    EUCJPMS=96
    EUCKR=97
    EXISTS=98
    EXP=99
    EXPANSION_SYM=100
    EXPORT_SET=101
    EXTRACT=102
    FALSE_SYM=103
    FIELD=104
    FIND_IN_SET=105
    FIRST_SYM=106
    FLOOR=107
    FORCE_SYM=108
    FORMAT=109
    FOR_SYM=110
    FOUND_ROWS=111
    FROM=112
    FROM_BASE64=113
    FROM_DAYS=114
    FROM_UNIXTIME=115
    GB2312=116
    GBK=117
    GEOSTD8=118
    GET_FORMAT=119
    GET_LOCK=120
    GREEK=121
    GROUP_CONCAT=122
    GROUP_SYM=123
    HAVING=124
    HEBREW=125
    HEX=126
    HIGH_PRIORITY=127
    HOUR=128
    HOUR_MICROSECOND=129
    HOUR_MINUTE=130
    HOUR_SECOND=131
    HP8=132
    IF=133
    IFNULL=134
    IGNORE_SYM=135
    INDEX_SYM=136
    INET_ATON=137
    INET_NTOA=138
    INNER_SYM=139
    INSERT=140
    INSTR=141
    INTEGER_SYM=142
    INTERVAL_SYM=143
    IN_SYM=144
    IS_FREE_LOCK=145
    ISNULL=146
    IS_SYM=147
    IS_USED_LOCK=148
    JOIN_SYM=149
    KEYBCS2=150
    KEY_SYM=151
    KOI8R=152
    KOI8U=153
    LANGUAGE=154
    LAST_SYM=155
    LAST_DAY=156
    LAST_INSERT_ID=157
    LATIN1=158
    LATIN1_BIN=159
    LATIN1_GENERAL_CS=160
    LATIN2=161
    LATIN5=162
    LATIN7=163
    LEFT=164
    LENGTH=165
    LIKE_SYM=166
    LIMIT=167
    LN=168
    LOAD=169
    LOAD_FILE=170
    LOCATE=171
    LOCK=172
    LOG=173
    LOG10=174
    LOG2=175
    LOWER=176
    LPAD=177
    LTRIM=178
    MACCE=179
    MACROMAN=180
    MAKEDATE=181
    MAKETIME=182
    MAKE_SET=183
    MASTER_POS_WAIT=184
    MATCH=185
    MAX_SYM=186
    MD5=187
    MICROSECOND=188
    MID=189
    MINUTE=190
    MINUTE_MICROSECOND=191
    MINUTE_SECOND=192
    MIN_SYM=193
    MOD=194
    MODE_SYM=195
    MONTH=196
    MONTHNAME=197
    NAME_CONST=198
    NATURAL=199
    NOT_SYM=200
    NOTNULL=201
    NOW=202
    NULL_SYM=203
    NULLS_SYM=204
    OCT=205
    OFFSET_SYM=206
    OJ_SYM=207
    OLD_PASSWORD=208
    ON=209
    ORD=210
    ORDER_SYM=211
    OUTER=212
    PARTITION_SYM=213
    PASSWORD=214
    PERIOD_ADD=215
    PERIOD_DIFF=216
    PI=217
    POW=218
    POWER=219
    QUARTER=220
    QUERY_SYM=221
    QUOTE=222
    RADIANS=223
    RAND=224
    REAL=225
    REGEXP=226
    RELEASE_LOCK=227
    REPEAT=228
    REPLACE=229
    REVERSE=230
    RIGHT=231
    ROLLUP_SYM=232
    ROUND=233
    ROW_SYM=234
    RPAD=235
    RTRIM=236
    SCHEMA=237
    SECOND=238
    SECOND_MICROSECOND=239
    SEC_TO_TIME=240
    SELECT=241
    SESSION_USER=242
    SET_SYM=243
    SHARE_SYM=244
    SIGN=245
    SIGNED_SYM=246
    SIN=247
    SJIS=248
    SLEEP=249
    SOUNDEX=250
    SOUNDS_SYM=251
    SPACE=252
    SQL_BIG_RESULT=253
    SQL_BUFFER_RESULT=254
    SQL_CACHE_SYM=255
    SQL_CALC_FOUND_ROWS=256
    SQL_NO_CACHE_SYM=257
    SQL_SMALL_RESULT=258
    SQRT=259
    STD=260
    STDDEV=261
    STDDEV_POP=262
    STDDEV_SAMP=263
    STRAIGHT_JOIN=264
    STRCMP=265
    STR_TO_DATE=266
    SUBSTRING=267
    SUBSTRING_INDEX=268
    SUBTIME=269
    SUM=270
    SWE7=271
    SYMMETRIC=272
    SYSDATE=273
    SYSTEM_USER=274
    TAN=275
    THEN_SYM=276
    TIMEDIFF=277
    TIMESTAMP=278
    TIMESTAMPADD=279
    TIMESTAMPDIFF=280
    TIME_FORMAT=281
    TIME_SYM=282
    TIME_TO_SEC=283
    TIS620=284
    TO_BASE64=285
    TO_DAYS=286
    TO_SECONDS=287
    TRIM=288
    TRUE_SYM=289
    TRUNCATE=290
    UCS2=291
    UJIS=292
    UNHEX=293
    UNION_SYM=294
    UNIX_TIMESTAMP=295
    UNSIGNED_SYM=296
    UPDATE=297
    UPPER=298
    USE=299
    USER=300
    USE_SYM=301
    USING_SYM=302
    UTC_DATE=303
    UTC_TIME=304
    UTC_TIMESTAMP=305
    UTF8=306
    UUID=307
    VALUES=308
    VARIANCE=309
    VAR_POP=310
    VAR_SAMP=311
    VERSION_SYM=312
    WEEK=313
    WEEKDAY=314
    WEEKOFYEAR=315
    WEIGHT_STRING=316
    WHEN_SYM=317
    WHERE=318
    WITH=319
    XOR=320
    YEAR=321
    YEARWEEK=322
    YEAR_MONTH=323
    SPOINT=324
    SCIRCLE=325
    SLINE=326
    SELLIPSE=327
    SPOLY=328
    SPATH=329
    SBOX=330
    STRANS=331
    RADIUS=332
    AREA=333
    DIVIDE=334
    MOD_SYM=335
    OR_SYM=336
    AND_SYM=337
    ARROW=338
    EQ=339
    NOT_EQ=340
    LET=341
    GET=342
    SET_VAR=343
    SHIFT_LEFT=344
    SHIFT_RIGHT=345
    SEMI=346
    COLON=347
    DOT=348
    COMMA=349
    ASTERISK=350
    RPAREN=351
    LPAREN=352
    RBRACK=353
    LBRACK=354
    PLUS=355
    MINUS=356
    NEGATION=357
    VERTBAR=358
    BITAND=359
    POWER_OP=360
    BACKTICK=361
    GTH=362
    LTH=363
    SCONTAINS=364
    SCONTAINS2=365
    SLEFTCONTAINS2=366
    SNOTCONTAINS=367
    SNOTCONTAINS2=368
    SLEFTNOTCONTAINS=369
    SLEFTNOTCONTAINS2=370
    SNOTOVERLAP=371
    SCROSS=372
    SDISTANCE=373
    SLENGTH=374
    SCENTER=375
    INTEGER_NUM=376
    HEX_DIGIT=377
    BIT_NUM=378
    REAL_NUMBER=379
    TRANS=380
    TEXT_STRING=381
    ID=382
    COMMENT=383
    WS=384
    CBRT=385
    DIV=386

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(PostgreSQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(PostgreSQLParser.LET, 0)

        def GET(self):
            return self.getToken(PostgreSQLParser.GET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = PostgreSQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            _la = self._input.LA(1)
            if not(((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (PostgreSQLParser.EQ - 339)) | (1 << (PostgreSQLParser.NOT_EQ - 339)) | (1 << (PostgreSQLParser.LET - 339)) | (1 << (PostgreSQLParser.GET - 339)) | (1 << (PostgreSQLParser.GTH - 339)) | (1 << (PostgreSQLParser.LTH - 339)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(PostgreSQLParser.DATETIME, 0)

        def DECIMAL_SYM(self):
            return self.getToken(PostgreSQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def SIGNED_SYM(self):
            return self.getToken(PostgreSQLParser.SIGNED_SYM, 0)

        def INTEGER_SYM(self):
            return self.getToken(PostgreSQLParser.INTEGER_SYM, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def UNSIGNED_SYM(self):
            return self.getToken(PostgreSQLParser.UNSIGNED_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = PostgreSQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 186
                self.match(PostgreSQLParser.BINARY)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 187
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 188
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 189
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self.match(PostgreSQLParser.CHAR)
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 193
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 194
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 195
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.DATE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 198
                self.match(PostgreSQLParser.DATE_SYM)
                pass
            elif token in [PostgreSQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 199
                self.match(PostgreSQLParser.DATETIME)
                pass
            elif token in [PostgreSQLParser.DECIMAL_SYM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 200
                self.match(PostgreSQLParser.DECIMAL_SYM)
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 201
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 202
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.COMMA:
                        self.state = 203
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 204
                        self.match(PostgreSQLParser.INTEGER_NUM)


                    self.state = 207
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.SIGNED_SYM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 210
                self.match(PostgreSQLParser.SIGNED_SYM)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INTEGER_SYM:
                    self.state = 211
                    self.match(PostgreSQLParser.INTEGER_SYM)


                pass
            elif token in [PostgreSQLParser.TIME_SYM]:
                self.enterOuterAlt(localctx, 7)
                self.state = 214
                self.match(PostgreSQLParser.TIME_SYM)
                pass
            elif token in [PostgreSQLParser.UNSIGNED_SYM]:
                self.enterOuterAlt(localctx, 8)
                self.state = 215
                self.match(PostgreSQLParser.UNSIGNED_SYM)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INTEGER_SYM:
                    self.state = 216
                    self.match(PostgreSQLParser.INTEGER_SYM)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def MODE_SYM(self):
            return self.getToken(PostgreSQLParser.MODE_SYM, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def QUERY_SYM(self):
            return self.getToken(PostgreSQLParser.QUERY_SYM, 0)

        def EXPANSION_SYM(self):
            return self.getToken(PostgreSQLParser.EXPANSION_SYM, 0)

        def BOOLEAN_SYM(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_search_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_modifier" ):
                listener.enterSearch_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_modifier" ):
                listener.exitSearch_modifier(self)




    def search_modifier(self):

        localctx = PostgreSQLParser.Search_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_search_modifier)
        try:
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 222
                self.match(PostgreSQLParser.NATURAL)
                self.state = 223
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 224
                self.match(PostgreSQLParser.MODE_SYM)
                self.state = 228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 225
                    self.match(PostgreSQLParser.WITH)
                    self.state = 226
                    self.match(PostgreSQLParser.QUERY_SYM)
                    self.state = 227
                    self.match(PostgreSQLParser.EXPANSION_SYM)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 231
                self.match(PostgreSQLParser.BOOLEAN_SYM)
                self.state = 232
                self.match(PostgreSQLParser.MODE_SYM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 233
                self.match(PostgreSQLParser.WITH)
                self.state = 234
                self.match(PostgreSQLParser.QUERY_SYM)
                self.state = 235
                self.match(PostgreSQLParser.EXPANSION_SYM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(PostgreSQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(PostgreSQLParser.HOUR, 0)

        def DAY_SYM(self):
            return self.getToken(PostgreSQLParser.DAY_SYM, 0)

        def WEEK(self):
            return self.getToken(PostgreSQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(PostgreSQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(PostgreSQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(PostgreSQLParser.MINUTE_SECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.HOUR_MICROSECOND, 0)

        def HOUR_SECOND(self):
            return self.getToken(PostgreSQLParser.HOUR_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(PostgreSQLParser.HOUR_MINUTE, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.DAY_MICROSECOND, 0)

        def DAY_SECOND(self):
            return self.getToken(PostgreSQLParser.DAY_SECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(PostgreSQLParser.DAY_MINUTE, 0)

        def DAY_HOUR(self):
            return self.getToken(PostgreSQLParser.DAY_HOUR, 0)

        def YEAR_MONTH(self):
            return self.getToken(PostgreSQLParser.YEAR_MONTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_unit" ):
                listener.enterInterval_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_unit" ):
                listener.exitInterval_unit(self)




    def interval_unit(self):

        localctx = PostgreSQLParser.Interval_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_interval_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.DAY_HOUR - 75)) | (1 << (PostgreSQLParser.DAY_MICROSECOND - 75)) | (1 << (PostgreSQLParser.DAY_MINUTE - 75)) | (1 << (PostgreSQLParser.DAY_SECOND - 75)) | (1 << (PostgreSQLParser.DAY_SYM - 75)) | (1 << (PostgreSQLParser.HOUR - 75)) | (1 << (PostgreSQLParser.HOUR_MICROSECOND - 75)) | (1 << (PostgreSQLParser.HOUR_MINUTE - 75)) | (1 << (PostgreSQLParser.HOUR_SECOND - 75)))) != 0) or ((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (PostgreSQLParser.MINUTE - 190)) | (1 << (PostgreSQLParser.MINUTE_MICROSECOND - 190)) | (1 << (PostgreSQLParser.MINUTE_SECOND - 190)) | (1 << (PostgreSQLParser.MONTH - 190)) | (1 << (PostgreSQLParser.QUARTER - 190)) | (1 << (PostgreSQLParser.SECOND - 190)) | (1 << (PostgreSQLParser.SECOND_MICROSECOND - 190)))) != 0) or ((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & ((1 << (PostgreSQLParser.WEEK - 313)) | (1 << (PostgreSQLParser.YEAR - 313)) | (1 << (PostgreSQLParser.YEAR_MONTH - 313)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transcoding_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN1(self):
            return self.getToken(PostgreSQLParser.LATIN1, 0)

        def UTF8(self):
            return self.getToken(PostgreSQLParser.UTF8, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transcoding_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranscoding_name" ):
                listener.enterTranscoding_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranscoding_name" ):
                listener.exitTranscoding_name(self)




    def transcoding_name(self):

        localctx = PostgreSQLParser.Transcoding_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transcoding_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.LATIN1 or _la==PostgreSQLParser.UTF8):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(PostgreSQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = PostgreSQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(PostgreSQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(PostgreSQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(PostgreSQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = PostgreSQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FALSE_SYM or _la==PostgreSQLParser.TRUE_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hex_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(PostgreSQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = PostgreSQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(PostgreSQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(PostgreSQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = PostgreSQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                self.state = 248
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 251
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.INTEGER_NUM or _la==PostgreSQLParser.REAL_NUMBER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = PostgreSQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(PostgreSQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(PostgreSQLParser.ASCII_SYM, 0)

        def BIN(self):
            return self.getToken(PostgreSQLParser.BIN, 0)

        def BIT_LENGTH(self):
            return self.getToken(PostgreSQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(PostgreSQLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def CONCAT_WS(self):
            return self.getToken(PostgreSQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(PostgreSQLParser.CONCAT, 0)

        def ELT(self):
            return self.getToken(PostgreSQLParser.ELT, 0)

        def EXPORT_SET(self):
            return self.getToken(PostgreSQLParser.EXPORT_SET, 0)

        def FIELD(self):
            return self.getToken(PostgreSQLParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(PostgreSQLParser.FIND_IN_SET, 0)

        def FORMAT(self):
            return self.getToken(PostgreSQLParser.FORMAT, 0)

        def FROM_BASE64(self):
            return self.getToken(PostgreSQLParser.FROM_BASE64, 0)

        def HEX(self):
            return self.getToken(PostgreSQLParser.HEX, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INSTR(self):
            return self.getToken(PostgreSQLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(PostgreSQLParser.LENGTH, 0)

        def LOAD_FILE(self):
            return self.getToken(PostgreSQLParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(PostgreSQLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(PostgreSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(PostgreSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(PostgreSQLParser.LTRIM, 0)

        def MAKE_SET(self):
            return self.getToken(PostgreSQLParser.MAKE_SET, 0)

        def MID(self):
            return self.getToken(PostgreSQLParser.MID, 0)

        def OCT(self):
            return self.getToken(PostgreSQLParser.OCT, 0)

        def ORD(self):
            return self.getToken(PostgreSQLParser.ORD, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def REPEAT(self):
            return self.getToken(PostgreSQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(PostgreSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(PostgreSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(PostgreSQLParser.RTRIM, 0)

        def SOUNDEX(self):
            return self.getToken(PostgreSQLParser.SOUNDEX, 0)

        def SPACE(self):
            return self.getToken(PostgreSQLParser.SPACE, 0)

        def STRCMP(self):
            return self.getToken(PostgreSQLParser.STRCMP, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(PostgreSQLParser.SUBSTRING_INDEX, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def TO_BASE64(self):
            return self.getToken(PostgreSQLParser.TO_BASE64, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def UNHEX(self):
            return self.getToken(PostgreSQLParser.UNHEX, 0)

        def UPPER(self):
            return self.getToken(PostgreSQLParser.UPPER, 0)

        def WEIGHT_STRING(self):
            return self.getToken(PostgreSQLParser.WEIGHT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = PostgreSQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ASCII_SYM) | (1 << PostgreSQLParser.BIN) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.CHAR) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (PostgreSQLParser.ELT - 91)) | (1 << (PostgreSQLParser.EXPORT_SET - 91)) | (1 << (PostgreSQLParser.FIELD - 91)) | (1 << (PostgreSQLParser.FIND_IN_SET - 91)) | (1 << (PostgreSQLParser.FORMAT - 91)) | (1 << (PostgreSQLParser.FROM_BASE64 - 91)) | (1 << (PostgreSQLParser.HEX - 91)) | (1 << (PostgreSQLParser.INSERT - 91)) | (1 << (PostgreSQLParser.INSTR - 91)))) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (PostgreSQLParser.LEFT - 164)) | (1 << (PostgreSQLParser.LENGTH - 164)) | (1 << (PostgreSQLParser.LOAD_FILE - 164)) | (1 << (PostgreSQLParser.LOCATE - 164)) | (1 << (PostgreSQLParser.LOWER - 164)) | (1 << (PostgreSQLParser.LPAD - 164)) | (1 << (PostgreSQLParser.LTRIM - 164)) | (1 << (PostgreSQLParser.MAKE_SET - 164)) | (1 << (PostgreSQLParser.MID - 164)) | (1 << (PostgreSQLParser.OCT - 164)) | (1 << (PostgreSQLParser.ORD - 164)) | (1 << (PostgreSQLParser.QUOTE - 164)))) != 0) or ((((_la - 228)) & ~0x3f) == 0 and ((1 << (_la - 228)) & ((1 << (PostgreSQLParser.REPEAT - 228)) | (1 << (PostgreSQLParser.REPLACE - 228)) | (1 << (PostgreSQLParser.REVERSE - 228)) | (1 << (PostgreSQLParser.RIGHT - 228)) | (1 << (PostgreSQLParser.RPAD - 228)) | (1 << (PostgreSQLParser.RTRIM - 228)) | (1 << (PostgreSQLParser.SOUNDEX - 228)) | (1 << (PostgreSQLParser.SPACE - 228)) | (1 << (PostgreSQLParser.STRCMP - 228)) | (1 << (PostgreSQLParser.SUBSTRING - 228)) | (1 << (PostgreSQLParser.SUBSTRING_INDEX - 228)) | (1 << (PostgreSQLParser.TO_BASE64 - 228)) | (1 << (PostgreSQLParser.TRIM - 228)))) != 0) or ((((_la - 293)) & ~0x3f) == 0 and ((1 << (_la - 293)) & ((1 << (PostgreSQLParser.UNHEX - 293)) | (1 << (PostgreSQLParser.UPPER - 293)) | (1 << (PostgreSQLParser.WEIGHT_STRING - 293)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PostgreSQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(PostgreSQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(PostgreSQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(PostgreSQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(PostgreSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(PostgreSQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(PostgreSQLParser.BIT_XOR, 0)

        def BIT_COUNT(self):
            return self.getToken(PostgreSQLParser.BIT_COUNT, 0)

        def GROUP_CONCAT(self):
            return self.getToken(PostgreSQLParser.GROUP_CONCAT, 0)

        def STD(self):
            return self.getToken(PostgreSQLParser.STD, 0)

        def STDDEV(self):
            return self.getToken(PostgreSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(PostgreSQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = PostgreSQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.COUNT))) != 0) or _la==PostgreSQLParser.GROUP_CONCAT or _la==PostgreSQLParser.MAX_SYM or _la==PostgreSQLParser.MIN_SYM or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (PostgreSQLParser.STD - 260)) | (1 << (PostgreSQLParser.STDDEV - 260)) | (1 << (PostgreSQLParser.STDDEV_POP - 260)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 260)) | (1 << (PostgreSQLParser.SUM - 260)) | (1 << (PostgreSQLParser.VARIANCE - 260)) | (1 << (PostgreSQLParser.VAR_POP - 260)) | (1 << (PostgreSQLParser.VAR_SAMP - 260)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(PostgreSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(PostgreSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(PostgreSQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(PostgreSQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(PostgreSQLParser.ATAN, 0)

        def CBRT(self):
            return self.getToken(PostgreSQLParser.CBRT, 0)

        def CEIL(self):
            return self.getToken(PostgreSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(PostgreSQLParser.CEILING, 0)

        def CONV(self):
            return self.getToken(PostgreSQLParser.CONV, 0)

        def COS(self):
            return self.getToken(PostgreSQLParser.COS, 0)

        def COT(self):
            return self.getToken(PostgreSQLParser.COT, 0)

        def CRC32(self):
            return self.getToken(PostgreSQLParser.CRC32, 0)

        def DEGREES(self):
            return self.getToken(PostgreSQLParser.DEGREES, 0)

        def DIV(self):
            return self.getToken(PostgreSQLParser.DIV, 0)

        def EXP(self):
            return self.getToken(PostgreSQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(PostgreSQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(PostgreSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(PostgreSQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(PostgreSQLParser.MOD, 0)

        def PI(self):
            return self.getToken(PostgreSQLParser.PI, 0)

        def POW(self):
            return self.getToken(PostgreSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(PostgreSQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(PostgreSQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(PostgreSQLParser.RAND, 0)

        def ROUND(self):
            return self.getToken(PostgreSQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(PostgreSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(PostgreSQLParser.SIN, 0)

        def SQRT(self):
            return self.getToken(PostgreSQLParser.SQRT, 0)

        def TAN(self):
            return self.getToken(PostgreSQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = PostgreSQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CONV) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.CRC32))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (PostgreSQLParser.DEGREES - 84)) | (1 << (PostgreSQLParser.EXP - 84)) | (1 << (PostgreSQLParser.FLOOR - 84)))) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (PostgreSQLParser.LN - 168)) | (1 << (PostgreSQLParser.LOG - 168)) | (1 << (PostgreSQLParser.MOD - 168)) | (1 << (PostgreSQLParser.PI - 168)) | (1 << (PostgreSQLParser.POW - 168)) | (1 << (PostgreSQLParser.POWER - 168)) | (1 << (PostgreSQLParser.RADIANS - 168)) | (1 << (PostgreSQLParser.RAND - 168)))) != 0) or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & ((1 << (PostgreSQLParser.ROUND - 233)) | (1 << (PostgreSQLParser.SIGN - 233)) | (1 << (PostgreSQLParser.SIN - 233)) | (1 << (PostgreSQLParser.SQRT - 233)) | (1 << (PostgreSQLParser.TAN - 233)) | (1 << (PostgreSQLParser.TRUNCATE - 233)))) != 0) or _la==PostgreSQLParser.CBRT or _la==PostgreSQLParser.DIV):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Other_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAKE_SET(self):
            return self.getToken(PostgreSQLParser.MAKE_SET, 0)

        def LOAD_FILE(self):
            return self.getToken(PostgreSQLParser.LOAD_FILE, 0)

        def IF(self):
            return self.getToken(PostgreSQLParser.IF, 0)

        def IFNULL(self):
            return self.getToken(PostgreSQLParser.IFNULL, 0)

        def AES_ENCRYPT(self):
            return self.getToken(PostgreSQLParser.AES_ENCRYPT, 0)

        def AES_DECRYPT(self):
            return self.getToken(PostgreSQLParser.AES_DECRYPT, 0)

        def DECODE(self):
            return self.getToken(PostgreSQLParser.DECODE, 0)

        def ENCODE(self):
            return self.getToken(PostgreSQLParser.ENCODE, 0)

        def DES_DECRYPT(self):
            return self.getToken(PostgreSQLParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(PostgreSQLParser.DES_ENCRYPT, 0)

        def ENCRYPT(self):
            return self.getToken(PostgreSQLParser.ENCRYPT, 0)

        def MD5(self):
            return self.getToken(PostgreSQLParser.MD5, 0)

        def OLD_PASSWORD(self):
            return self.getToken(PostgreSQLParser.OLD_PASSWORD, 0)

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def BENCHMARK(self):
            return self.getToken(PostgreSQLParser.BENCHMARK, 0)

        def CHARSET(self):
            return self.getToken(PostgreSQLParser.CHARSET, 0)

        def COERCIBILITY(self):
            return self.getToken(PostgreSQLParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def CONNECTION_ID(self):
            return self.getToken(PostgreSQLParser.CONNECTION_ID, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def VERSION_SYM(self):
            return self.getToken(PostgreSQLParser.VERSION_SYM, 0)

        def FOUND_ROWS(self):
            return self.getToken(PostgreSQLParser.FOUND_ROWS, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(PostgreSQLParser.LAST_INSERT_ID, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def GET_LOCK(self):
            return self.getToken(PostgreSQLParser.GET_LOCK, 0)

        def RELEASE_LOCK(self):
            return self.getToken(PostgreSQLParser.RELEASE_LOCK, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(PostgreSQLParser.IS_FREE_LOCK, 0)

        def IS_USED_LOCK(self):
            return self.getToken(PostgreSQLParser.IS_USED_LOCK, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(PostgreSQLParser.MASTER_POS_WAIT, 0)

        def INET_ATON(self):
            return self.getToken(PostgreSQLParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(PostgreSQLParser.INET_NTOA, 0)

        def NAME_CONST(self):
            return self.getToken(PostgreSQLParser.NAME_CONST, 0)

        def SLEEP(self):
            return self.getToken(PostgreSQLParser.SLEEP, 0)

        def UUID(self):
            return self.getToken(PostgreSQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = PostgreSQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.AES_DECRYPT) | (1 << PostgreSQLParser.AES_ENCRYPT) | (1 << PostgreSQLParser.BENCHMARK) | (1 << PostgreSQLParser.CHARSET) | (1 << PostgreSQLParser.COERCIBILITY) | (1 << PostgreSQLParser.COLLATION) | (1 << PostgreSQLParser.CONNECTION_ID) | (1 << PostgreSQLParser.CURRENT_USER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.DATABASE - 64)) | (1 << (PostgreSQLParser.DECODE - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.DES_DECRYPT - 64)) | (1 << (PostgreSQLParser.DES_ENCRYPT - 64)) | (1 << (PostgreSQLParser.ENCODE - 64)) | (1 << (PostgreSQLParser.ENCRYPT - 64)) | (1 << (PostgreSQLParser.FOUND_ROWS - 64)) | (1 << (PostgreSQLParser.GET_LOCK - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (PostgreSQLParser.IF - 133)) | (1 << (PostgreSQLParser.IFNULL - 133)) | (1 << (PostgreSQLParser.INET_ATON - 133)) | (1 << (PostgreSQLParser.INET_NTOA - 133)) | (1 << (PostgreSQLParser.IS_FREE_LOCK - 133)) | (1 << (PostgreSQLParser.IS_USED_LOCK - 133)) | (1 << (PostgreSQLParser.LAST_INSERT_ID - 133)) | (1 << (PostgreSQLParser.LOAD_FILE - 133)) | (1 << (PostgreSQLParser.MAKE_SET - 133)) | (1 << (PostgreSQLParser.MASTER_POS_WAIT - 133)) | (1 << (PostgreSQLParser.MD5 - 133)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.NAME_CONST - 198)) | (1 << (PostgreSQLParser.OLD_PASSWORD - 198)) | (1 << (PostgreSQLParser.PASSWORD - 198)) | (1 << (PostgreSQLParser.RELEASE_LOCK - 198)) | (1 << (PostgreSQLParser.SCHEMA - 198)) | (1 << (PostgreSQLParser.SESSION_USER - 198)) | (1 << (PostgreSQLParser.SLEEP - 198)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (PostgreSQLParser.SYSTEM_USER - 274)) | (1 << (PostgreSQLParser.USER - 274)) | (1 << (PostgreSQLParser.UUID - 274)) | (1 << (PostgreSQLParser.VALUES - 274)) | (1 << (PostgreSQLParser.VERSION_SYM - 274)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDDATE(self):
            return self.getToken(PostgreSQLParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(PostgreSQLParser.ADDTIME, 0)

        def CONVERT_TZ(self):
            return self.getToken(PostgreSQLParser.CONVERT_TZ, 0)

        def CURDATE(self):
            return self.getToken(PostgreSQLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(PostgreSQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(PostgreSQLParser.DATE_ADD, 0)

        def DATE_FORMAT(self):
            return self.getToken(PostgreSQLParser.DATE_FORMAT, 0)

        def DATE_SUB(self):
            return self.getToken(PostgreSQLParser.DATE_SUB, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATEDIFF(self):
            return self.getToken(PostgreSQLParser.DATEDIFF, 0)

        def DAYNAME(self):
            return self.getToken(PostgreSQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(PostgreSQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(PostgreSQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(PostgreSQLParser.DAYOFYEAR, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FROM_DAYS(self):
            return self.getToken(PostgreSQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(PostgreSQLParser.FROM_UNIXTIME, 0)

        def GET_FORMAT(self):
            return self.getToken(PostgreSQLParser.GET_FORMAT, 0)

        def HOUR(self):
            return self.getToken(PostgreSQLParser.HOUR, 0)

        def LAST_DAY(self):
            return self.getToken(PostgreSQLParser.LAST_DAY, 0)

        def MAKEDATE(self):
            return self.getToken(PostgreSQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(PostgreSQLParser.MAKETIME, 0)

        def MICROSECOND(self):
            return self.getToken(PostgreSQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(PostgreSQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(PostgreSQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(PostgreSQLParser.MONTHNAME, 0)

        def NOW(self):
            return self.getToken(PostgreSQLParser.NOW, 0)

        def PERIOD_ADD(self):
            return self.getToken(PostgreSQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(PostgreSQLParser.PERIOD_DIFF, 0)

        def QUARTER(self):
            return self.getToken(PostgreSQLParser.QUARTER, 0)

        def SEC_TO_TIME(self):
            return self.getToken(PostgreSQLParser.SEC_TO_TIME, 0)

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def STR_TO_DATE(self):
            return self.getToken(PostgreSQLParser.STR_TO_DATE, 0)

        def SUBTIME(self):
            return self.getToken(PostgreSQLParser.SUBTIME, 0)

        def SYSDATE(self):
            return self.getToken(PostgreSQLParser.SYSDATE, 0)

        def TIME_FORMAT(self):
            return self.getToken(PostgreSQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(PostgreSQLParser.TIME_TO_SEC, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMEDIFF(self):
            return self.getToken(PostgreSQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(PostgreSQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(PostgreSQLParser.TIMESTAMPDIFF, 0)

        def TO_DAYS(self):
            return self.getToken(PostgreSQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(PostgreSQLParser.TO_SECONDS, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UNIX_TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(PostgreSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(PostgreSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UTC_TIMESTAMP, 0)

        def WEEK(self):
            return self.getToken(PostgreSQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(PostgreSQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(PostgreSQLParser.WEEKOFYEAR, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(PostgreSQLParser.YEARWEEK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = PostgreSQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ADDDATE) | (1 << PostgreSQLParser.ADDTIME) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURTIME))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (PostgreSQLParser.DATEDIFF - 65)) | (1 << (PostgreSQLParser.DATE_ADD - 65)) | (1 << (PostgreSQLParser.DATE_FORMAT - 65)) | (1 << (PostgreSQLParser.DATE_SUB - 65)) | (1 << (PostgreSQLParser.DATE_SYM - 65)) | (1 << (PostgreSQLParser.DAYNAME - 65)) | (1 << (PostgreSQLParser.DAYOFMONTH - 65)) | (1 << (PostgreSQLParser.DAYOFWEEK - 65)) | (1 << (PostgreSQLParser.DAYOFYEAR - 65)) | (1 << (PostgreSQLParser.EXTRACT - 65)) | (1 << (PostgreSQLParser.FROM_DAYS - 65)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 65)) | (1 << (PostgreSQLParser.GET_FORMAT - 65)) | (1 << (PostgreSQLParser.HOUR - 65)))) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.LAST_DAY - 156)) | (1 << (PostgreSQLParser.MAKEDATE - 156)) | (1 << (PostgreSQLParser.MAKETIME - 156)) | (1 << (PostgreSQLParser.MICROSECOND - 156)) | (1 << (PostgreSQLParser.MINUTE - 156)) | (1 << (PostgreSQLParser.MONTH - 156)) | (1 << (PostgreSQLParser.MONTHNAME - 156)) | (1 << (PostgreSQLParser.NOW - 156)) | (1 << (PostgreSQLParser.PERIOD_ADD - 156)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 156)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.QUARTER - 220)) | (1 << (PostgreSQLParser.SECOND - 220)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 220)) | (1 << (PostgreSQLParser.STR_TO_DATE - 220)) | (1 << (PostgreSQLParser.SUBTIME - 220)) | (1 << (PostgreSQLParser.SYSDATE - 220)) | (1 << (PostgreSQLParser.TIMEDIFF - 220)) | (1 << (PostgreSQLParser.TIMESTAMP - 220)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 220)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 220)) | (1 << (PostgreSQLParser.TIME_FORMAT - 220)) | (1 << (PostgreSQLParser.TIME_SYM - 220)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 220)))) != 0) or ((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & ((1 << (PostgreSQLParser.TO_DAYS - 286)) | (1 << (PostgreSQLParser.TO_SECONDS - 286)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 286)) | (1 << (PostgreSQLParser.UTC_DATE - 286)) | (1 << (PostgreSQLParser.UTC_TIME - 286)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 286)) | (1 << (PostgreSQLParser.WEEK - 286)) | (1 << (PostgreSQLParser.WEEKDAY - 286)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 286)) | (1 << (PostgreSQLParser.YEAR - 286)) | (1 << (PostgreSQLParser.YEARWEEK - 286)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(PostgreSQLParser.AREA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_functions" ):
                listener.enterPg_sphere_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_functions" ):
                listener.exitPg_sphere_functions(self)




    def pg_sphere_functions(self):

        localctx = PostgreSQLParser.Pg_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pg_sphere_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(PostgreSQLParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Other_functionsContext,0)


        def pg_sphere_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_functionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = PostgreSQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionList)
        try:
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.number_functions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.char_functions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 269
                self.time_functions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 270
                self.other_functions()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 271
                self.pg_sphere_functions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = PostgreSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_literal_value)
        try:
            self.state = 280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.TEXT_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 274
                self.string_literal()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.REAL_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.number_literal()
                pass
            elif token in [PostgreSQLParser.HEX_DIGIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 276
                self.hex_literal()
                pass
            elif token in [PostgreSQLParser.FALSE_SYM, PostgreSQLParser.TRUE_SYM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 277
                self.boolean_literal()
                pass
            elif token in [PostgreSQLParser.BIT_NUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 278
                self.bit_literal()
                pass
            elif token in [PostgreSQLParser.NULL_SYM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 279
                self.match(PostgreSQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_listContext,0)


        def HIGH_PRIORITY(self):
            return self.getToken(PostgreSQLParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(PostgreSQLParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(PostgreSQLParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(PostgreSQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(PostgreSQLParser.SQL_CALC_FOUND_ROWS, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(PostgreSQLParser.DISTINCTROW, 0)

        def SQL_CACHE_SYM(self):
            return self.getToken(PostgreSQLParser.SQL_CACHE_SYM, 0)

        def SQL_NO_CACHE_SYM(self):
            return self.getToken(PostgreSQLParser.SQL_NO_CACHE_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(PostgreSQLParser.LOCK, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def SHARE_SYM(self):
            return self.getToken(PostgreSQLParser.SHARE_SYM, 0)

        def MODE_SYM(self):
            return self.getToken(PostgreSQLParser.MODE_SYM, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = PostgreSQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(PostgreSQLParser.SELECT)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.DISTINCTROW:
                self.state = 283
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.DISTINCTROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.HIGH_PRIORITY:
                self.state = 286
                self.match(PostgreSQLParser.HIGH_PRIORITY)


            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.STRAIGHT_JOIN:
                self.state = 289
                self.match(PostgreSQLParser.STRAIGHT_JOIN)


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_SMALL_RESULT:
                self.state = 292
                self.match(PostgreSQLParser.SQL_SMALL_RESULT)


            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_BIG_RESULT:
                self.state = 295
                self.match(PostgreSQLParser.SQL_BIG_RESULT)


            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_BUFFER_RESULT:
                self.state = 298
                self.match(PostgreSQLParser.SQL_BUFFER_RESULT)


            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_CACHE_SYM or _la==PostgreSQLParser.SQL_NO_CACHE_SYM:
                self.state = 301
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.SQL_CACHE_SYM or _la==PostgreSQLParser.SQL_NO_CACHE_SYM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_CALC_FOUND_ROWS:
                self.state = 304
                self.match(PostgreSQLParser.SQL_CALC_FOUND_ROWS)


            self.state = 307
            self.select_list()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FROM:
                self.state = 308
                self.match(PostgreSQLParser.FROM)
                self.state = 309
                self.table_references()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PARTITION_SYM:
                    self.state = 310
                    self.partition_clause()


                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 313
                    self.where_clause()


                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GROUP_SYM:
                    self.state = 316
                    self.groupby_clause()


                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.HAVING:
                    self.state = 319
                    self.having_clause()




            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ORDER_SYM:
                self.state = 324
                self.orderby_clause()


            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.LIMIT or _la==PostgreSQLParser.INTEGER_NUM:
                self.state = 327
                self.limit_clause()


            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.FOR_SYM]:
                self.state = 330
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 331
                self.match(PostgreSQLParser.UPDATE)
                pass
            elif token in [PostgreSQLParser.LOCK]:
                self.state = 332
                self.match(PostgreSQLParser.LOCK)
                self.state = 333
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 334
                self.match(PostgreSQLParser.SHARE_SYM)
                self.state = 335
                self.match(PostgreSQLParser.MODE_SYM)
                pass
            elif token in [PostgreSQLParser.UNION_SYM, PostgreSQLParser.SEMI, PostgreSQLParser.RPAREN]:
                pass
            else:
                pass
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 338
                self.match(PostgreSQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = PostgreSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS_SYM:
                self.state = 341
                self.match(PostgreSQLParser.AS_SYM)


            self.state = 344
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(PostgreSQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = PostgreSQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bit_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.factor1()
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 347
                self.match(PostgreSQLParser.VERTBAR)
                self.state = 348
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_primaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relational_opContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = PostgreSQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.predicate()
                self.state = 355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 352
                    self.relational_op()
                    self.state = 353
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT_SYM:
                    self.state = 357
                    self.match(PostgreSQLParser.NOT_SYM)


                self.state = 360
                self.match(PostgreSQLParser.EXISTS)
                self.state = 361
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(PostgreSQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(PostgreSQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(PostgreSQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = PostgreSQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(PostgreSQLParser.CASE_SYM)
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WHEN_SYM]:
                self.state = 365
                self.case_when_statement1()
                pass
            elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BINARY, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.NEGATION, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                self.state = 366
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ELSE_SYM:
                self.state = 369
                self.match(PostgreSQLParser.ELSE_SYM)
                self.state = 370
                self.bit_expr()


            self.state = 373
            self.match(PostgreSQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = PostgreSQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 375
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 376
                self.expression()
                self.state = 377
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 378
                self.bit_expr()
                self.state = 382 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN_SYM):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = PostgreSQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.bit_expr()
            self.state = 390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 385
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 386
                self.bit_expr()
                self.state = 387
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 388
                self.bit_expr()
                self.state = 392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN_SYM):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PostgreSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(PostgreSQLParser.LPAREN)
            self.state = 395
            self.column_spec()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 396
                self.match(PostgreSQLParser.COMMA)
                self.state = 397
                self.column_spec()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PostgreSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def slice_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Slice_specContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = PostgreSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 407
                    self.schema_name()
                    self.state = 408
                    self.match(PostgreSQLParser.DOT)


                self.state = 412
                self.table_name()
                self.state = 413
                self.match(PostgreSQLParser.DOT)


            self.state = 417
            self.column_name()
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 418
                self.slice_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Displayed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = PostgreSQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.table_spec()
                self.state = 422
                self.match(PostgreSQLParser.DOT)
                self.state = 423
                self.match(PostgreSQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 425
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 426
                    self.sbit_expr()
                    pass


                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS_SYM or _la==PostgreSQLParser.ID:
                    self.state = 429
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor2Context,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.XOR)
            else:
                return self.getToken(PostgreSQLParser.XOR, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor1" ):
                listener.enterExp_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor1" ):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = PostgreSQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_exp_factor1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.exp_factor2()
            self.state = 439
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 435
                    self.match(PostgreSQLParser.XOR)
                    self.state = 436
                    self.exp_factor2() 
                self.state = 441
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor3Context,i)


        def AND_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND_SYM)
            else:
                return self.getToken(PostgreSQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor2" ):
                listener.enterExp_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor2" ):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = PostgreSQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.exp_factor3()
            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 443
                    self.match(PostgreSQLParser.AND_SYM)
                    self.state = 444
                    self.exp_factor3() 
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor4(self):
            return self.getTypedRuleContext(PostgreSQLParser.Exp_factor4Context,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor3" ):
                listener.enterExp_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor3" ):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = PostgreSQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exp_factor3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 450
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 453
            self.exp_factor4()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(PostgreSQLParser.IS_SYM, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor4" ):
                listener.enterExp_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor4" ):
                listener.exitExp_factor4(self)




    def exp_factor4(self):

        localctx = PostgreSQLParser.Exp_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exp_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.bool_primary()
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.match(PostgreSQLParser.IS_SYM)
                    self.state = 458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.NOT_SYM:
                        self.state = 457
                        self.match(PostgreSQLParser.NOT_SYM)


                    self.state = 464
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PostgreSQLParser.FALSE_SYM, PostgreSQLParser.TRUE_SYM]:
                        self.state = 460
                        self.boolean_literal()
                        pass
                    elif token in [PostgreSQLParser.NULL_SYM]:
                        self.state = 461
                        self.match(PostgreSQLParser.NULL_SYM)
                        pass
                    elif token in [PostgreSQLParser.DISTINCT]:
                        self.state = 462
                        self.match(PostgreSQLParser.DISTINCT)
                        self.state = 463
                        self.match(PostgreSQLParser.FROM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.state = 469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 468
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.ISNULL or _la==PostgreSQLParser.NOTNULL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR_SYM)
            else:
                return self.getToken(PostgreSQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PostgreSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.exp_factor1()
            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 474
                    self.match(PostgreSQLParser.OR_SYM)
                    self.state = 475
                    self.exp_factor1() 
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = PostgreSQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(PostgreSQLParser.LPAREN)
            self.state = 482
            self.expression()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 483
                self.match(PostgreSQLParser.COMMA)
                self.state = 484
                self.expression()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(PostgreSQLParser.BITAND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor1" ):
                listener.enterFactor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor1" ):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = PostgreSQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_factor1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.factor2()
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 493
                self.match(PostgreSQLParser.BITAND)
                self.state = 494
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(PostgreSQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(PostgreSQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor2" ):
                listener.enterFactor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor2" ):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = PostgreSQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.factor3()
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 498
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.SHIFT_LEFT or _la==PostgreSQLParser.SHIFT_RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 499
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor4Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor3" ):
                listener.enterFactor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor3" ):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = PostgreSQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.factor4()
            self.state = 507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 503
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 504
                    self.factor4() 
                self.state = 509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor5Context,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ASTERISK)
            else:
                return self.getToken(PostgreSQLParser.ASTERISK, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DIVIDE)
            else:
                return self.getToken(PostgreSQLParser.DIVIDE, i)

        def MOD_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MOD_SYM)
            else:
                return self.getToken(PostgreSQLParser.MOD_SYM, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.POWER_OP)
            else:
                return self.getToken(PostgreSQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor4" ):
                listener.enterFactor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor4" ):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = PostgreSQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.factor5()
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    _la = self._input.LA(1)
                    if not(((((_la - 334)) & ~0x3f) == 0 and ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.DIVIDE - 334)) | (1 << (PostgreSQLParser.MOD_SYM - 334)) | (1 << (PostgreSQLParser.ASTERISK - 334)) | (1 << (PostgreSQLParser.POWER_OP - 334)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 512
                    self.factor5() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor5" ):
                listener.enterFactor5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor5" ):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = PostgreSQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 518
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.BINARY or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & ((1 << (PostgreSQLParser.PLUS - 355)) | (1 << (PostgreSQLParser.MINUS - 355)) | (1 << (PostgreSQLParser.NEGATION - 355)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 521
            self.simple_expr()
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 522
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 523
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def CONVERT_SYM(self):
            return self.getToken(PostgreSQLParser.CONVERT_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_data_typeContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def transcoding_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transcoding_nameContext,0)


        def CAST_SYM(self):
            return self.getToken(PostgreSQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_functionsContext,0)


        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PostgreSQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.functionList()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 527
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ADDDATE) | (1 << PostgreSQLParser.ADDTIME) | (1 << PostgreSQLParser.AES_DECRYPT) | (1 << PostgreSQLParser.AES_ENCRYPT) | (1 << PostgreSQLParser.ASCII_SYM) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BENCHMARK) | (1 << PostgreSQLParser.BIN) | (1 << PostgreSQLParser.BINARY) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.CASE_SYM) | (1 << PostgreSQLParser.CAST_SYM) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CHAR) | (1 << PostgreSQLParser.CHARSET) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.COERCIBILITY) | (1 << PostgreSQLParser.COLLATION) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS) | (1 << PostgreSQLParser.CONNECTION_ID) | (1 << PostgreSQLParser.CONV) | (1 << PostgreSQLParser.CONVERT_SYM) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.COUNT) | (1 << PostgreSQLParser.CRC32) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURRENT_USER) | (1 << PostgreSQLParser.CURTIME))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.DATABASE - 64)) | (1 << (PostgreSQLParser.DATEDIFF - 64)) | (1 << (PostgreSQLParser.DATE_ADD - 64)) | (1 << (PostgreSQLParser.DATE_FORMAT - 64)) | (1 << (PostgreSQLParser.DATE_SUB - 64)) | (1 << (PostgreSQLParser.DATE_SYM - 64)) | (1 << (PostgreSQLParser.DAYNAME - 64)) | (1 << (PostgreSQLParser.DAYOFMONTH - 64)) | (1 << (PostgreSQLParser.DAYOFWEEK - 64)) | (1 << (PostgreSQLParser.DAYOFYEAR - 64)) | (1 << (PostgreSQLParser.DECODE - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.DEGREES - 64)) | (1 << (PostgreSQLParser.DES_DECRYPT - 64)) | (1 << (PostgreSQLParser.DES_ENCRYPT - 64)) | (1 << (PostgreSQLParser.ELT - 64)) | (1 << (PostgreSQLParser.ENCODE - 64)) | (1 << (PostgreSQLParser.ENCRYPT - 64)) | (1 << (PostgreSQLParser.EXISTS - 64)) | (1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.EXPORT_SET - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FALSE_SYM - 64)) | (1 << (PostgreSQLParser.FIELD - 64)) | (1 << (PostgreSQLParser.FIND_IN_SET - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.FORMAT - 64)) | (1 << (PostgreSQLParser.FOUND_ROWS - 64)) | (1 << (PostgreSQLParser.FROM_BASE64 - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)) | (1 << (PostgreSQLParser.GET_LOCK - 64)) | (1 << (PostgreSQLParser.GROUP_CONCAT - 64)) | (1 << (PostgreSQLParser.HEX - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PostgreSQLParser.HOUR - 128)) | (1 << (PostgreSQLParser.IF - 128)) | (1 << (PostgreSQLParser.IFNULL - 128)) | (1 << (PostgreSQLParser.INET_ATON - 128)) | (1 << (PostgreSQLParser.INET_NTOA - 128)) | (1 << (PostgreSQLParser.INSERT - 128)) | (1 << (PostgreSQLParser.INSTR - 128)) | (1 << (PostgreSQLParser.INTERVAL_SYM - 128)) | (1 << (PostgreSQLParser.IS_FREE_LOCK - 128)) | (1 << (PostgreSQLParser.IS_USED_LOCK - 128)) | (1 << (PostgreSQLParser.LAST_DAY - 128)) | (1 << (PostgreSQLParser.LAST_INSERT_ID - 128)) | (1 << (PostgreSQLParser.LEFT - 128)) | (1 << (PostgreSQLParser.LENGTH - 128)) | (1 << (PostgreSQLParser.LN - 128)) | (1 << (PostgreSQLParser.LOAD_FILE - 128)) | (1 << (PostgreSQLParser.LOCATE - 128)) | (1 << (PostgreSQLParser.LOG - 128)) | (1 << (PostgreSQLParser.LOWER - 128)) | (1 << (PostgreSQLParser.LPAD - 128)) | (1 << (PostgreSQLParser.LTRIM - 128)) | (1 << (PostgreSQLParser.MAKEDATE - 128)) | (1 << (PostgreSQLParser.MAKETIME - 128)) | (1 << (PostgreSQLParser.MAKE_SET - 128)) | (1 << (PostgreSQLParser.MASTER_POS_WAIT - 128)) | (1 << (PostgreSQLParser.MATCH - 128)) | (1 << (PostgreSQLParser.MAX_SYM - 128)) | (1 << (PostgreSQLParser.MD5 - 128)) | (1 << (PostgreSQLParser.MICROSECOND - 128)) | (1 << (PostgreSQLParser.MID - 128)) | (1 << (PostgreSQLParser.MINUTE - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PostgreSQLParser.MIN_SYM - 193)) | (1 << (PostgreSQLParser.MOD - 193)) | (1 << (PostgreSQLParser.MONTH - 193)) | (1 << (PostgreSQLParser.MONTHNAME - 193)) | (1 << (PostgreSQLParser.NAME_CONST - 193)) | (1 << (PostgreSQLParser.NOT_SYM - 193)) | (1 << (PostgreSQLParser.NOW - 193)) | (1 << (PostgreSQLParser.NULL_SYM - 193)) | (1 << (PostgreSQLParser.OCT - 193)) | (1 << (PostgreSQLParser.OLD_PASSWORD - 193)) | (1 << (PostgreSQLParser.ORD - 193)) | (1 << (PostgreSQLParser.PASSWORD - 193)) | (1 << (PostgreSQLParser.PERIOD_ADD - 193)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 193)) | (1 << (PostgreSQLParser.PI - 193)) | (1 << (PostgreSQLParser.POW - 193)) | (1 << (PostgreSQLParser.POWER - 193)) | (1 << (PostgreSQLParser.QUARTER - 193)) | (1 << (PostgreSQLParser.QUOTE - 193)) | (1 << (PostgreSQLParser.RADIANS - 193)) | (1 << (PostgreSQLParser.RAND - 193)) | (1 << (PostgreSQLParser.RELEASE_LOCK - 193)) | (1 << (PostgreSQLParser.REPEAT - 193)) | (1 << (PostgreSQLParser.REPLACE - 193)) | (1 << (PostgreSQLParser.REVERSE - 193)) | (1 << (PostgreSQLParser.RIGHT - 193)) | (1 << (PostgreSQLParser.ROUND - 193)) | (1 << (PostgreSQLParser.ROW_SYM - 193)) | (1 << (PostgreSQLParser.RPAD - 193)) | (1 << (PostgreSQLParser.RTRIM - 193)) | (1 << (PostgreSQLParser.SCHEMA - 193)) | (1 << (PostgreSQLParser.SECOND - 193)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 193)) | (1 << (PostgreSQLParser.SESSION_USER - 193)) | (1 << (PostgreSQLParser.SIGN - 193)) | (1 << (PostgreSQLParser.SIN - 193)) | (1 << (PostgreSQLParser.SLEEP - 193)) | (1 << (PostgreSQLParser.SOUNDEX - 193)) | (1 << (PostgreSQLParser.SPACE - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (PostgreSQLParser.SQRT - 259)) | (1 << (PostgreSQLParser.STD - 259)) | (1 << (PostgreSQLParser.STDDEV - 259)) | (1 << (PostgreSQLParser.STDDEV_POP - 259)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 259)) | (1 << (PostgreSQLParser.STRCMP - 259)) | (1 << (PostgreSQLParser.STR_TO_DATE - 259)) | (1 << (PostgreSQLParser.SUBSTRING - 259)) | (1 << (PostgreSQLParser.SUBSTRING_INDEX - 259)) | (1 << (PostgreSQLParser.SUBTIME - 259)) | (1 << (PostgreSQLParser.SUM - 259)) | (1 << (PostgreSQLParser.SYSDATE - 259)) | (1 << (PostgreSQLParser.SYSTEM_USER - 259)) | (1 << (PostgreSQLParser.TAN - 259)) | (1 << (PostgreSQLParser.TIMEDIFF - 259)) | (1 << (PostgreSQLParser.TIMESTAMP - 259)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 259)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 259)) | (1 << (PostgreSQLParser.TIME_FORMAT - 259)) | (1 << (PostgreSQLParser.TIME_SYM - 259)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 259)) | (1 << (PostgreSQLParser.TO_BASE64 - 259)) | (1 << (PostgreSQLParser.TO_DAYS - 259)) | (1 << (PostgreSQLParser.TO_SECONDS - 259)) | (1 << (PostgreSQLParser.TRIM - 259)) | (1 << (PostgreSQLParser.TRUE_SYM - 259)) | (1 << (PostgreSQLParser.TRUNCATE - 259)) | (1 << (PostgreSQLParser.UNHEX - 259)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 259)) | (1 << (PostgreSQLParser.UPPER - 259)) | (1 << (PostgreSQLParser.USER - 259)) | (1 << (PostgreSQLParser.UTC_DATE - 259)) | (1 << (PostgreSQLParser.UTC_TIME - 259)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 259)) | (1 << (PostgreSQLParser.UUID - 259)) | (1 << (PostgreSQLParser.VALUES - 259)) | (1 << (PostgreSQLParser.VARIANCE - 259)) | (1 << (PostgreSQLParser.VAR_POP - 259)) | (1 << (PostgreSQLParser.VAR_SAMP - 259)) | (1 << (PostgreSQLParser.VERSION_SYM - 259)) | (1 << (PostgreSQLParser.WEEK - 259)) | (1 << (PostgreSQLParser.WEEKDAY - 259)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 259)) | (1 << (PostgreSQLParser.WEIGHT_STRING - 259)) | (1 << (PostgreSQLParser.YEAR - 259)) | (1 << (PostgreSQLParser.YEARWEEK - 259)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (PostgreSQLParser.SPOINT - 324)) | (1 << (PostgreSQLParser.SCIRCLE - 324)) | (1 << (PostgreSQLParser.SLINE - 324)) | (1 << (PostgreSQLParser.SELLIPSE - 324)) | (1 << (PostgreSQLParser.SPOLY - 324)) | (1 << (PostgreSQLParser.SPATH - 324)) | (1 << (PostgreSQLParser.SBOX - 324)) | (1 << (PostgreSQLParser.STRANS - 324)) | (1 << (PostgreSQLParser.AREA - 324)) | (1 << (PostgreSQLParser.LPAREN - 324)) | (1 << (PostgreSQLParser.PLUS - 324)) | (1 << (PostgreSQLParser.MINUS - 324)) | (1 << (PostgreSQLParser.NEGATION - 324)) | (1 << (PostgreSQLParser.SLENGTH - 324)) | (1 << (PostgreSQLParser.SCENTER - 324)) | (1 << (PostgreSQLParser.INTEGER_NUM - 324)) | (1 << (PostgreSQLParser.HEX_DIGIT - 324)) | (1 << (PostgreSQLParser.BIT_NUM - 324)) | (1 << (PostgreSQLParser.REAL_NUMBER - 324)) | (1 << (PostgreSQLParser.TEXT_STRING - 324)) | (1 << (PostgreSQLParser.ID - 324)) | (1 << (PostgreSQLParser.CBRT - 324)) | (1 << (PostgreSQLParser.DIV - 324)))) != 0):
                        self.state = 528
                        self.expression()
                        self.state = 533
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==PostgreSQLParser.COMMA:
                            self.state = 529
                            self.match(PostgreSQLParser.COMMA)
                            self.state = 530
                            self.expression()
                            self.state = 535
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 538
                    self.match(PostgreSQLParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 542
                self.match(PostgreSQLParser.LPAREN)
                self.state = 543
                self.expression()
                self.state = 544
                self.match(PostgreSQLParser.COMMA)
                self.state = 545
                self.cast_data_type()
                self.state = 546
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 549
                self.match(PostgreSQLParser.LPAREN)
                self.state = 550
                self.expression()
                self.state = 551
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 552
                self.transcoding_name()
                self.state = 553
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 555
                self.match(PostgreSQLParser.CAST_SYM)
                self.state = 556
                self.match(PostgreSQLParser.LPAREN)
                self.state = 557
                self.expression()
                self.state = 558
                self.match(PostgreSQLParser.AS_SYM)
                self.state = 559
                self.cast_data_type()
                self.state = 560
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 562
                self.group_functions()
                self.state = 563
                self.match(PostgreSQLParser.LPAREN)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.ASTERISK:
                    self.state = 564
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.ASTERISK):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ADDDATE) | (1 << PostgreSQLParser.ADDTIME) | (1 << PostgreSQLParser.AES_DECRYPT) | (1 << PostgreSQLParser.AES_ENCRYPT) | (1 << PostgreSQLParser.ASCII_SYM) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BENCHMARK) | (1 << PostgreSQLParser.BIN) | (1 << PostgreSQLParser.BINARY) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.CASE_SYM) | (1 << PostgreSQLParser.CAST_SYM) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CHAR) | (1 << PostgreSQLParser.CHARSET) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.COERCIBILITY) | (1 << PostgreSQLParser.COLLATION) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS) | (1 << PostgreSQLParser.CONNECTION_ID) | (1 << PostgreSQLParser.CONV) | (1 << PostgreSQLParser.CONVERT_SYM) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.COUNT) | (1 << PostgreSQLParser.CRC32) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURRENT_USER) | (1 << PostgreSQLParser.CURTIME))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.DATABASE - 64)) | (1 << (PostgreSQLParser.DATEDIFF - 64)) | (1 << (PostgreSQLParser.DATE_ADD - 64)) | (1 << (PostgreSQLParser.DATE_FORMAT - 64)) | (1 << (PostgreSQLParser.DATE_SUB - 64)) | (1 << (PostgreSQLParser.DATE_SYM - 64)) | (1 << (PostgreSQLParser.DAYNAME - 64)) | (1 << (PostgreSQLParser.DAYOFMONTH - 64)) | (1 << (PostgreSQLParser.DAYOFWEEK - 64)) | (1 << (PostgreSQLParser.DAYOFYEAR - 64)) | (1 << (PostgreSQLParser.DECODE - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.DEGREES - 64)) | (1 << (PostgreSQLParser.DES_DECRYPT - 64)) | (1 << (PostgreSQLParser.DES_ENCRYPT - 64)) | (1 << (PostgreSQLParser.ELT - 64)) | (1 << (PostgreSQLParser.ENCODE - 64)) | (1 << (PostgreSQLParser.ENCRYPT - 64)) | (1 << (PostgreSQLParser.EXISTS - 64)) | (1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.EXPORT_SET - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FALSE_SYM - 64)) | (1 << (PostgreSQLParser.FIELD - 64)) | (1 << (PostgreSQLParser.FIND_IN_SET - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.FORMAT - 64)) | (1 << (PostgreSQLParser.FOUND_ROWS - 64)) | (1 << (PostgreSQLParser.FROM_BASE64 - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)) | (1 << (PostgreSQLParser.GET_LOCK - 64)) | (1 << (PostgreSQLParser.GROUP_CONCAT - 64)) | (1 << (PostgreSQLParser.HEX - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PostgreSQLParser.HOUR - 128)) | (1 << (PostgreSQLParser.IF - 128)) | (1 << (PostgreSQLParser.IFNULL - 128)) | (1 << (PostgreSQLParser.INET_ATON - 128)) | (1 << (PostgreSQLParser.INET_NTOA - 128)) | (1 << (PostgreSQLParser.INSERT - 128)) | (1 << (PostgreSQLParser.INSTR - 128)) | (1 << (PostgreSQLParser.INTERVAL_SYM - 128)) | (1 << (PostgreSQLParser.IS_FREE_LOCK - 128)) | (1 << (PostgreSQLParser.IS_USED_LOCK - 128)) | (1 << (PostgreSQLParser.LAST_DAY - 128)) | (1 << (PostgreSQLParser.LAST_INSERT_ID - 128)) | (1 << (PostgreSQLParser.LEFT - 128)) | (1 << (PostgreSQLParser.LENGTH - 128)) | (1 << (PostgreSQLParser.LN - 128)) | (1 << (PostgreSQLParser.LOAD_FILE - 128)) | (1 << (PostgreSQLParser.LOCATE - 128)) | (1 << (PostgreSQLParser.LOG - 128)) | (1 << (PostgreSQLParser.LOWER - 128)) | (1 << (PostgreSQLParser.LPAD - 128)) | (1 << (PostgreSQLParser.LTRIM - 128)) | (1 << (PostgreSQLParser.MAKEDATE - 128)) | (1 << (PostgreSQLParser.MAKETIME - 128)) | (1 << (PostgreSQLParser.MAKE_SET - 128)) | (1 << (PostgreSQLParser.MASTER_POS_WAIT - 128)) | (1 << (PostgreSQLParser.MATCH - 128)) | (1 << (PostgreSQLParser.MAX_SYM - 128)) | (1 << (PostgreSQLParser.MD5 - 128)) | (1 << (PostgreSQLParser.MICROSECOND - 128)) | (1 << (PostgreSQLParser.MID - 128)) | (1 << (PostgreSQLParser.MINUTE - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PostgreSQLParser.MIN_SYM - 193)) | (1 << (PostgreSQLParser.MOD - 193)) | (1 << (PostgreSQLParser.MONTH - 193)) | (1 << (PostgreSQLParser.MONTHNAME - 193)) | (1 << (PostgreSQLParser.NAME_CONST - 193)) | (1 << (PostgreSQLParser.NOW - 193)) | (1 << (PostgreSQLParser.NULL_SYM - 193)) | (1 << (PostgreSQLParser.OCT - 193)) | (1 << (PostgreSQLParser.OLD_PASSWORD - 193)) | (1 << (PostgreSQLParser.ORD - 193)) | (1 << (PostgreSQLParser.PASSWORD - 193)) | (1 << (PostgreSQLParser.PERIOD_ADD - 193)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 193)) | (1 << (PostgreSQLParser.PI - 193)) | (1 << (PostgreSQLParser.POW - 193)) | (1 << (PostgreSQLParser.POWER - 193)) | (1 << (PostgreSQLParser.QUARTER - 193)) | (1 << (PostgreSQLParser.QUOTE - 193)) | (1 << (PostgreSQLParser.RADIANS - 193)) | (1 << (PostgreSQLParser.RAND - 193)) | (1 << (PostgreSQLParser.RELEASE_LOCK - 193)) | (1 << (PostgreSQLParser.REPEAT - 193)) | (1 << (PostgreSQLParser.REPLACE - 193)) | (1 << (PostgreSQLParser.REVERSE - 193)) | (1 << (PostgreSQLParser.RIGHT - 193)) | (1 << (PostgreSQLParser.ROUND - 193)) | (1 << (PostgreSQLParser.ROW_SYM - 193)) | (1 << (PostgreSQLParser.RPAD - 193)) | (1 << (PostgreSQLParser.RTRIM - 193)) | (1 << (PostgreSQLParser.SCHEMA - 193)) | (1 << (PostgreSQLParser.SECOND - 193)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 193)) | (1 << (PostgreSQLParser.SESSION_USER - 193)) | (1 << (PostgreSQLParser.SIGN - 193)) | (1 << (PostgreSQLParser.SIN - 193)) | (1 << (PostgreSQLParser.SLEEP - 193)) | (1 << (PostgreSQLParser.SOUNDEX - 193)) | (1 << (PostgreSQLParser.SPACE - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (PostgreSQLParser.SQRT - 259)) | (1 << (PostgreSQLParser.STD - 259)) | (1 << (PostgreSQLParser.STDDEV - 259)) | (1 << (PostgreSQLParser.STDDEV_POP - 259)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 259)) | (1 << (PostgreSQLParser.STRCMP - 259)) | (1 << (PostgreSQLParser.STR_TO_DATE - 259)) | (1 << (PostgreSQLParser.SUBSTRING - 259)) | (1 << (PostgreSQLParser.SUBSTRING_INDEX - 259)) | (1 << (PostgreSQLParser.SUBTIME - 259)) | (1 << (PostgreSQLParser.SUM - 259)) | (1 << (PostgreSQLParser.SYSDATE - 259)) | (1 << (PostgreSQLParser.SYSTEM_USER - 259)) | (1 << (PostgreSQLParser.TAN - 259)) | (1 << (PostgreSQLParser.TIMEDIFF - 259)) | (1 << (PostgreSQLParser.TIMESTAMP - 259)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 259)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 259)) | (1 << (PostgreSQLParser.TIME_FORMAT - 259)) | (1 << (PostgreSQLParser.TIME_SYM - 259)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 259)) | (1 << (PostgreSQLParser.TO_BASE64 - 259)) | (1 << (PostgreSQLParser.TO_DAYS - 259)) | (1 << (PostgreSQLParser.TO_SECONDS - 259)) | (1 << (PostgreSQLParser.TRIM - 259)) | (1 << (PostgreSQLParser.TRUE_SYM - 259)) | (1 << (PostgreSQLParser.TRUNCATE - 259)) | (1 << (PostgreSQLParser.UNHEX - 259)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 259)) | (1 << (PostgreSQLParser.UPPER - 259)) | (1 << (PostgreSQLParser.USER - 259)) | (1 << (PostgreSQLParser.UTC_DATE - 259)) | (1 << (PostgreSQLParser.UTC_TIME - 259)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 259)) | (1 << (PostgreSQLParser.UUID - 259)) | (1 << (PostgreSQLParser.VALUES - 259)) | (1 << (PostgreSQLParser.VARIANCE - 259)) | (1 << (PostgreSQLParser.VAR_POP - 259)) | (1 << (PostgreSQLParser.VAR_SAMP - 259)) | (1 << (PostgreSQLParser.VERSION_SYM - 259)) | (1 << (PostgreSQLParser.WEEK - 259)) | (1 << (PostgreSQLParser.WEEKDAY - 259)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 259)) | (1 << (PostgreSQLParser.WEIGHT_STRING - 259)) | (1 << (PostgreSQLParser.YEAR - 259)) | (1 << (PostgreSQLParser.YEARWEEK - 259)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (PostgreSQLParser.SPOINT - 324)) | (1 << (PostgreSQLParser.SCIRCLE - 324)) | (1 << (PostgreSQLParser.SLINE - 324)) | (1 << (PostgreSQLParser.SELLIPSE - 324)) | (1 << (PostgreSQLParser.SPOLY - 324)) | (1 << (PostgreSQLParser.SPATH - 324)) | (1 << (PostgreSQLParser.SBOX - 324)) | (1 << (PostgreSQLParser.STRANS - 324)) | (1 << (PostgreSQLParser.AREA - 324)) | (1 << (PostgreSQLParser.LPAREN - 324)) | (1 << (PostgreSQLParser.PLUS - 324)) | (1 << (PostgreSQLParser.MINUS - 324)) | (1 << (PostgreSQLParser.NEGATION - 324)) | (1 << (PostgreSQLParser.SLENGTH - 324)) | (1 << (PostgreSQLParser.SCENTER - 324)) | (1 << (PostgreSQLParser.INTEGER_NUM - 324)) | (1 << (PostgreSQLParser.HEX_DIGIT - 324)) | (1 << (PostgreSQLParser.BIT_NUM - 324)) | (1 << (PostgreSQLParser.REAL_NUMBER - 324)) | (1 << (PostgreSQLParser.TEXT_STRING - 324)) | (1 << (PostgreSQLParser.ID - 324)) | (1 << (PostgreSQLParser.CBRT - 324)) | (1 << (PostgreSQLParser.DIV - 324)))) != 0):
                    self.state = 569
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 567
                        self.bit_expr()
                        pass

                    elif la_ == 2:
                        self.state = 568
                        self.sbit_expr()
                        pass




                self.state = 573
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(PostgreSQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = PostgreSQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(PostgreSQLParser.GROUP_SYM)
            self.state = 578
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 579
            self.groupby_item()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 580
                self.match(PostgreSQLParser.COMMA)
                self.state = 581
                self.groupby_item()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 587
                self.match(PostgreSQLParser.WITH)
                self.state = 588
                self.match(PostgreSQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = PostgreSQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 591
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 592
                self.match(PostgreSQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 593
                self.bit_expr()
                pass


            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 596
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(PostgreSQLParser.HAVING)
            self.state = 600
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(PostgreSQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(PostgreSQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(PostgreSQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = PostgreSQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.USE_SYM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.match(PostgreSQLParser.USE_SYM)
                self.state = 603
                self.index_options()
                self.state = 604
                self.match(PostgreSQLParser.LPAREN)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ID:
                    self.state = 605
                    self.index_list()


                self.state = 608
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.IGNORE_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(PostgreSQLParser.IGNORE_SYM)
                self.state = 611
                self.index_options()
                self.state = 612
                self.match(PostgreSQLParser.LPAREN)
                self.state = 613
                self.index_list()
                self.state = 614
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.FORCE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 616
                self.match(PostgreSQLParser.FORCE_SYM)
                self.state = 617
                self.index_options()
                self.state = 618
                self.match(PostgreSQLParser.LPAREN)
                self.state = 619
                self.index_list()
                self.state = 620
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hint_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = PostgreSQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.index_hint()
            self.state = 629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 625
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 626
                    self.index_hint() 
                self.state = 631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PostgreSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = PostgreSQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.index_name()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 635
                self.match(PostgreSQLParser.COMMA)
                self.state = 636
                self.index_name()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(PostgreSQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(PostgreSQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = PostgreSQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.INDEX_SYM or _la==PostgreSQLParser.KEY_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR_SYM:
                self.state = 643
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.JOIN_SYM]:
                    self.state = 644
                    self.match(PostgreSQLParser.JOIN_SYM)
                    pass
                elif token in [PostgreSQLParser.ORDER_SYM]:
                    self.state = 645
                    self.match(PostgreSQLParser.ORDER_SYM)
                    self.state = 646
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                elif token in [PostgreSQLParser.GROUP_SYM]:
                    self.state = 647
                    self.match(PostgreSQLParser.GROUP_SYM)
                    self.state = 648
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def interval_unit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_unitContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = PostgreSQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(PostgreSQLParser.INTERVAL_SYM)
            self.state = 654
            self.expression()
            self.state = 655
            self.interval_unit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = PostgreSQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_join_condition)
        try:
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.match(PostgreSQLParser.ON)
                self.state = 658
                self.expression()
                pass
            elif token in [PostgreSQLParser.USING_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 660
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_countContext,0)


        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_limit_clause)
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self.match(PostgreSQLParser.LIMIT)

                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 664
                    self.offset()
                    self.state = 665
                    self.match(PostgreSQLParser.COMMA)


                self.state = 669
                self.row_count()
                pass
            elif token in [PostgreSQLParser.INTEGER_NUM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.row_count()
                self.state = 671
                self.match(PostgreSQLParser.OFFSET_SYM)
                self.state = 672
                self.offset()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_against_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def AGAINST(self):
            return self.getToken(PostgreSQLParser.AGAINST, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def search_modifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.Search_modifierContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_match_against_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_against_statement" ):
                listener.enterMatch_against_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_against_statement" ):
                listener.exitMatch_against_statement(self)




    def match_against_statement(self):

        localctx = PostgreSQLParser.Match_against_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_match_against_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(PostgreSQLParser.MATCH)

            self.state = 677
            self.column_spec()
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 678
                self.match(PostgreSQLParser.COMMA)
                self.state = 679
                self.column_spec()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 685
            self.match(PostgreSQLParser.AGAINST)

            self.state = 686
            self.expression()
            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 687
                self.search_modifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = PostgreSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = PostgreSQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = PostgreSQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(PostgreSQLParser.ORDER_SYM)
            self.state = 695
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 696
            self.orderby_item()
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 697
                self.match(PostgreSQLParser.COMMA)
                self.state = 698
                self.orderby_item()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,0)


        def NULLS_SYM(self):
            return self.getToken(PostgreSQLParser.NULLS_SYM, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def FIRST_SYM(self):
            return self.getToken(PostgreSQLParser.FIRST_SYM, 0)

        def LAST_SYM(self):
            return self.getToken(PostgreSQLParser.LAST_SYM, 0)

        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = PostgreSQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.groupby_item()
                self.state = 712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC:
                        self.state = 705
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 2:
                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.NULLS_SYM:
                        self.state = 708
                        self.match(PostgreSQLParser.NULLS_SYM)
                        self.state = 709
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.FIRST_SYM or _la==PostgreSQLParser.LAST_SYM):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.groupby_item()
                self.state = 715
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 716
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.GTH or _la==PostgreSQLParser.LTH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(PostgreSQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = PostgreSQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(PostgreSQLParser.PARTITION_SYM)
            self.state = 721
            self.match(PostgreSQLParser.LPAREN)
            self.state = 722
            self.partition_names()
            self.state = 723
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PostgreSQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = PostgreSQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.partition_name()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 728
                self.match(PostgreSQLParser.COMMA)
                self.state = 729
                self.partition_name()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_fac1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(PostgreSQLParser.REGEXP, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(PostgreSQLParser.ESCAPE_SYM, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac1" ):
                listener.enterBit_fac1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac1" ):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = PostgreSQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOT_SYM:
                self.state = 735
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.IN_SYM]:
                self.state = 738
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 740
                    self.expression_list()
                    pass


                pass
            elif token in [PostgreSQLParser.LIKE_SYM]:
                self.state = 743
                self.match(PostgreSQLParser.LIKE_SYM)
                self.state = 744
                self.simple_expr()
                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 745
                    self.match(PostgreSQLParser.ESCAPE_SYM)
                    self.state = 746
                    self.simple_expr()


                pass
            elif token in [PostgreSQLParser.REGEXP]:
                self.state = 749
                self.match(PostgreSQLParser.REGEXP)
                self.state = 752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 750
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 751
                    self.sbit_expr()
                    pass


                pass
            elif token in [PostgreSQLParser.BETWEEN]:
                self.state = 754
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SYMMETRIC:
                    self.state = 755
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 759
                    self.sbit_expr()
                    pass


                self.state = 762
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 763
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_fac2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(PostgreSQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac2" ):
                listener.enterBit_fac2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac2" ):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = PostgreSQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_bit_fac2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(PostgreSQLParser.SOUNDS_SYM)
            self.state = 768
            self.match(PostgreSQLParser.LIKE_SYM)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 769
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 770
                self.sbit_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = PostgreSQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 773
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 774
                self.sbit_expr()
                pass


            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 777
                self.bit_fac1()

            elif la_ == 2:
                self.state = 778
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = PostgreSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.select_statement()
            self.state = 782
            self.match(PostgreSQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PostgreSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = PostgreSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BINARY, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.SPOINT, PostgreSQLParser.SCIRCLE, PostgreSQLParser.SLINE, PostgreSQLParser.SELLIPSE, PostgreSQLParser.SPOLY, PostgreSQLParser.SPATH, PostgreSQLParser.SBOX, PostgreSQLParser.STRANS, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.NEGATION, PostgreSQLParser.SLENGTH, PostgreSQLParser.SCENTER, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.displayed_column()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PostgreSQLParser.COMMA:
                    self.state = 787
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 788
                    self.displayed_column()
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PostgreSQLParser.ASTERISK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.match(PostgreSQLParser.ASTERISK)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 795
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 796
                    self.displayed_column()
                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PostgreSQLParser.COMMA:
                        self.state = 797
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 798
                        self.displayed_column()
                        self.state = 803
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION_SYM)
            else:
                return self.getToken(PostgreSQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALL)
            else:
                return self.getToken(PostgreSQLParser.ALL, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PostgreSQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.select_expression()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.UNION_SYM:
                self.state = 809
                self.match(PostgreSQLParser.UNION_SYM)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL:
                    self.state = 810
                    self.match(PostgreSQLParser.ALL)


                self.state = 813
                self.select_expression()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(PostgreSQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def match_against_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Match_against_statementContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = PostgreSQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_simple_expr)
        try:
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 821
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 822
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 823
                self.match(PostgreSQLParser.ROW_SYM)
                self.state = 824
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 825
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 826
                self.match(PostgreSQLParser.EXISTS)
                self.state = 827
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 828
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 829
                self.match_against_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 830
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LBRACK)
            else:
                return self.getToken(PostgreSQLParser.LBRACK, i)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RBRACK)
            else:
                return self.getToken(PostgreSQLParser.RBRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COLON)
            else:
                return self.getToken(PostgreSQLParser.COLON, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_spec" ):
                listener.enterSlice_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_spec" ):
                listener.exitSlice_spec(self)




    def slice_spec(self):

        localctx = PostgreSQLParser.Slice_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_slice_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.LBRACK:
                self.state = 833
                self.match(PostgreSQLParser.LBRACK)
                self.state = 834
                self.match(PostgreSQLParser.INTEGER_NUM)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLON:
                    self.state = 835
                    self.match(PostgreSQLParser.COLON)
                    self.state = 836
                    self.match(PostgreSQLParser.INTEGER_NUM)


                self.state = 839
                self.match(PostgreSQLParser.RBRACK)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PostgreSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(PostgreSQLParser.LPAREN)
            self.state = 846
            self.select_statement()
            self.state = 847
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_atomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(PostgreSQLParser.OJ_SYM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_atom" ):
                listener.enterTable_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_atom" ):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = PostgreSQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self.table_spec()
                self.state = 851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 850
                    self.partition_clause()


                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS_SYM or _la==PostgreSQLParser.ID:
                    self.state = 853
                    self.alias()


                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FORCE_SYM or _la==PostgreSQLParser.IGNORE_SYM or _la==PostgreSQLParser.USE_SYM:
                    self.state = 856
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.subquery()
                self.state = 860
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 862
                self.match(PostgreSQLParser.LPAREN)
                self.state = 863
                self.table_references()
                self.state = 864
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 866
                self.match(PostgreSQLParser.OJ_SYM)
                self.state = 867
                self.table_reference()
                self.state = 868
                self.match(PostgreSQLParser.LEFT)
                self.state = 869
                self.match(PostgreSQLParser.OUTER)
                self.state = 870
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 871
                self.table_reference()
                self.state = 872
                self.match(PostgreSQLParser.ON)
                self.state = 873
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = PostgreSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INNER_SYM)
            else:
                return self.getToken(PostgreSQLParser.INNER_SYM, i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor1" ):
                listener.enterTable_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor1" ):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = PostgreSQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.table_factor2()
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.CROSS or _la==PostgreSQLParser.INNER_SYM or _la==PostgreSQLParser.JOIN_SYM:
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CROSS or _la==PostgreSQLParser.INNER_SYM:
                    self.state = 880
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.CROSS or _la==PostgreSQLParser.INNER_SYM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 883
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 884
                self.table_atom()
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.join_condition()


                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor2" ):
                listener.enterTable_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor2" ):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = PostgreSQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.table_factor3()
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.STRAIGHT_JOIN:
                self.state = 894
                self.match(PostgreSQLParser.STRAIGHT_JOIN)
                self.state = 895
                self.table_atom()
                self.state = 898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 896
                    self.match(PostgreSQLParser.ON)
                    self.state = 897
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def OUTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OUTER)
            else:
                return self.getToken(PostgreSQLParser.OUTER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor3" ):
                listener.enterTable_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor3" ):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = PostgreSQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.table_factor4()
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 903
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OUTER:
                        self.state = 904
                        self.match(PostgreSQLParser.OUTER)


                    self.state = 907
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 908
                    self.table_factor4()
                    self.state = 909
                    self.join_condition() 
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor4" ):
                listener.enterTable_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor4" ):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = PostgreSQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.table_atom()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NATURAL:
                self.state = 917
                self.match(PostgreSQLParser.NATURAL)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT:
                    self.state = 918
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OUTER:
                        self.state = 919
                        self.match(PostgreSQLParser.OUTER)




                self.state = 924
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 925
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor1Context,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def values_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = PostgreSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.table_factor1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.match(PostgreSQLParser.LPAREN)
                self.state = 930
                self.values_list()
                self.state = 931
                self.match(PostgreSQLParser.RPAREN)
                self.state = 933
                self.alias()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 934
                    self.column_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = PostgreSQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.table_reference()
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 940
                self.match(PostgreSQLParser.COMMA)
                self.state = 941
                self.table_reference()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = PostgreSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 947
                self.schema_name()
                self.state = 948
                self.match(PostgreSQLParser.DOT)


            self.state = 952
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_list" ):
                listener.enterValues_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_list" ):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = PostgreSQLParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(PostgreSQLParser.VALUES)

            self.state = 955
            self.expression_list()
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 956
                self.match(PostgreSQLParser.COMMA)
                self.state = 957
                self.expression_list()
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(PostgreSQLParser.WHERE)
            self.state = 964
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCONTAINS(self):
            return self.getToken(PostgreSQLParser.SCONTAINS, 0)

        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def SNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS, 0)

        def SNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS2, 0)

        def SLEFTNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS, 0)

        def SLEFTNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS2, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def SNOTOVERLAP(self):
            return self.getToken(PostgreSQLParser.SNOTOVERLAP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_op" ):
                listener.enterPg_sphere_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_op" ):
                listener.exitPg_sphere_op(self)




    def pg_sphere_op(self):

        localctx = PostgreSQLParser.Pg_sphere_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pg_sphere_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            _la = self._input.LA(1)
            if not(((((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & ((1 << (PostgreSQLParser.AND_SYM - 337)) | (1 << (PostgreSQLParser.NEGATION - 337)) | (1 << (PostgreSQLParser.SCONTAINS - 337)) | (1 << (PostgreSQLParser.SCONTAINS2 - 337)) | (1 << (PostgreSQLParser.SLEFTCONTAINS2 - 337)) | (1 << (PostgreSQLParser.SNOTCONTAINS - 337)) | (1 << (PostgreSQLParser.SNOTCONTAINS2 - 337)) | (1 << (PostgreSQLParser.SLEFTNOTCONTAINS - 337)) | (1 << (PostgreSQLParser.SLEFTNOTCONTAINS2 - 337)) | (1 << (PostgreSQLParser.SNOTOVERLAP - 337)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sbit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pg_sphere_object(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Pg_sphere_objectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_objectContext,i)


        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def pg_sphere_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_opContext,0)


        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def SCROSS(self):
            return self.getToken(PostgreSQLParser.SCROSS, 0)

        def SDISTANCE(self):
            return self.getToken(PostgreSQLParser.SDISTANCE, 0)

        def scircle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ScircleContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,i)


        def SLENGTH(self):
            return self.getToken(PostgreSQLParser.SLENGTH, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def SCENTER(self):
            return self.getToken(PostgreSQLParser.SCENTER, 0)

        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def strans(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StransContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StransContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbit_expr" ):
                listener.enterSbit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbit_expr" ):
                listener.exitSbit_expr(self)




    def sbit_expr(self):

        localctx = PostgreSQLParser.Sbit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_sbit_expr)
        self._la = 0 # Token type
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.SCIRCLE, PostgreSQLParser.SLINE, PostgreSQLParser.SELLIPSE, PostgreSQLParser.SPOLY, PostgreSQLParser.SPATH, PostgreSQLParser.SBOX, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 968
                    self.pg_sphere_object()
                    pass
                elif token in [PostgreSQLParser.SPOINT]:
                    self.state = 969
                    self.spoint()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 972
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 973
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 976
                self.pg_sphere_op()
                self.state = 977
                self.pg_sphere_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.pg_sphere_object()
                self.state = 980
                self.match(PostgreSQLParser.EQ)
                self.state = 981
                self.pg_sphere_object()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 983
                self.pg_sphere_object()
                self.state = 984
                self.pg_sphere_op()
                self.state = 985
                self.pg_sphere_object()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 987
                    self.sline()
                    pass

                elif la_ == 2:
                    self.state = 988
                    self.simple_expr()
                    self.state = 989
                    self.match(PostgreSQLParser.SCROSS)
                    self.state = 990
                    self.sline()
                    pass

                elif la_ == 3:
                    self.state = 992
                    self.simple_expr()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 998
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 995
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 996
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 997
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1000
                self.match(PostgreSQLParser.SDISTANCE)
                self.state = 1004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 1001
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1002
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 1003
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1006
                self.match(PostgreSQLParser.SLENGTH)
                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1007
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.SBOX]:
                    self.state = 1008
                    self.sbox()
                    pass
                elif token in [PostgreSQLParser.SPOLY]:
                    self.state = 1009
                    self.spoly()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 1010
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1013
                self.match(PostgreSQLParser.SCENTER)
                self.state = 1017
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1014
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.SELLIPSE]:
                    self.state = 1015
                    self.sellipse()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 1016
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1019
                self.match(PostgreSQLParser.MINUS)
                self.state = 1023
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SLINE]:
                    self.state = 1020
                    self.sline()
                    pass
                elif token in [PostgreSQLParser.SPATH]:
                    self.state = 1021
                    self.spath()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                    self.state = 1022
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1032
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1025
                    self.spoint()

                elif la_ == 2:
                    self.state = 1026
                    self.scircle()

                elif la_ == 3:
                    self.state = 1027
                    self.sline()

                elif la_ == 4:
                    self.state = 1028
                    self.sellipse()

                elif la_ == 5:
                    self.state = 1029
                    self.spoly()

                elif la_ == 6:
                    self.state = 1030
                    self.spath()

                elif la_ == 7:
                    self.state = 1031
                    self.simple_expr()


                self.state = 1038 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1035
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                            self.state = 1034
                            _la = self._input.LA(1)
                            if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1037
                        self.strans()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1040 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpointContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT(self):
            return self.getToken(PostgreSQLParser.SPOINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint" ):
                listener.enterSpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint" ):
                listener.exitSpoint(self)




    def spoint(self):

        localctx = PostgreSQLParser.SpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_spoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(PostgreSQLParser.SPOINT)
            self.state = 1045
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1046
            self.bit_expr()
            self.state = 1047
            self.match(PostgreSQLParser.COMMA)
            self.state = 1048
            self.bit_expr()
            self.state = 1049
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScircleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE(self):
            return self.getToken(PostgreSQLParser.SCIRCLE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle" ):
                listener.enterScircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle" ):
                listener.exitScircle(self)




    def scircle(self):

        localctx = PostgreSQLParser.ScircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_scircle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(PostgreSQLParser.SCIRCLE)
            self.state = 1052
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1053
            self.spoint()
            self.state = 1054
            self.match(PostgreSQLParser.COMMA)
            self.state = 1055
            self.bit_expr()
            self.state = 1056
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLINE(self):
            return self.getToken(PostgreSQLParser.SLINE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def strans(self):
            return self.getTypedRuleContext(PostgreSQLParser.StransContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSline" ):
                listener.enterSline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSline" ):
                listener.exitSline(self)




    def sline(self):

        localctx = PostgreSQLParser.SlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sline)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.match(PostgreSQLParser.SLINE)
                self.state = 1059
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1060
                self.spoint()
                self.state = 1061
                self.match(PostgreSQLParser.COMMA)
                self.state = 1062
                self.spoint()
                self.state = 1063
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.match(PostgreSQLParser.SLINE)
                self.state = 1066
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1067
                self.strans()
                self.state = 1068
                self.match(PostgreSQLParser.COMMA)
                self.state = 1069
                self.bit_expr()
                self.state = 1070
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SellipseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELLIPSE(self):
            return self.getToken(PostgreSQLParser.SELLIPSE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sellipse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSellipse" ):
                listener.enterSellipse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSellipse" ):
                listener.exitSellipse(self)




    def sellipse(self):

        localctx = PostgreSQLParser.SellipseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_sellipse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(PostgreSQLParser.SELLIPSE)
            self.state = 1075
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1076
            self.spoint()
            self.state = 1077
            self.match(PostgreSQLParser.COMMA)
            self.state = 1078
            self.bit_expr()
            self.state = 1079
            self.match(PostgreSQLParser.COMMA)
            self.state = 1080
            self.bit_expr()
            self.state = 1081
            self.match(PostgreSQLParser.COMMA)
            self.state = 1082
            self.bit_expr()
            self.state = 1083
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SboxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX(self):
            return self.getToken(PostgreSQLParser.SBOX, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox" ):
                listener.enterSbox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox" ):
                listener.exitSbox(self)




    def sbox(self):

        localctx = PostgreSQLParser.SboxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sbox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(PostgreSQLParser.SBOX)
            self.state = 1086
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1087
            self.spoint()
            self.state = 1088
            self.match(PostgreSQLParser.COMMA)
            self.state = 1089
            self.spoint()
            self.state = 1090
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpolyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY(self):
            return self.getToken(PostgreSQLParser.SPOLY, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly" ):
                listener.enterSpoly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly" ):
                listener.exitSpoly(self)




    def spoly(self):

        localctx = PostgreSQLParser.SpolyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_spoly)
        try:
            self.state = 1103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1093
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1095
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1096
                self.column_spec()
                self.state = 1097
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1100
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1101
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 1102
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATH(self):
            return self.getToken(PostgreSQLParser.SPATH, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpath" ):
                listener.enterSpath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpath" ):
                listener.exitSpath(self)




    def spath(self):

        localctx = PostgreSQLParser.SpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_spath)
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.match(PostgreSQLParser.SPATH)
                self.state = 1106
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.match(PostgreSQLParser.SPATH)
                self.state = 1108
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1109
                self.column_spec()
                self.state = 1110
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StransContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRANS(self):
            return self.getToken(PostgreSQLParser.STRANS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def TRANS(self):
            return self.getToken(PostgreSQLParser.TRANS, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strans

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrans" ):
                listener.enterStrans(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrans" ):
                listener.exitStrans(self)




    def strans(self):

        localctx = PostgreSQLParser.StransContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_strans)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(PostgreSQLParser.STRANS)
            self.state = 1115
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1116
            self.bit_expr()
            self.state = 1117
            self.match(PostgreSQLParser.COMMA)
            self.state = 1118
            self.bit_expr()
            self.state = 1119
            self.match(PostgreSQLParser.COMMA)
            self.state = 1120
            self.bit_expr()
            self.state = 1121
            self.match(PostgreSQLParser.COMMA)
            self.state = 1122
            self.match(PostgreSQLParser.TRANS)
            self.state = 1123
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_object" ):
                listener.enterPg_sphere_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_object" ):
                listener.exitPg_sphere_object(self)




    def pg_sphere_object(self):

        localctx = PostgreSQLParser.Pg_sphere_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_pg_sphere_object)
        try:
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SCIRCLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.scircle()
                pass
            elif token in [PostgreSQLParser.SLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.sline()
                pass
            elif token in [PostgreSQLParser.SELLIPSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1127
                self.sellipse()
                pass
            elif token in [PostgreSQLParser.SBOX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1128
                self.sbox()
                pass
            elif token in [PostgreSQLParser.SPOLY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1129
                self.spoly()
                pass
            elif token in [PostgreSQLParser.SPATH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1130
                self.spath()
                pass
            elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RAND, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID, PostgreSQLParser.CBRT, PostgreSQLParser.DIV]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1131
                self.simple_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





