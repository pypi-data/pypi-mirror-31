
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUIVALENCEleftIMPLIESleftUNIONleftSEQleftSTARleftTESTleftORleftANDrightDIAMONDLSEPARATORBOXLSEPARATORleftDIAMONDRSEPARATORBOXRSEPARATORrightNOTAND ATOM BOXLSEPARATOR BOXRSEPARATOR DIAMONDLSEPARATOR DIAMONDRSEPARATOR END EQUIVALENCE FALSE FF IMPLIES LAST LPAREN NOT OR RPAREN SEQ STAR TEST TRUE TT UNIONtemp_formula : temp_formula EQUIVALENCE temp_formula\n                        | temp_formula IMPLIES temp_formula\n                        | temp_formula OR temp_formula\n                        | temp_formula AND temp_formula\n                        | BOXLSEPARATOR path BOXRSEPARATOR temp_formula\n                        | DIAMONDLSEPARATOR path DIAMONDRSEPARATOR temp_formula\n                        | NOT temp_formula\n                        | TT\n                        | FF\n                        | END\n                        | LASTpath : path UNION path\n                | path SEQ path\n                | path STAR\n                | temp_formula TEST\n                | propositionalpropositional : propositional EQUIVALENCE propositional\n                         | propositional IMPLIES propositional\n                         | propositional OR propositional\n                         | propositional AND propositional\n                         | NOT propositional\n                         | FALSE\n                         | TRUE\n                         | ATOMtemp_formula : LPAREN temp_formula RPAREN\n        path            : LPAREN path RPAREN\n        propositional   : LPAREN propositional RPAREN\n        '
    
_lr_action_items = {'EQUIVALENCE':([4,5,6,7,8,10,11,13,14,15,17,24,26,27,29,40,41,42,43,44,45,47,49,51,52,53,54,57,],[-11,-10,-8,-9,23,-7,23,-24,-23,-22,31,23,23,31,-21,-2,-3,-4,-1,-25,-27,31,-17,-20,-19,-18,-5,-6,]),'DIAMONDLSEPARATOR':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'LAST':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'RPAREN':([4,5,6,7,10,13,14,15,17,24,25,26,27,28,29,35,40,41,42,43,44,45,46,47,49,51,52,53,54,55,56,57,],[-11,-10,-8,-9,-7,-24,-23,-22,-16,44,-15,44,45,46,-21,-14,-2,-3,-4,-1,-25,-27,-26,45,-17,-20,-19,-18,-5,-12,-13,-6,]),'END':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'OR':([4,5,6,7,8,10,11,13,14,15,17,24,26,27,29,40,41,42,43,44,45,47,49,51,52,53,54,57,],[-11,-10,-8,-9,21,-7,21,-24,-23,-22,33,21,21,33,-21,21,-3,-4,21,-25,-27,33,33,-20,-19,33,-5,-6,]),'TEST':([4,5,6,7,10,11,26,40,41,42,43,44,54,57,],[-11,-10,-8,-9,-7,25,25,-2,-3,-4,-1,-25,-5,-6,]),'LPAREN':([0,1,2,3,9,12,16,20,21,22,23,30,31,32,33,34,36,37,38,39,48,50,],[9,9,12,12,9,12,30,9,9,9,9,30,50,50,50,50,9,12,12,9,50,50,]),'FF':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'ATOM':([2,3,12,16,30,31,32,33,34,37,38,48,50,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'TRUE':([2,3,12,16,30,31,32,33,34,37,38,48,50,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FALSE':([2,3,12,16,30,31,32,33,34,37,38,48,50,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'BOXRSEPARATOR':([13,14,15,17,18,25,29,35,45,46,49,51,52,53,55,56,],[-24,-23,-22,-16,36,-15,-21,-14,-27,-26,-17,-20,-19,-18,-12,-13,]),'NOT':([0,1,2,3,9,12,16,20,21,22,23,30,31,32,33,34,36,37,38,39,48,50,],[1,1,16,16,1,16,16,1,1,1,1,16,48,48,48,48,1,16,16,1,48,48,]),'BOXLSEPARATOR':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'IMPLIES':([4,5,6,7,8,10,11,13,14,15,17,24,26,27,29,40,41,42,43,44,45,47,49,51,52,53,54,57,],[-11,-10,-8,-9,20,-7,20,-24,-23,-22,34,20,20,34,-21,-2,-3,-4,20,-25,-27,34,34,-20,-19,-18,-5,-6,]),'$end':([4,5,6,7,8,10,40,41,42,43,44,54,57,],[-11,-10,-8,-9,0,-7,-2,-3,-4,-1,-25,-5,-6,]),'UNION':([13,14,15,17,18,19,25,27,28,29,35,45,46,49,51,52,53,55,56,],[-24,-23,-22,-16,37,37,-15,-16,37,-21,-14,-27,-26,-17,-20,-19,-18,-12,-13,]),'SEQ':([13,14,15,17,18,19,25,27,28,29,35,45,46,49,51,52,53,55,56,],[-24,-23,-22,-16,38,38,-15,-16,38,-21,-14,-27,-26,-17,-20,-19,-18,38,-13,]),'STAR':([13,14,15,17,18,19,25,27,28,29,35,45,46,49,51,52,53,55,56,],[-24,-23,-22,-16,35,35,-15,-16,35,-21,-14,-27,-26,-17,-20,-19,-18,35,35,]),'TT':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'DIAMONDRSEPARATOR':([13,14,15,17,19,25,29,35,45,46,49,51,52,53,55,56,],[-24,-23,-22,-16,39,-15,-21,-14,-27,-26,-17,-20,-19,-18,-12,-13,]),'AND':([4,5,6,7,8,10,11,13,14,15,17,24,26,27,29,40,41,42,43,44,45,47,49,51,52,53,54,57,],[-11,-10,-8,-9,22,-7,22,-24,-23,-22,32,22,22,32,-21,22,22,-4,22,-25,-27,32,32,-20,32,32,-5,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'temp_formula':([0,1,2,3,9,12,16,20,21,22,23,30,36,37,38,39,],[8,10,11,11,24,26,10,40,41,42,43,24,54,11,11,57,]),'propositional':([2,3,12,16,30,31,32,33,34,37,38,48,50,],[17,17,27,29,47,49,51,52,53,17,17,29,47,]),'path':([2,3,12,37,38,],[18,19,28,55,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> temp_formula","S'",1,None,None,None),
  ('temp_formula -> temp_formula EQUIVALENCE temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',93),
  ('temp_formula -> temp_formula IMPLIES temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',94),
  ('temp_formula -> temp_formula OR temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',95),
  ('temp_formula -> temp_formula AND temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',96),
  ('temp_formula -> BOXLSEPARATOR path BOXRSEPARATOR temp_formula','temp_formula',4,'p_temp_formula','ldlf.py',97),
  ('temp_formula -> DIAMONDLSEPARATOR path DIAMONDRSEPARATOR temp_formula','temp_formula',4,'p_temp_formula','ldlf.py',98),
  ('temp_formula -> NOT temp_formula','temp_formula',2,'p_temp_formula','ldlf.py',99),
  ('temp_formula -> TT','temp_formula',1,'p_temp_formula','ldlf.py',100),
  ('temp_formula -> FF','temp_formula',1,'p_temp_formula','ldlf.py',101),
  ('temp_formula -> END','temp_formula',1,'p_temp_formula','ldlf.py',102),
  ('temp_formula -> LAST','temp_formula',1,'p_temp_formula','ldlf.py',103),
  ('path -> path UNION path','path',3,'p_path','ldlf.py',144),
  ('path -> path SEQ path','path',3,'p_path','ldlf.py',145),
  ('path -> path STAR','path',2,'p_path','ldlf.py',146),
  ('path -> temp_formula TEST','path',2,'p_path','ldlf.py',147),
  ('path -> propositional','path',1,'p_path','ldlf.py',148),
  ('propositional -> propositional EQUIVALENCE propositional','propositional',3,'p_propositional','ldlf.py',171),
  ('propositional -> propositional IMPLIES propositional','propositional',3,'p_propositional','ldlf.py',172),
  ('propositional -> propositional OR propositional','propositional',3,'p_propositional','ldlf.py',173),
  ('propositional -> propositional AND propositional','propositional',3,'p_propositional','ldlf.py',174),
  ('propositional -> NOT propositional','propositional',2,'p_propositional','ldlf.py',175),
  ('propositional -> FALSE','propositional',1,'p_propositional','ldlf.py',176),
  ('propositional -> TRUE','propositional',1,'p_propositional','ldlf.py',177),
  ('propositional -> ATOM','propositional',1,'p_propositional','ldlf.py',178),
  ('temp_formula -> LPAREN temp_formula RPAREN','temp_formula',3,'p_expr_paren','ldlf.py',205),
  ('path -> LPAREN path RPAREN','path',3,'p_expr_paren','ldlf.py',206),
  ('propositional -> LPAREN propositional RPAREN','propositional',3,'p_expr_paren','ldlf.py',207),
]
