#!/usr/bin/env python

# Copyright (c) 2017, DIANA-HEP
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import shutil
import tempfile
import unittest
try:
    import fcntl
except ImportError:
    fcntl = None

import numpy

from uproot.cache.diskcache import DiskCache
from uproot.cache.diskcache import memmapread

def lstree(base, path=""):
    for item in sorted(os.listdir(os.path.join(base, path))):
        if os.path.isdir(os.path.join(base, path, item)):
            yield os.path.join(path, item) + os.sep
            for x in lstree(base, os.path.join(path, item)):
                yield x
        else:
            yield os.path.join(path, item)

class TestDiskCache(unittest.TestCase):
    def runTest(self):
        pass
    
    def test_dirstructure(self):
        filling = [
            ["0-a"],
            ["0-a", "1-b"],
            ["0-a", "1-b", "2-c"],
            ["0/", "0/0-a", "0/1-b", "0/2-c", "1/", "1/0-d"],
            ["0/", "0/0-a", "0/1-b", "0/2-c", "1/", "1/0-d", "1/1-e"],
            ["0/", "0/0-a", "0/1-b", "0/2-c", "1/", "1/0-d", "1/1-e", "1/2-f"],
            ["0/", "0/0-a", "0/1-b", "0/2-c", "1/", "1/0-d", "1/1-e", "1/2-f", "2/", "2/0-g"],
            ["0/", "0/0-a", "0/1-b", "0/2-c", "1/", "1/0-d", "1/1-e", "1/2-f", "2/", "2/0-g", "2/1-h"],
            ["0/", "0/0-a", "0/1-b", "0/2-c", "1/", "1/0-d", "1/1-e", "1/2-f", "2/", "2/0-g", "2/1-h", "2/2-i"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u", "2/1/", "2/1/0-v"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u", "2/1/", "2/1/0-v", "2/1/1-w"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u", "2/1/", "2/1/0-v", "2/1/1-w", "2/1/2-x"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u", "2/1/", "2/1/0-v", "2/1/1-w", "2/1/2-x", "2/2/", "2/2/0-y"],
            ["0/", "0/0/", "0/0/0-a", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u", "2/1/", "2/1/0-v", "2/1/1-w", "2/1/2-x", "2/2/", "2/2/0-y", "2/2/1-z"],
        ]

        touching = [
            ["0/", "0/0/", "0/0/1-b", "0/0/2-c", "0/1/", "0/1/0-d", "0/1/1-e", "0/1/2-f", "0/2/", "0/2/0-g", "0/2/1-h", "0/2/2-i", "1/", "1/0/", "1/0/0-j", "1/0/1-k", "1/0/2-l", "1/1/", "1/1/0-m", "1/1/1-n", "1/1/2-o", "1/2/", "1/2/0-p", "1/2/1-q", "1/2/2-r", "2/", "2/0/", "2/0/0-s", "2/0/1-t", "2/0/2-u", "2/1/", "2/1/0-v", "2/1/1-w", "2/1/2-x", "2/2/", "2/2/0-y", "2/2/1-z", "2/2/2-a"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/1-e", "0/0/1/2-f", "0/0/2/", "0/0/2/0-g", "0/0/2/1-h", "0/0/2/2-i", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/1-k", "0/1/0/2-l", "0/1/1/", "0/1/1/0-m", "0/1/1/1-n", "0/1/1/2-o", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/0-g", "0/0/2/1-h", "0/0/2/2-i", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/1-k", "0/1/0/2-l", "0/1/1/", "0/1/1/0-m", "0/1/1/1-n", "0/1/1/2-o", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/0/2/2-i", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/1-k", "0/1/0/2-l", "0/1/1/", "0/1/1/0-m", "0/1/1/1-n", "0/1/1/2-o", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/1-k", "0/1/0/2-l", "0/1/1/", "0/1/1/0-m", "0/1/1/1-n", "0/1/1/2-o", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/0-m", "0/1/1/1-n", "0/1/1/2-o", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/1/2-o", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/1-q", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/0-s", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/0/2-u", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/1-w", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/0-y", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w"],
            ["0/", "0/0/", "0/0/0/", "0/0/0/1-b", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y"],
            ["0/", "0/0/", "0/0/1/", "0/0/1/0-d", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b"],
            ["0/", "0/0/", "0/0/1/", "0/0/1/2-f", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d"],
            ["0/", "0/0/", "0/0/2/", "0/0/2/1-h", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f"],
            ["0/", "0/1/", "0/1/0/", "0/1/0/0-j", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h"],
            ["0/", "0/1/", "0/1/0/", "0/1/0/2-l", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j"],
            ["0/", "0/1/", "0/1/1/", "0/1/1/1-n", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l"],
            ["0/", "0/1/", "0/1/2/", "0/1/2/0-p", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n"],
            ["0/", "0/1/", "0/1/2/", "0/1/2/2-r", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n", "1/2/0/1-p"],
            ["0/", "0/2/", "0/2/0/", "0/2/0/1-t", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n", "1/2/0/1-p", "1/2/0/2-r"],
            ["0/", "0/2/", "0/2/1/", "0/2/1/0-v", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n", "1/2/0/1-p", "1/2/0/2-r", "1/2/1/", "1/2/1/0-t"],
            ["0/", "0/2/", "0/2/1/", "0/2/1/2-x", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n", "1/2/0/1-p", "1/2/0/2-r", "1/2/1/", "1/2/1/0-t", "1/2/1/1-v"],
            ["0/", "0/2/", "0/2/2/", "0/2/2/1-z", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n", "1/2/0/1-p", "1/2/0/2-r", "1/2/1/", "1/2/1/0-t", "1/2/1/1-v", "1/2/1/2-x"],
            ["0/", "0/2/", "0/2/2/", "0/2/2/2-a", "1/", "1/0/", "1/0/0/", "1/0/0/0-c", "1/0/0/1-e", "1/0/0/2-g", "1/0/1/", "1/0/1/0-i", "1/0/1/1-k", "1/0/1/2-m", "1/0/2/", "1/0/2/0-o", "1/0/2/1-q", "1/0/2/2-s", "1/1/", "1/1/0/", "1/1/0/0-u", "1/1/0/1-w", "1/1/0/2-y", "1/1/1/", "1/1/1/0-b", "1/1/1/1-d", "1/1/1/2-f", "1/1/2/", "1/1/2/0-h", "1/1/2/1-j", "1/1/2/2-l", "1/2/", "1/2/0/", "1/2/0/0-n", "1/2/0/1-p", "1/2/0/2-r", "1/2/1/", "1/2/1/0-t", "1/2/1/1-v", "1/2/1/2-x", "1/2/2/", "1/2/2/0-z"],
        ]

        if fcntl is not None:
            directory = tempfile.mkdtemp()
            try:
                # same equivalent limitbytes as old implementation
                def dummywrite(filename, obj):
                    with open(filename, "w") as file:
                        file.write("")

                cache = DiskCache.create(1024 + 80*26 + 10000*8 + 80, directory, maxperdir=3, read=lambda filename, cleanup: "", write=dummywrite)

                for i in range(26):
                    cache[chr(i + ord("a"))] = ""
                    self.assertEqual(filling[i], list(lstree(os.path.join(directory, cache.ORDER_DIR))))
                    DiskCache.join(directory, check=True)

                for i, n in enumerate(chr(j + ord("a")) for j in list(range(0, 26, 2)) + list(range(1, 26, 2))):
                    cache[n]
                    self.assertEqual(touching[i], list(lstree(os.path.join(directory, cache.ORDER_DIR))))
                    DiskCache.join(directory, check=True)

                cache = DiskCache.create(1024 + 80*26 + 10000*8 + 80, directory, maxperdir=3, read=lambda filename, cleanup: "", write=dummywrite)

                for i in range(26):
                    cache[chr(i + ord("a"))] = ""

                for i, n in enumerate(chr(j + ord("a")) for j in list(range(0, 26, 2)) + list(range(1, 26, 2))):
                    cache.promote(n)
                    self.assertEqual(touching[i], list(lstree(os.path.join(directory, cache.ORDER_DIR))))
                    DiskCache.join(directory, check=True)

            finally:
                shutil.rmtree(directory)

        ### It would be nice to test this, but operating system
        ### differences prevent it from being repeatable.

        # def test_eviction(self):
        #     directory = tempfile.mkdtemp()
        #     try:
        #         # small enough limitbytes that objects get evicted
        #         #     1 lookup with 10000 8-byte items and an 80-byte header
        #         #     ~100 8-byte items in 4 arrays with 80-byte headers
        #         cache = DiskCache.create(10000*8 + 80 + 100*8 + 80*4, directory, maxperdir=3, lookupsize=10000)

        #         cache["a"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80360)
        #         self.assertEqual(list(cache.keys()), ["a"])
        #         self.assertTrue("a" in cache)

        #         cache["b"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80640)
        #         self.assertEqual(list(cache.keys()), ["a", "b"])
        #         self.assertTrue("a" in cache)
        #         self.assertTrue("b" in cache)

        #         cache["c"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80920)
        #         self.assertEqual(list(cache.keys()), ["a", "b", "c"])
        #         self.assertTrue("a" in cache)
        #         self.assertTrue("b" in cache)
        #         self.assertTrue("c" in cache)

        #         cache["d"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["a", "b", "c", "d"])
        #         self.assertTrue("a" in cache)
        #         self.assertTrue("b" in cache)
        #         self.assertTrue("c" in cache)
        #         self.assertTrue("d" in cache)

        #         cache["e"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["b", "c", "d", "e"])
        #         self.assertTrue("a" not in cache)
        #         self.assertTrue("b" in cache)
        #         self.assertTrue("c" in cache)
        #         self.assertTrue("d" in cache)
        #         self.assertTrue("e" in cache)

        #         cache["f"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["c", "d", "e", "f"])

        #         cache["g"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["d", "e", "f", "g"])

        #         cache["h"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["e", "f", "g", "h"])

        #         cache["i"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["f", "g", "h", "i"])

        #         cache["j"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["g", "h", "i", "j"])

        #         cache["j"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["g", "h", "i", "j"])

        #         cache["j"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["g", "h", "i", "j"])

        #         cache["g"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["h", "i", "j", "g"])

        #         cache["h"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["i", "j", "g", "h"])

        #         cache["i"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["j", "g", "h", "i"])

        #         cache["j"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 81200)
        #         self.assertEqual(list(cache.keys()), ["g", "h", "i", "j"])

        #         # minus one byte: won't be enough for 4 arrays
        #         cache = DiskCache.create(10000*8 + 80 + 100*8 + 80*4 - 1, directory, maxperdir=3, lookupsize=10000)

        #         cache["a"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80360)
        #         self.assertEqual(list(cache.keys()), ["a"])

        #         cache["b"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80640)
        #         self.assertEqual(list(cache.keys()), ["a", "b"])

        #         cache["c"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80920)
        #         self.assertEqual(list(cache.keys()), ["a", "b", "c"])

        #         cache["d"] = numpy.ones(25, dtype=numpy.float64)
        #         self.assertEqual(cache.numbytes, 80920)
        #         self.assertEqual(list(cache.keys()), ["b", "c", "d"])

        #     finally:
        #         shutil.rmtree(directory)

    def test_collisions(self):
        if fcntl is not None:
            directory = tempfile.mkdtemp()
            try:
                cache = DiskCache.create(1024**2, directory, maxperdir=3, lookupsize=10)

                for i in range(100):
                    cache["/" + repr(i)] = numpy.array([i])

                for i in list(range(0, 100, 2)) + list(range(1, 100, 2)):
                    self.assertEqual(cache["/" + repr(i)][0], i)

                for i in range(100):
                    del cache["/" + repr(i)]
                    if i % 10 == 0:
                        self.assertEqual(cache["/" + repr(i + 1)][0], i + 1)

            finally:
                shutil.rmtree(directory)

    def test_iterators(self):
        if fcntl is not None:
            directory = tempfile.mkdtemp()
            try:
                cache = DiskCache.create(1024**2, directory, maxperdir=3, lookupsize=10)

                for i in range(100):
                    cache["/" + repr(i)] = numpy.array([i])

                for i, name in enumerate(cache.keys()):
                    self.assertEqual(name, "/" + repr(i))

                for i, value in enumerate(cache.values()):
                    self.assertEqual(value[0], i)

                for i, (name, value) in enumerate(cache.items()):
                    self.assertEqual(name, "/" + repr(i))
                    self.assertEqual(value[0], i)

                cache2 = DiskCache.join(directory, read=memmapread)

                for i, name in enumerate(cache2.keys()):
                    self.assertEqual(name, "/" + repr(i))

                for i, value in enumerate(cache2.values()):
                    self.assertEqual(value[0], i)

                for i, (name, value) in enumerate(cache2.items()):
                    self.assertEqual(name, "/" + repr(i))
                    self.assertEqual(value[0], i)

            finally:
                shutil.rmtree(directory)

