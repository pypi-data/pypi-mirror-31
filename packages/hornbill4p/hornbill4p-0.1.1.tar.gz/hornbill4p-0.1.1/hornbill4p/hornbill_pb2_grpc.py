# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from hornbill4p import hornbill_pb2 as hornbill__pb2


class ClassifierStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Classify = channel.unary_unary(
        '/grpc.Classifier/Classify',
        request_serializer=hornbill__pb2.BytesRequest.SerializeToString,
        response_deserializer=hornbill__pb2.BytesResponse.FromString,
        )
    self.BatchClassify = channel.unary_unary(
        '/grpc.Classifier/BatchClassify',
        request_serializer=hornbill__pb2.BytesRequest.SerializeToString,
        response_deserializer=hornbill__pb2.BytesResponse.FromString,
        )


class ClassifierServicer(object):
  """The greeting service definition.
  """

  def Classify(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BatchClassify(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClassifierServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Classify': grpc.unary_unary_rpc_method_handler(
          servicer.Classify,
          request_deserializer=hornbill__pb2.BytesRequest.FromString,
          response_serializer=hornbill__pb2.BytesResponse.SerializeToString,
      ),
      'BatchClassify': grpc.unary_unary_rpc_method_handler(
          servicer.BatchClassify,
          request_deserializer=hornbill__pb2.BytesRequest.FromString,
          response_serializer=hornbill__pb2.BytesResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.Classifier', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
