# -*- coding: utf-8 -*-
from fgmk import __title__, __version__, __copyright__, __license__
from fgmk import getdata, current_project, game_init
from fgmk.util import temp
from PyQt5 import QtWidgets, QtHelp, QtCore
import os
import tarfile
import webbrowser

# TODO: fix segfault error on QtHelp
#
# below is output from gdb
#
# [Thread debugging using libthread_db enabled]
# Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
# Core was generated by `python3 -m fgmk.help'.
# Program terminated with signal SIGSEGV, Segmentation fault.
# #0  0x00007f67f507ff31 in QSqlDatabase::close() ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Sql.so.5

# (gdb) bt
# #0  0x00007f67f507ff31 in QSqlDatabase::close() ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Sql.so.5
# #1  0x00007f67f50810d9 in QSqlDatabase::~QSqlDatabase() ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Sql.so.5
# #2  0x00007f67f5083ccd in ?? ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Sql.so.5
# #3  0x00007f67fc39c099 in QHashData::free_helper(void (*)(QHashData::Node*)) ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Core.so.5
# #4  0x00007f67f507fc37 in ?? ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Sql.so.5
# #5  0x00007f68008b1fe8 in __run_exit_handlers (status=0,
#     listp=0x7f6800c3b5f8 <__exit_funcs>,
#     run_list_atexit=run_list_atexit@entry=true) at exit.c:82
# #6  0x00007f68008b2035 in __GI_exit (status=<optimized out>) at exit.c:104
# #7  0x00000000005fef1f in Py_Exit ()
# #8  0x00000000005ff00a in ?? ()
# #9  0x00000000005ff076 in PyErr_PrintEx ()
# #10 0x000000000063f31a in ?? ()
# #11 0x000000000063fad2 in Py_Main ()
# #12 0x00000000004d00e1 in main ()

# (gdb) info threads
#   Id   Target Id         Frame
# * 1    Thread 0x7f680105f700 (LWP 18514) 0x00007f67f507ff31 in QSqlDatabase::close() ()
#    from /home/username/.local/lib/python3.5/site-packages/PyQt5/Qt/lib/libQt5Sql.so.5
#   2    Thread 0x7f67f20ae700 (LWP 18515) 0x00007f6800972e8d in poll () at ../sysdeps/unix/syscall-template.S:84
#   3    Thread 0x7f67f1279700 (LWP 18516) 0x00007f6800972e8d in poll () at ../sysdeps/unix/syscall-template.S:84

# (gdb) info shared libs
# From                To                  Syms Read   Shared Object Library
# 0x00007f67fbf9dd20  0x00007f67fc049cc9  Yes (*)     /usr/lib/x86_64-linux-gnu/libstdc++.so.6
# 0x00007f67f3434810  0x00007f67f348bb4f  Yes (*)     /lib/x86_64-linux-gnu/libsystemd.so.0
# 0x00007f67f27b1ab0  0x00007f67f27c429b  Yes (*)     /lib/x86_64-linux-gnu/libselinux.so.1
# (*): Shared library is missing debugging information.



credits = """
Higly based in Tsubasa's Redo.
Inspired in Enterbrain's RPG Maker 2000.
Thanks Nintendo for making the SNES.
"""

aboutstr = __title__ + ' v' + __version__ + "\n\n" + \
    __copyright__ + "\n\n" + __license__ + "\n\nCredits:\n" + credits

welcome_msg = """
Welcome to FGMK

Please start a new game project by clicking in File -> New ...
"""

def welcome(parent=None):
    QtWidgets.QMessageBox.information(parent, 'Welcome to '+__title__ ,
                                           welcome_msg, QtWidgets.QMessageBox.Ok )

def load_example():
    exampleProject = {'name': 'example', 'baseFolder': temp.mkdtemp()}
    current_projectectPath = os.path.join(
        str(exampleProject['baseFolder']), str(exampleProject['name']))
    current_project.settings['basefolder'] = str(exampleProject['baseFolder'])
    current_project.settings['gamefolder'] = current_projectectPath
    current_project.settings['gamename'] = str(exampleProject['name'])
    os.mkdir(current_projectectPath)
    tar = tarfile.open(getdata.path('example.tar.gz'))
    tar.extractall(current_projectectPath)
    tar.close()
    initfile = game_init.openInitFile(current_project.settings['gamefolder'])
    levellist = initfile['LevelsList']
    startlevel = initfile['World']['initLevel']
    levelfile = levellist[startlevel]
    return levelfile

class HelpBrowser (QtWidgets.QTextBrowser):
    def __init__ (self, engine=None, parent=None):
        QtWidgets.QTextBrowser.__init__(self, parent)
        self.engine = engine

    def setSource (self, url):
        if url.scheme() == "http" or url.scheme() == "https":
            webbrowser.open(str(url.toString()))
        else:
            QtWidgets.QTextBrowser.setSource(self, url)

    def setHelpEngine(self, helpengine):
        self.helpengine = helpengine

    def loadResource (self, rtype, url):
        if url.scheme() == "qthelp":
            return self.engine.fileData(url)
        else:
            return QtWidgets.QTextBrowser.loadResource(self, rtype, url)
    def close(self):
        self.engine = None

class HelpWindow (QtWidgets.QDialog):
    def __init__ (self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        self.engine = QtHelp.QHelpEngine(getdata.path('fgmk.qhc'), self)
        self.engine.setupData()
        self.engine.registerDocumentation(getdata.path('fgmk.qch'))
        self.engine.searchEngine().reindexDocumentation()

        self.querySearch = self.engine.searchEngine().queryWidget()
        self.resultSearch = self.engine.searchEngine().resultWidget()
        splitter = QtWidgets.QSplitter(orientation=QtCore.Qt.Horizontal)
        self.browser = HelpBrowser(self.engine, self)
        tWidget = QtWidgets.QTabWidget(self);

        searcWidget = QtWidgets.QWidget(self)
        VBox = QtWidgets.QVBoxLayout(searcWidget)

        VBox.addWidget(self.querySearch)
        VBox.addWidget(self.resultSearch)

        tWidget.setMaximumWidth(200);
        self.hcontent = self.engine.contentWidget()
        self.hindex = self.engine.indexWidget()

        tWidget.addTab(self.hcontent, "Contents")
        #tWidget.addTab(self.hindex, "Index");
        tWidget.addTab(searcWidget, "Search")

        self.hcontent.expandToDepth(2)
        self.hcontent.setExpandsOnDoubleClick(False)
        self.hcontent.linkActivated.connect(self.browser.setSource)
        self.hindex.linkActivated.connect(self.browser.setSource)
        self.resultSearch.requestShowLink.connect(self.browser.setSource)
        self.querySearch.search.connect(self.search)

        splitter.addWidget(tWidget)
        splitter.addWidget(self.browser)
        splitter.setSizes((160,440))

        hlayout = QtWidgets.QHBoxLayout(self)
        hlayout.addWidget(splitter)
        self.browser.setSource(QtCore.QUrl('qthelp://org.sphinx.fgmk.'+ __version__ +'/doc/index.html'))
        #self.setLayout(hlayout)
        self.resize(800, 600)
        self.setWindowTitle(u'%s help' % __title__)

    def search(self):
        queries = self.querySearch.query()
        self.engine.searchEngine().search(queries)

    def showDocumentation (self, url):
        self.tree.expandAll()
        self.browser.setSource(url)
        self.show()

    def closeEvent(self, event):
        self.close()
        event.accept()

    def close(self):
        self.browser.close()
        del self.engine

def main():
    return HelpWindow()

if __name__ == "__main__":
    from sys import argv, exit

    a = QtWidgets.QApplication(argv)
    m = main()
    a.processEvents()
    m.show()
    m.raise_()
    exit(a.exec_())
