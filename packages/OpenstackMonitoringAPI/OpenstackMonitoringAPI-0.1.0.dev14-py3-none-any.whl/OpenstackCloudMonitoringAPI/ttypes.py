#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class CloudSite(object):
    Giessen = 0
    Bielefeld = 1
    Freiburg = 2
    Tuebingen = 3
    Heidelberg = 4

    _VALUES_TO_NAMES = {
        0: "Giessen",
        1: "Bielefeld",
        2: "Freiburg",
        3: "Tuebingen",
        4: "Heidelberg",
    }

    _NAMES_TO_VALUES = {
        "Giessen": 0,
        "Bielefeld": 1,
        "Freiburg": 2,
        "Tuebingen": 3,
        "Heidelberg": 4,
    }


class Date(object):
    """
    Attributes:
     - year
     - month
     - day
     - hour
     - minute
     - second
     - strftime
    """


    def __init__(self, year=None, month=None, day=None, hour=None, minute=None, second=None, strftime=None,):
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.minute = minute
        self.second = second
        self.strftime = strftime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.year = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.month = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.day = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.hour = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.minute = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.second = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.strftime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Date')
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.I32, 1)
            oprot.writeI32(self.year)
            oprot.writeFieldEnd()
        if self.month is not None:
            oprot.writeFieldBegin('month', TType.I32, 2)
            oprot.writeI32(self.month)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.I32, 3)
            oprot.writeI32(self.day)
            oprot.writeFieldEnd()
        if self.hour is not None:
            oprot.writeFieldBegin('hour', TType.I32, 4)
            oprot.writeI32(self.hour)
            oprot.writeFieldEnd()
        if self.minute is not None:
            oprot.writeFieldBegin('minute', TType.I32, 5)
            oprot.writeI32(self.minute)
            oprot.writeFieldEnd()
        if self.second is not None:
            oprot.writeFieldBegin('second', TType.I32, 6)
            oprot.writeI32(self.second)
            oprot.writeFieldEnd()
        if self.strftime is not None:
            oprot.writeFieldBegin('strftime', TType.STRING, 7)
            oprot.writeString(self.strftime.encode('utf-8') if sys.version_info[0] == 2 else self.strftime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Component_Usage(object):
    """
    Attributes:
     - available
     - used
     - free
    """


    def __init__(self, available=None, used=None, free=None,):
        self.available = available
        self.used = used
        self.free = free

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.available = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.used = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.free = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Component_Usage')
        if self.available is not None:
            oprot.writeFieldBegin('available', TType.I64, 1)
            oprot.writeI64(self.available)
            oprot.writeFieldEnd()
        if self.used is not None:
            oprot.writeFieldBegin('used', TType.I64, 2)
            oprot.writeI64(self.used)
            oprot.writeFieldEnd()
        if self.free is not None:
            oprot.writeFieldBegin('free', TType.I64, 3)
            oprot.writeI64(self.free)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenstackHypervisorUsage(object):
    """
    Attributes:
     - vcpus
     - ram
     - disk
     - date
    """


    def __init__(self, vcpus=None, ram=None, disk=None, date=None,):
        self.vcpus = vcpus
        self.ram = ram
        self.disk = disk
        self.date = date

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.vcpus = Component_Usage()
                    self.vcpus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ram = Component_Usage()
                    self.ram.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.disk = Component_Usage()
                    self.disk.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.date = Date()
                    self.date.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenstackHypervisorUsage')
        if self.vcpus is not None:
            oprot.writeFieldBegin('vcpus', TType.STRUCT, 1)
            self.vcpus.write(oprot)
            oprot.writeFieldEnd()
        if self.ram is not None:
            oprot.writeFieldBegin('ram', TType.STRUCT, 2)
            self.ram.write(oprot)
            oprot.writeFieldEnd()
        if self.disk is not None:
            oprot.writeFieldBegin('disk', TType.STRUCT, 3)
            self.disk.write(oprot)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRUCT, 4)
            self.date.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Date)
Date.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'year', None, None, ),  # 1
    (2, TType.I32, 'month', None, None, ),  # 2
    (3, TType.I32, 'day', None, None, ),  # 3
    (4, TType.I32, 'hour', None, None, ),  # 4
    (5, TType.I32, 'minute', None, None, ),  # 5
    (6, TType.I32, 'second', None, None, ),  # 6
    (7, TType.STRING, 'strftime', 'UTF8', None, ),  # 7
)
all_structs.append(Component_Usage)
Component_Usage.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'available', None, None, ),  # 1
    (2, TType.I64, 'used', None, None, ),  # 2
    (3, TType.I64, 'free', None, None, ),  # 3
)
all_structs.append(OpenstackHypervisorUsage)
OpenstackHypervisorUsage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'vcpus', [Component_Usage, None], None, ),  # 1
    (2, TType.STRUCT, 'ram', [Component_Usage, None], None, ),  # 2
    (3, TType.STRUCT, 'disk', [Component_Usage, None], None, ),  # 3
    (4, TType.STRUCT, 'date', [Date, None], None, ),  # 4
)
fix_spec(all_structs)
del all_structs
