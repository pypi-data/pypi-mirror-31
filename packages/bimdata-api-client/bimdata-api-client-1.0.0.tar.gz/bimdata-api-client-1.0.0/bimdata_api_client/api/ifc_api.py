# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bimdata_api_client.api_client import ApiClient


class IfcApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_delete_ifc_classifications(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_classifications  # noqa: E501

                     Delete relation between filtered classifications (eg. /classifications?name=untec) and all ifc's elements.             No classification will be deleted on this endpoint, only the relation between ifc's elements and their classification.           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_classifications(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_delete_ifc_classifications_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_ifc_classifications_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_delete_ifc_classifications_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_classifications  # noqa: E501

                     Delete relation between filtered classifications (eg. /classifications?name=untec) and all ifc's elements.             No classification will be deleted on this endpoint, only the relation between ifc's elements and their classification.           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_classifications_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_ifc_classifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_delete_ifc_classifications`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_delete_ifc_classifications`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_delete_ifc_classifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_ifc_properties(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_properties  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_properties(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_delete_ifc_properties_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_ifc_properties_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_delete_ifc_properties_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_properties  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_properties_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_ifc_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_delete_ifc_properties`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_delete_ifc_properties`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_delete_ifc_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_ifc_property_definitions(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_property_definitions  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_property_definitions(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_delete_ifc_property_definitions_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_ifc_property_definitions_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_delete_ifc_property_definitions_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_property_definitions  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_property_definitions_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_ifc_property_definitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_delete_ifc_property_definitions`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_delete_ifc_property_definitions`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_delete_ifc_property_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_ifc_units(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_units  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_units(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_delete_ifc_units_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_ifc_units_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_delete_ifc_units_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_ifc_units  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_ifc_units_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_ifc_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_delete_ifc_units`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_delete_ifc_units`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_delete_ifc_units`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_property_set(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_property_set  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_property_set(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_delete_property_set_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_property_set_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_delete_property_set_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_delete_property_set  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_property_set_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_delete_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_delete_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_delete_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_remove_classifications_of_element(self, ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs):  # noqa: E501
        """bulk_remove_classifications_of_element  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_remove_classifications_of_element(ifc_pk, project_pk, element_uuid, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_remove_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_remove_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_remove_classifications_of_element_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs):  # noqa: E501
        """bulk_remove_classifications_of_element  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_remove_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_remove_classifications_of_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_remove_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_remove_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `bulk_remove_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_remove_classifications_of_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_remove_elements_from_classification(self, ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_remove_elements_from_classification  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_remove_elements_from_classification(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str ifc_classification_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_remove_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_remove_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def bulk_remove_elements_from_classification_with_http_info(self, ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs):  # noqa: E501
        """bulk_remove_elements_from_classification  # noqa: E501

                 Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_remove_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str ifc_classification_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'ifc_classification_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_remove_elements_from_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `bulk_remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `bulk_remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'ifc_classification_pk' is set
        if ('ifc_classification_pk' not in params or
                params['ifc_classification_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_classification_pk` when calling `bulk_remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `bulk_remove_elements_from_classification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'ifc_classification_pk' in params:
            path_params['ifc_classification_pk'] = params['ifc_classification_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/bulk_destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_classification_element_relations(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_classification_element_relations  # noqa: E501

                 create association between existing classification and existing element       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_classification_element_relations(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ElementClassificationRelation] data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_classification_element_relations_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_classification_element_relations_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_classification_element_relations_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_classification_element_relations  # noqa: E501

                 create association between existing classification and existing element       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_classification_element_relations_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ElementClassificationRelation] data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_classification_element_relations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_classification_element_relations`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_classification_element_relations`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_classification_element_relations`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_classification_element_relations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_classifications_of_element(self, ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs):  # noqa: E501
        """create_classifications_of_element  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_classifications_of_element(ifc_pk, project_pk, element_uuid, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param list[Classification] data: (required)
        :return: list[Classification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_classifications_of_element_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs):  # noqa: E501
        """create_classifications_of_element  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param list[Classification] data: (required)
        :return: list[Classification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_classifications_of_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `create_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_classifications_of_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Classification]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_element_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_element`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Element]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element_0(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_0  # noqa: E501

                 You can use the same optimized structure to post multiple elements ,property_sets, properties, definitions and units at once.         If the structure is malformed, an error 500 without more explaination will be returned           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_0(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param Element data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_element_0_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_0  # noqa: E501

                 You can use the same optimized structure to post multiple elements ,property_sets, properties, definitions and units at once.         If the structure is malformed, an error 500 without more explaination will be returned           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param Element data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_element_0`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_element_0`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_element_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_element_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element_property_set(self, ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set  # noqa: E501

                 Create an property_set that will be automatically linked to the element       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set(ifc_pk, project_pk, element_uuid, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param PropertySet data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_element_property_set_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set  # noqa: E501

                 Create an property_set that will be automatically linked to the element       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param PropertySet data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_element_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_element_property_set`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `create_element_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_element_property_set`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_element_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element_property_set_property(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_property(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param ModelProperty data: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_element_property_set_property_with_http_info(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param ModelProperty data: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element_property_set_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `create_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `create_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_element_property_set_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element_property_set_property_definition(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_property_definition(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param PropertyDefinition data: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_element_property_set_property_definition_with_http_info(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param PropertyDefinition data: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_pk', 'ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element_property_set_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `create_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `create_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `create_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_element_property_set_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element_property_set_property_definition_unit(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set_property_definition_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_property_definition_unit(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str propertydefinition_pk: (required)
        :param Unit data: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_property_set_property_definition_unit_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_property_set_property_definition_unit_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, data, **kwargs)  # noqa: E501
            return data

    def create_element_property_set_property_definition_unit_with_http_info(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, data, **kwargs):  # noqa: E501
        """create_element_property_set_property_definition_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_property_set_property_definition_unit_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str propertydefinition_pk: (required)
        :param Unit data: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_pk', 'ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'propertydefinition_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element_property_set_property_definition_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'propertydefinition_pk' is set
        if ('propertydefinition_pk' not in params or
                params['propertydefinition_pk'] is None):
            raise ValueError("Missing the required parameter `propertydefinition_pk` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_element_property_set_property_definition_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'propertydefinition_pk' in params:
            path_params['propertydefinition_pk'] = params['propertydefinition_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ifc_property_definition(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_ifc_property_definition  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_ifc_property_definition(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[PropertyDefinition] data: (required)
        :return: list[PropertyDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_ifc_property_definition_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ifc_property_definition_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_ifc_property_definition_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_ifc_property_definition  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_ifc_property_definition_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[PropertyDefinition] data: (required)
        :return: list[PropertyDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ifc_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_ifc_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertyDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ifc_unit(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_ifc_unit  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_ifc_unit(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Unit] data: (required)
        :return: list[Unit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_ifc_unit_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ifc_unit_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_ifc_unit_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_ifc_unit  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_ifc_unit_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Unit] data: (required)
        :return: list[Unit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ifc_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_ifc_unit`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_ifc_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_ifc_unit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_ifc_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Unit]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_property_set(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_property_set  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_property_set(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[PropertySet] data: (required)
        :return: list[PropertySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_property_set_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_property_set_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_property_set_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_property_set  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors          If classification created already exists, it will just be added to item's classifications and will not be duplicated       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_property_set_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[PropertySet] data: (required)
        :return: list[PropertySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_property_set`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertySet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_property_set_element_relations(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_property_set_element_relations  # noqa: E501

                 create association between existing classification and existing element       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_property_set_element_relations(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ElementPropertySetRelation] data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_property_set_element_relations_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_property_set_element_relations_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_property_set_element_relations_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_property_set_element_relations  # noqa: E501

                 create association between existing classification and existing element       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_property_set_element_relations_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ElementPropertySetRelation] data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_property_set_element_relations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_property_set_element_relations`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_property_set_element_relations`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_property_set_element_relations`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_property_set_element_relations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_space(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_space(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param Space data: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_space_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_space_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_space_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_space_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param Space data: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_space`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Space',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_zone(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_zone  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_zone(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Zone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_zone_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_zone_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_zone_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_zone  # noqa: E501

                 Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_zone_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Zone]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_zone`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_zone`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_zone`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Zone]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_zone_space(self, ifc_pk, project_pk, zone_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_zone_space(ifc_pk, project_pk, zone_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param ZoneSpace data: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def create_zone_space_with_http_info(self, ifc_pk, project_pk, zone_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """create_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param ZoneSpace data: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'zone_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zone_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `create_zone_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `create_zone_space`")  # noqa: E501
        # verify the required parameter 'zone_pk' is set
        if ('zone_pk' not in params or
                params['zone_pk'] is None):
            raise ValueError("Missing the required parameter `zone_pk` when calling `create_zone_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `create_zone_space`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_zone_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'zone_pk' in params:
            path_params['zone_pk'] = params['zone_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZoneSpace',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_element(self, ifc_pk, project_pk, cloud_pk, uuid, **kwargs):  # noqa: E501
        """delete_element  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_element(ifc_pk, project_pk, cloud_pk, uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_element_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_element_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, **kwargs)  # noqa: E501
            return data

    def delete_element_with_http_info(self, ifc_pk, project_pk, cloud_pk, uuid, **kwargs):  # noqa: E501
        """delete_element  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_element_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'uuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_element`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ifc(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_ifc_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ifc_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_ifc_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ifc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_ifc`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_ifc`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_ifc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ifc_property(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_property(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_ifc_property_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ifc_property_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_ifc_property_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_property_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ifc_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_ifc_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_ifc_property`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_ifc_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_ifc_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ifc_property_definition(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_property_definition(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_ifc_property_definition_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ifc_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_ifc_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ifc_unit(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_unit(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_ifc_unit_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ifc_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_ifc_unit`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_ifc_unit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_ifc_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_ifc_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_property_set(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_property_set(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_property_set_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_property_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_space(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_space(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_space_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_zone(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_zone(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def delete_zone_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """delete_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_zone`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_zone`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_zone`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_zone_space(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """delete_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_zone_space(ifc_pk, project_pk, zone_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def delete_zone_space_with_http_info(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """delete_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'zone_pk', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zone_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `delete_zone_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `delete_zone_space`")  # noqa: E501
        # verify the required parameter 'zone_pk' is set
        if ('zone_pk' not in params or
                params['zone_pk'] is None):
            raise ValueError("Missing the required parameter `zone_pk` when calling `delete_zone_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `delete_zone_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_zone_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'zone_pk' in params:
            path_params['zone_pk'] = params['zone_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_element(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_element  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_element(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_element_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_element  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_element`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Element]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_element_0(self, ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs):  # noqa: E501
        """full_update_element_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_element_0(ifc_pk, project_pk, cloud_pk, uuid, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :param Element data: (required)
        :return: Element
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs)  # noqa: E501
            return data

    def full_update_element_0_with_http_info(self, ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs):  # noqa: E501
        """full_update_element_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :param Element data: (required)
        :return: Element
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'uuid', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_element_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_element_0`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_element_0`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_element_0`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `full_update_element_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_element_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Element',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_ifc(self, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc(project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Ifc data: (required)
        :return: Ifc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_ifc_with_http_info(project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_ifc_with_http_info(project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_ifc_with_http_info(self, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_with_http_info(project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Ifc data: (required)
        :return: Ifc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_ifc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_ifc`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_ifc`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_ifc`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_ifc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ifc',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_ifc_property(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_property  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_property(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ModelProperty] data: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_ifc_property_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_ifc_property_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_ifc_property_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_property  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_property_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ModelProperty] data: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_ifc_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_ifc_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_ifc_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_ifc_property`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_ifc_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_ifc_property_0(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_property_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_property_0(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param ModelProperty data: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_ifc_property_0_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_ifc_property_0_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_ifc_property_0_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_property_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_property_0_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param ModelProperty data: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_ifc_property_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_ifc_property_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_ifc_property_definition(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_property_definition(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertyDefinition data: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_ifc_property_definition_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertyDefinition data: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_ifc_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_ifc_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_ifc_unit(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_unit(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Unit data: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_ifc_unit_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Unit data: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_ifc_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_ifc_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_property_set(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_property_set(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertySet data: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_property_set_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertySet data: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_property_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_property_set`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertySet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_space(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_space(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Space data: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_space_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Space data: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_space`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Space',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_zone(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_zone(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Zone data: (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_zone_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """full_update_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Zone data: (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_zone`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_zone`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_zone`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_zone`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Zone',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_zone_space(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs):  # noqa: E501
        """full_update_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_zone_space(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :param ZoneSpace data: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs)  # noqa: E501
            return data

    def full_update_zone_space_with_http_info(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs):  # noqa: E501
        """full_update_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :param ZoneSpace data: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'zone_pk', 'cloud_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_zone_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `full_update_zone_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `full_update_zone_space`")  # noqa: E501
        # verify the required parameter 'zone_pk' is set
        if ('zone_pk' not in params or
                params['zone_pk'] is None):
            raise ValueError("Missing the required parameter `zone_pk` when calling `full_update_zone_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `full_update_zone_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_zone_space`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_zone_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'zone_pk' in params:
            path_params['zone_pk'] = params['zone_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZoneSpace',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classifications_of_element(self, ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs):  # noqa: E501
        """get_classifications_of_element  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_classifications_of_element(ifc_pk, project_pk, element_uuid, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :return: list[Classification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_classifications_of_element_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs):  # noqa: E501
        """get_classifications_of_element  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_classifications_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :return: list[Classification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classifications_of_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_classifications_of_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_classifications_of_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Classification]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_element  # noqa: E501

                 Returns elements ,property_sets, properties, definitions and units in a optimized structure           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_element_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_element  # noqa: E501

                 Returns elements ,property_sets, properties, definitions and units in a optimized structure           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_0(self, ifc_pk, project_pk, cloud_pk, uuid, **kwargs):  # noqa: E501
        """get_element_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_0(ifc_pk, project_pk, cloud_pk, uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :return: Element
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, **kwargs)  # noqa: E501
            return data

    def get_element_0_with_http_info(self, ifc_pk, project_pk, cloud_pk, uuid, **kwargs):  # noqa: E501
        """get_element_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :return: Element
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'uuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_0`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_0`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_0`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_element_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Element',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set(self, ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set(ifc_pk, project_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_element_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertySet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set_properties(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_element_property_set_properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_properties(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_properties_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_properties_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_properties_with_http_info(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_element_property_set_properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_properties_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set_properties`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set_properties`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set_properties`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `get_element_property_set_properties`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set_property(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_property_with_http_info(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `get_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_element_property_set_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set_property_definition(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definition(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_property_definition_with_http_info(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_pk', 'ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `get_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `get_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_element_property_set_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set_property_definition_unit(self, project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set_property_definition_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definition_unit(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str propertyset_pk: (required)
        :param str propertydefinition_pk: (required)
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_property_definition_unit_with_http_info(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_property_definition_unit_with_http_info(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_property_definition_unit_with_http_info(self, project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """get_element_property_set_property_definition_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definition_unit_with_http_info(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str propertyset_pk: (required)
        :param str propertydefinition_pk: (required)
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'propertyset_pk', 'propertydefinition_pk', 'property_pk', 'ifc_pk', 'element_uuid', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set_property_definition_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'propertydefinition_pk' is set
        if ('propertydefinition_pk' not in params or
                params['propertydefinition_pk'] is None):
            raise ValueError("Missing the required parameter `propertydefinition_pk` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_element_property_set_property_definition_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'propertydefinition_pk' in params:
            path_params['propertydefinition_pk'] = params['propertydefinition_pk']  # noqa: E501
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set_property_definition_units(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, **kwargs):  # noqa: E501
        """get_element_property_set_property_definition_units  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definition_units(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str propertydefinition_pk: (required)
        :return: list[Unit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_property_definition_units_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_property_definition_units_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_property_definition_units_with_http_info(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, **kwargs):  # noqa: E501
        """get_element_property_set_property_definition_units  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definition_units_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, propertydefinition_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str propertydefinition_pk: (required)
        :return: list[Unit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_pk', 'ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'propertydefinition_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set_property_definition_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `get_element_property_set_property_definition_units`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set_property_definition_units`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set_property_definition_units`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set_property_definition_units`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `get_element_property_set_property_definition_units`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set_property_definition_units`")  # noqa: E501
        # verify the required parameter 'propertydefinition_pk' is set
        if ('propertydefinition_pk' not in params or
                params['propertydefinition_pk'] is None):
            raise ValueError("Missing the required parameter `propertydefinition_pk` when calling `get_element_property_set_property_definition_units`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'propertydefinition_pk' in params:
            path_params['propertydefinition_pk'] = params['propertydefinition_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Unit]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_set_property_definitions(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_element_property_set_property_definitions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definitions(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :return: list[PropertyDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_set_property_definitions_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_set_property_definitions_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_element_property_set_property_definitions_with_http_info(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_element_property_set_property_definitions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_set_property_definitions_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :return: list[PropertyDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_pk', 'ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_set_property_definitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `get_element_property_set_property_definitions`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_set_property_definitions`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_set_property_definitions`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_set_property_definitions`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `get_element_property_set_property_definitions`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_set_property_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertyDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_property_sets(self, ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs):  # noqa: E501
        """get_element_property_sets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_sets(ifc_pk, project_pk, element_uuid, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :return: list[PropertySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_property_sets_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_property_sets_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_element_property_sets_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, **kwargs):  # noqa: E501
        """get_element_property_sets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_property_sets_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :return: list[PropertySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_property_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_element_property_sets`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_element_property_sets`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `get_element_property_sets`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_element_property_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertySet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_elements(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_elements  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_elements(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_elements_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_elements_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_elements_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_elements  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_elements_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_elements`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_elements`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_elements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Element]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_elements_from_classification(self, ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_elements_from_classification  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_elements_from_classification(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str ifc_classification_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_elements_from_classification_with_http_info(self, ifc_pk, project_pk, ifc_classification_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_elements_from_classification  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str ifc_classification_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'ifc_classification_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_elements_from_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'ifc_classification_pk' is set
        if ('ifc_classification_pk' not in params or
                params['ifc_classification_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_classification_pk` when calling `get_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_elements_from_classification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'ifc_classification_pk' in params:
            path_params['ifc_classification_pk'] = params['ifc_classification_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Element]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Ifc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Ifc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ifc',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_bvh(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_bvh  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_bvh(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_bvh_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_bvh_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_bvh_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_bvh  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_bvh_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_bvh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_bvh`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_bvh`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_bvh`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/bvh', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_classifications(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_classifications  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_classifications(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Classification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_classifications_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_classifications_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_classifications_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_classifications  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_classifications_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Classification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_classifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_classifications`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_classifications`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_classifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Classification]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_gltf(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_gltf  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_gltf(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_gltf_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_gltf_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_gltf_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_gltf  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_gltf_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_gltf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_gltf`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_gltf`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_gltf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/gltf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_map(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_map  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_map(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_map_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_map_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_map_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_map  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_map_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_map" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_map`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_map`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/map', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_properties(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_properties(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_properties_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_properties_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_properties_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_properties_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_properties`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_properties`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_property(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_property(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_property_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_property_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_property_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_property_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_property`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_property_definition(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_property_definition(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_property_definition_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_property_definitions(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_property_definitions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_property_definitions(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[PropertyDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_property_definitions_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_property_definitions_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_property_definitions_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_property_definitions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_property_definitions_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[PropertyDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_property_definitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_property_definitions`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_property_definitions`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_property_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertyDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_structure(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_structure  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_structure(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_structure_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_structure_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_structure_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_structure  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_structure_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_structure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_structure`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_structure`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_structure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/structure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_systems(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_systems  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_systems(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_systems_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_systems_with_http_info(project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_systems_with_http_info(self, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_systems  # noqa: E501

                 DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_systems_with_http_info(project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_systems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_systems`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_systems`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_systems`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/systems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_unit(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_unit(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_unit_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_unit`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_unit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ifc_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifc_units(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_units  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_units(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Unit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifc_units_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifc_units_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifc_units_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifc_units  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifc_units_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Unit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifc_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_ifc_units`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifc_units`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifc_units`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Unit]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ifcs(self, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifcs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifcs(project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Ifc]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_ifcs_with_http_info(project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ifcs_with_http_info(project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_ifcs_with_http_info(self, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_ifcs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_ifcs_with_http_info(project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Ifc]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ifcs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_ifcs`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_ifcs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Ifc]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_property_set(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_property_set(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_property_set_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_property_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertySet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_property_sets(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_property_sets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_property_sets(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[PropertySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_property_sets_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_sets_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_property_sets_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_property_sets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_property_sets_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[PropertySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_property_sets`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_property_sets`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_property_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertySet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_space(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_space(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_space_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Space',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spaces(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_spaces  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_spaces(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Space]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_spaces_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spaces_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_spaces_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_spaces  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_spaces_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Space]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_spaces`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_spaces`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_spaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Space]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zone(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_zone_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, **kwargs):  # noqa: E501
        """get_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_zone`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_zone`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_zone`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Zone',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zone_space(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """get_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_space(ifc_pk, project_pk, zone_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def get_zone_space_with_http_info(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """get_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'zone_pk', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zone_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_zone_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_zone_space`")  # noqa: E501
        # verify the required parameter 'zone_pk' is set
        if ('zone_pk' not in params or
                params['zone_pk'] is None):
            raise ValueError("Missing the required parameter `zone_pk` when calling `get_zone_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_zone_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_zone_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'zone_pk' in params:
            path_params['zone_pk'] = params['zone_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZoneSpace',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zone_spaces(self, ifc_pk, project_pk, zone_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_zone_spaces  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_spaces(ifc_pk, project_pk, zone_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :return: list[ZoneSpace]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_zone_spaces_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zone_spaces_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_zone_spaces_with_http_info(self, ifc_pk, project_pk, zone_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_zone_spaces  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_spaces_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :return: list[ZoneSpace]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'zone_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zone_spaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_zone_spaces`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_zone_spaces`")  # noqa: E501
        # verify the required parameter 'zone_pk' is set
        if ('zone_pk' not in params or
                params['zone_pk'] is None):
            raise ValueError("Missing the required parameter `zone_pk` when calling `get_zone_spaces`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_zone_spaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'zone_pk' in params:
            path_params['zone_pk'] = params['zone_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ZoneSpace]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zones(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_zones  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zones(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Zone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_zones_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zones_with_http_info(ifc_pk, project_pk, cloud_pk, **kwargs)  # noqa: E501
            return data

    def get_zones_with_http_info(self, ifc_pk, project_pk, cloud_pk, **kwargs):  # noqa: E501
        """get_zones  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zones_with_http_info(ifc_pk, project_pk, cloud_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :return: list[Zone]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `get_zones`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `get_zones`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `get_zones`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Zone]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_classification_of_element(self, ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_classification_of_element  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_classification_of_element(ifc_pk, project_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_classification_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_classification_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def remove_classification_of_element_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_classification_of_element  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_classification_of_element_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_classification_of_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `remove_classification_of_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `remove_classification_of_element`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `remove_classification_of_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `remove_classification_of_element`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_classification_of_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_element_property_set(self, ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set  # noqa: E501

                 Delete the relation between the element and the property set. Does not delete any object       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set(ifc_pk, project_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def remove_element_property_set_with_http_info(self, ifc_pk, project_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set  # noqa: E501

                 Delete the relation between the element and the property set. Does not delete any object       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_with_http_info(ifc_pk, project_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_element_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `remove_element_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `remove_element_property_set`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `remove_element_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `remove_element_property_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_element_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_element_property_set_property(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_property(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def remove_element_property_set_property_with_http_info(self, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set_property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_property_with_http_info(ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_element_property_set_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `remove_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `remove_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `remove_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `remove_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `remove_element_property_set_property`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_element_property_set_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_element_property_set_property_definition(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_property_definition(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def remove_element_property_set_property_definition_with_http_info(self, property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_property_definition_with_http_info(property_pk, ifc_pk, project_pk, element_uuid, propertyset_pk, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str element_uuid: (required)
        :param str propertyset_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_pk', 'ifc_pk', 'project_pk', 'element_uuid', 'propertyset_pk', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_element_property_set_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `remove_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `remove_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `remove_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `remove_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `remove_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `remove_element_property_set_property_definition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_element_property_set_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_element_property_set_property_definition_unit(self, project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set_property_definition_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_property_definition_unit(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str propertyset_pk: (required)
        :param str propertydefinition_pk: (required)
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_element_property_set_property_definition_unit_with_http_info(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_element_property_set_property_definition_unit_with_http_info(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs)  # noqa: E501
            return data

    def remove_element_property_set_property_definition_unit_with_http_info(self, project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, **kwargs):  # noqa: E501
        """remove_element_property_set_property_definition_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_element_property_set_property_definition_unit_with_http_info(project_pk, propertyset_pk, propertydefinition_pk, property_pk, ifc_pk, element_uuid, cloud_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str propertyset_pk: (required)
        :param str propertydefinition_pk: (required)
        :param str property_pk: (required)
        :param str ifc_pk: (required)
        :param str element_uuid: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'propertyset_pk', 'propertydefinition_pk', 'property_pk', 'ifc_pk', 'element_uuid', 'cloud_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_element_property_set_property_definition_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'propertyset_pk' is set
        if ('propertyset_pk' not in params or
                params['propertyset_pk'] is None):
            raise ValueError("Missing the required parameter `propertyset_pk` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'propertydefinition_pk' is set
        if ('propertydefinition_pk' not in params or
                params['propertydefinition_pk'] is None):
            raise ValueError("Missing the required parameter `propertydefinition_pk` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'property_pk' is set
        if ('property_pk' not in params or
                params['property_pk'] is None):
            raise ValueError("Missing the required parameter `property_pk` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'element_uuid' is set
        if ('element_uuid' not in params or
                params['element_uuid'] is None):
            raise ValueError("Missing the required parameter `element_uuid` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_element_property_set_property_definition_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'propertyset_pk' in params:
            path_params['propertyset_pk'] = params['propertyset_pk']  # noqa: E501
        if 'propertydefinition_pk' in params:
            path_params['propertydefinition_pk'] = params['propertydefinition_pk']  # noqa: E501
        if 'property_pk' in params:
            path_params['property_pk'] = params['property_pk']  # noqa: E501
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'element_uuid' in params:
            path_params['element_uuid'] = params['element_uuid']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_elements_from_classification(self, ifc_pk, project_pk, ifc_classification_pk, cloud_pk, uuid, **kwargs):  # noqa: E501
        """remove_elements_from_classification  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_elements_from_classification(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str ifc_classification_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, uuid, **kwargs)  # noqa: E501
            return data

    def remove_elements_from_classification_with_http_info(self, ifc_pk, project_pk, ifc_classification_pk, cloud_pk, uuid, **kwargs):  # noqa: E501
        """remove_elements_from_classification  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_elements_from_classification_with_http_info(ifc_pk, project_pk, ifc_classification_pk, cloud_pk, uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str ifc_classification_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'ifc_classification_pk', 'cloud_pk', 'uuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_elements_from_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'ifc_classification_pk' is set
        if ('ifc_classification_pk' not in params or
                params['ifc_classification_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_classification_pk` when calling `remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `remove_elements_from_classification`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `remove_elements_from_classification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'ifc_classification_pk' in params:
            path_params['ifc_classification_pk'] = params['ifc_classification_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_element(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """update_element  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_element(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_element_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """update_element  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_element_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[Element] data: (required)
        :return: list[Element]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_element`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_element`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_element`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Element]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_element_0(self, ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs):  # noqa: E501
        """update_element_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_element_0(ifc_pk, project_pk, cloud_pk, uuid, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :param Element data: (required)
        :return: Element
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs)  # noqa: E501
            return data

    def update_element_0_with_http_info(self, ifc_pk, project_pk, cloud_pk, uuid, data, **kwargs):  # noqa: E501
        """update_element_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_element_0_with_http_info(ifc_pk, project_pk, cloud_pk, uuid, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param str uuid: (required)
        :param Element data: (required)
        :return: Element
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'uuid', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_element_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_element_0`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_element_0`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_element_0`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_element_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_element_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Element',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ifc(self, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc(project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Ifc data: (required)
        :return: Ifc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_ifc_with_http_info(project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ifc_with_http_info(project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_ifc_with_http_info(self, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_with_http_info(project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Ifc data: (required)
        :return: Ifc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ifc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_ifc`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_ifc`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_ifc`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_ifc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ifc',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ifc_property(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_property  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_property(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ModelProperty] data: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_ifc_property_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ifc_property_with_http_info(ifc_pk, project_pk, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_ifc_property_with_http_info(self, ifc_pk, project_pk, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_property  # noqa: E501

                 Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_property_with_http_info(ifc_pk, project_pk, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str cloud_pk: (required)
        :param list[ModelProperty] data: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ifc_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_ifc_property`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_ifc_property`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_ifc_property`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_ifc_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ifc_property_0(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_property_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_property_0(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param ModelProperty data: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_ifc_property_0_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ifc_property_0_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_ifc_property_0_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_property_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_property_0_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param ModelProperty data: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ifc_property_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_ifc_property_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_ifc_property_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ifc_property_definition(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_property_definition(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertyDefinition data: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_ifc_property_definition_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_property_definition  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_property_definition_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertyDefinition data: (required)
        :return: PropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ifc_property_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_ifc_property_definition`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_ifc_property_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ifc_unit(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_unit(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Unit data: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_ifc_unit_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_ifc_unit  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_ifc_unit_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Unit data: (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ifc_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_ifc_unit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_ifc_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_property_set(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_property_set(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertySet data: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_property_set_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_property_set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_property_set_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param PropertySet data: (required)
        :return: PropertySet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_property_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_property_set`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_property_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_property_set`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_property_set`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_property_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertySet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_space(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_space(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Space data: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_space_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_space_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Space data: (required)
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_space`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Space',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_zone(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_zone(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Zone data: (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, **kwargs)  # noqa: E501
            return data

    def update_zone_with_http_info(self, ifc_pk, project_pk, id, cloud_pk, data, **kwargs):  # noqa: E501
        """update_zone  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_zone_with_http_info(ifc_pk, project_pk, id, cloud_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str id: (required)
        :param str cloud_pk: (required)
        :param Zone data: (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'id', 'cloud_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_zone`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_zone`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_zone`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_zone`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Zone',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_zone_space(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs):  # noqa: E501
        """update_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_zone_space(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :param ZoneSpace data: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs)  # noqa: E501
            return data

    def update_zone_space_with_http_info(self, ifc_pk, project_pk, zone_pk, cloud_pk, id, data, **kwargs):  # noqa: E501
        """update_zone_space  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_zone_space_with_http_info(ifc_pk, project_pk, zone_pk, cloud_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ifc_pk: (required)
        :param str project_pk: (required)
        :param str zone_pk: (required)
        :param str cloud_pk: (required)
        :param str id: (required)
        :param ZoneSpace data: (required)
        :return: ZoneSpace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifc_pk', 'project_pk', 'zone_pk', 'cloud_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_zone_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifc_pk' is set
        if ('ifc_pk' not in params or
                params['ifc_pk'] is None):
            raise ValueError("Missing the required parameter `ifc_pk` when calling `update_zone_space`")  # noqa: E501
        # verify the required parameter 'project_pk' is set
        if ('project_pk' not in params or
                params['project_pk'] is None):
            raise ValueError("Missing the required parameter `project_pk` when calling `update_zone_space`")  # noqa: E501
        # verify the required parameter 'zone_pk' is set
        if ('zone_pk' not in params or
                params['zone_pk'] is None):
            raise ValueError("Missing the required parameter `zone_pk` when calling `update_zone_space`")  # noqa: E501
        # verify the required parameter 'cloud_pk' is set
        if ('cloud_pk' not in params or
                params['cloud_pk'] is None):
            raise ValueError("Missing the required parameter `cloud_pk` when calling `update_zone_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_zone_space`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_zone_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifc_pk' in params:
            path_params['ifc_pk'] = params['ifc_pk']  # noqa: E501
        if 'project_pk' in params:
            path_params['project_pk'] = params['project_pk']  # noqa: E501
        if 'zone_pk' in params:
            path_params['zone_pk'] = params['zone_pk']  # noqa: E501
        if 'cloud_pk' in params:
            path_params['cloud_pk'] = params['cloud_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZoneSpace',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
