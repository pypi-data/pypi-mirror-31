# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bimdata_api_client.api_client import ApiClient


class BcfApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bcf2_1_current_user_list(self, **kwargs):  # noqa: E501
        """bcf2_1_current_user_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_current_user_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[SelfUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_current_user_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_current_user_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def bcf2_1_current_user_list_with_http_info(self, **kwargs):  # noqa: E501
        """bcf2_1_current_user_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_current_user_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[SelfUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_current_user_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/current-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SelfUser]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_create(self, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_create(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_create_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_delete(self, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_documents_create(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_create(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_documents_create_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_documents_create_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_documents_create_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_create_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'guid', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_documents_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_documents_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'guid' in params:
            form_params.append(('guid', params['guid']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_documents_delete(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_delete(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_documents_delete_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_documents_delete_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_documents_delete_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_delete_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_documents_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_documents_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_documents_list(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_list(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_documents_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_documents_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_documents_list_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_list_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_documents_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_documents_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_documents_partial_update(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_partial_update(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_documents_partial_update_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_documents_partial_update_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_documents_partial_update_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_partial_update_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id', 'guid', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_documents_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_documents_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_documents_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'guid' in params:
            form_params.append(('guid', params['guid']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_documents_read(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_read(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_documents_read_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_documents_read_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_documents_read_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_read_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_documents_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_documents_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_documents_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_documents_update(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_update(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_documents_update_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_documents_update_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_documents_update_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_documents_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_documents_update_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id', 'guid', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_documents_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_documents_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_documents_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'guid' in params:
            form_params.append(('guid', params['guid']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_extensions_list(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_extensions_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_extensions_list(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Extensions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_extensions_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_extensions_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_extensions_list_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_extensions_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_extensions_list_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Extensions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_extensions_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_extensions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Extensions]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_list(self, **kwargs):  # noqa: E501
        """bcf2_1_projects_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_list_with_http_info(self, **kwargs):  # noqa: E501
        """bcf2_1_projects_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BcfProject]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_partial_update(self, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_partial_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_partial_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_read(self, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_events_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_create_0(self, topics_pk, projects_pk, comments_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_create_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_create_0(topics_pk, projects_pk, comments_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str comments_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_create_0_with_http_info(topics_pk, projects_pk, comments_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_create_0_with_http_info(topics_pk, projects_pk, comments_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_create_0_with_http_info(self, topics_pk, projects_pk, comments_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_create_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_create_0_with_http_info(topics_pk, projects_pk, comments_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str comments_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'comments_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_create_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_create_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_create_0`")  # noqa: E501
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_create_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_events_create_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_delete_0(self, topics_pk, projects_pk, id, comments_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete_0(topics_pk, projects_pk, id, comments_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_delete_0_with_http_info(topics_pk, projects_pk, id, comments_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_delete_0_with_http_info(topics_pk, projects_pk, id, comments_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_delete_0_with_http_info(self, topics_pk, projects_pk, id, comments_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete_0_with_http_info(topics_pk, projects_pk, id, comments_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'comments_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_delete_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_list(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_list(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_list_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_list_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/comments/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommentEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_list_0(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_list_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_list_0(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_list_0_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_list_0_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_list_0_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_list_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_list_0_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_list_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommentEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_list_1(self, topics_pk, projects_pk, comments_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_list_1  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_list_1(topics_pk, projects_pk, comments_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str comments_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_list_1_with_http_info(topics_pk, projects_pk, comments_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_list_1_with_http_info(topics_pk, projects_pk, comments_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_list_1_with_http_info(self, topics_pk, projects_pk, comments_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_list_1  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_list_1_with_http_info(topics_pk, projects_pk, comments_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str comments_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'comments_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_list_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_list_1`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_list_1`")  # noqa: E501
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_list_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommentEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_events_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_partial_update_0(self, topics_pk, projects_pk, id, comments_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_partial_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_partial_update_0(topics_pk, projects_pk, id, comments_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_partial_update_0_with_http_info(topics_pk, projects_pk, id, comments_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_partial_update_0_with_http_info(topics_pk, projects_pk, id, comments_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_partial_update_0_with_http_info(self, topics_pk, projects_pk, id, comments_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_partial_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_partial_update_0_with_http_info(topics_pk, projects_pk, id, comments_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'comments_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_partial_update_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_events_partial_update_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_read_0(self, topics_pk, projects_pk, id, comments_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_read_0(topics_pk, projects_pk, id, comments_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_read_0_with_http_info(topics_pk, projects_pk, id, comments_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_read_0_with_http_info(topics_pk, projects_pk, id, comments_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_read_0_with_http_info(self, topics_pk, projects_pk, id, comments_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_read_0_with_http_info(topics_pk, projects_pk, id, comments_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'comments_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_read_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_read_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_read_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_read_0`")  # noqa: E501
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_read_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_events_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_update_0(self, topics_pk, projects_pk, id, comments_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_update_0(topics_pk, projects_pk, id, comments_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_update_0_with_http_info(topics_pk, projects_pk, id, comments_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_update_0_with_http_info(topics_pk, projects_pk, id, comments_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_update_0_with_http_info(self, topics_pk, projects_pk, id, comments_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_update_0_with_http_info(topics_pk, projects_pk, id, comments_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param str comments_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'comments_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_update_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_update_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_update_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_update_0`")  # noqa: E501
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_update_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_events_update_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_list(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_list(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_list_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_list_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Comment]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_comments_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_create(self, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_create(projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_create_with_http_info(projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_create_with_http_info(projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_create_with_http_info(self, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_create_with_http_info(projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_delete(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_delete(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_delete_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_delete_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_delete_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_delete_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_document_references_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_document_references_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_document_references_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_document_references_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_document_references_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_document_references_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_document_references_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_document_references_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_document_references_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_document_references_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_document_references_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_document_references_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_document_references_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_document_references_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_document_references_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_document_references_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_document_references_list(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_list(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[DocumentReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_document_references_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_document_references_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_document_references_list_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_list_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[DocumentReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_document_references_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_document_references_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_document_references_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DocumentReference]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_document_references_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_document_references_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_document_references_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_document_references_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_document_references_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_document_references_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_document_references_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_document_references_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_document_references_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_document_references_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_document_references_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_document_references_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_document_references_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_document_references_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_document_references_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_document_references_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_document_references_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_document_references_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_document_references_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_document_references_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_document_references_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_document_references_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_document_references_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_document_references_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_document_references_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_document_references_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_document_references_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_document_references_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_create(self, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_create(projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_create_with_http_info(projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_create_with_http_info(projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_create_with_http_info(self, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_create_with_http_info(projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_events_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_create_0(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_create_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_create_0(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_create_0_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_create_0_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_create_0_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_create_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_create_0_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_create_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_create_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_create_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_events_create_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_delete(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_delete(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_delete_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_delete_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_delete_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_delete_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_delete_0(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_delete_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_delete_0(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_delete_0_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_delete_0_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_delete_0_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_delete_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_delete_0_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_delete_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_delete_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_delete_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_list(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_list(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_list_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_list_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TopicEvents]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_list_0(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_list_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_list_0(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_list_0_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_list_0_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_list_0_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_list_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_list_0_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_list_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TopicEvents]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_partial_update(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_partial_update(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_partial_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_partial_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_partial_update_with_http_info(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_partial_update_with_http_info(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_events_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_partial_update_0(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_partial_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_partial_update_0(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_partial_update_0_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_partial_update_0_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_partial_update_0_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_partial_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_partial_update_0_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_partial_update_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_partial_update_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_events_partial_update_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_read(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_read(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_read_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_read_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_read_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_read_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_read_0(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_read_0(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_read_0_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_read_0_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_read_0_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_read_0_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_read_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_read_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_read_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_read_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_update(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_update(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_update_with_http_info(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_update_with_http_info(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_events_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_update_0(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_update_0(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_update_0_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_update_0_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_update_0_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_update_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_update_0_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_update_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_update_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_update_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_update_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_events_update_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_file_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_file_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_file_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_file_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_file_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_file_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_file_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_file_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_file_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_file_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_file_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_file_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_file_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_file_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_file_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_file_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_file_list(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_list(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_file_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_file_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_file_list_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_list_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_file_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_file_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_file_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BimSnippet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_file_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_file_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_file_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_file_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_file_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_file_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_file_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_file_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_file_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_file_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_file_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_file_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_file_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_file_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_file_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_file_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_file_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_file_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_file_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_file_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_file_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_file_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_file_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_file_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_file_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_file_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_file_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_file_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_list(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_list(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_list_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_list_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_list_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Topic]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_partial_update(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_partial_update(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_partial_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_partial_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_partial_update_with_http_info(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_partial_update_with_http_info(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_read(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_read(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_read_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_read_with_http_info(projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_read_with_http_info(self, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_read_with_http_info(projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_related_topics_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_related_topics_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_related_topics_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_related_topics_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_related_topics_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_related_topics_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_related_topics_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_related_topics_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_related_topics_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_related_topics_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_related_topics_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_related_topics_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_related_topics_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_related_topics_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_related_topics_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_related_topics_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_related_topics_list(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_list(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[RelatedTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_related_topics_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_related_topics_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_related_topics_list_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_list_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[RelatedTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_related_topics_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_related_topics_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_related_topics_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RelatedTopic]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_related_topics_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_related_topics_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_related_topics_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_related_topics_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_related_topics_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_related_topics_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_related_topics_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_related_topics_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_related_topics_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_related_topics_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_related_topics_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_related_topics_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_related_topics_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_related_topics_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_related_topics_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_related_topics_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_related_topics_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_related_topics_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_related_topics_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_related_topics_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_related_topics_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_related_topics_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_related_topics_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_related_topics_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_related_topics_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_related_topics_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_related_topics_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_related_topics_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_snippet_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_snippet_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_snippet_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_snippet_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_snippet_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_snippet_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_snippet_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_snippet_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_snippet_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_snippet_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_snippet_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_snippet_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_snippet_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_snippet_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_snippet_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_snippet_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_snippet_list(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_list(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_snippet_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_snippet_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_snippet_list_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_list_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_snippet_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_snippet_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_snippet_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BimSnippet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_snippet_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_snippet_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_snippet_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_snippet_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_snippet_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_snippet_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_snippet_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_snippet_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_snippet_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_snippet_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_snippet_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_snippet_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_snippet_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_snippet_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_snippet_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_snippet_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_snippet_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_snippet_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_snippet_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_snippet_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_snippet_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_snippet_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_snippet_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_snippet_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_snippet_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_snippet_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_snippet_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_snippet_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_update(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_update(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_update_with_http_info(projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_update_with_http_info(self, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_update_with_http_info(projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str id: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_create(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_create(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_create_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_create`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_bitmap_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_delete(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_delete(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_list(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_list(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Bitmap]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_list_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Bitmap]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_list`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Bitmap]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_partial_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_partial_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_partial_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_partial_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_bitmap_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_bitmap_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_read(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_read(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_read_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_read`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_bitmap_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_bitmap_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_bitmap_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_create(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_create(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_create_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_create`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_coloring_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_delete(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_delete(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_list(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_list(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_list_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_list`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Coloring]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_partial_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_partial_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_partial_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_partial_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_coloring_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_coloring_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_read(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_read(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_read_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_read`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_coloring_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_coloring_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_coloring_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_create(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_create(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_create_with_http_info(topics_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_create_with_http_info(self, topics_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_create_with_http_info(topics_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_delete(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_delete(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_delete_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_delete_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_delete_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_list(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_list(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_list_with_http_info(topics_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_list_with_http_info(self, topics_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_list_with_http_info(topics_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Viewpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_partial_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_partial_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_partial_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_partial_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_partial_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_read(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_read(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_read_with_http_info(topics_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_read_with_http_info(self, topics_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_read_with_http_info(topics_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_create(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_create(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_create_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_create`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_selection_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_delete(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_delete(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_list(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_list(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_list_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_list`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_partial_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_partial_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_partial_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_partial_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_selection_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_selection_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_read(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_read(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_read_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_read`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_selection_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_selection_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_selection_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_snapshot_list(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_snapshot_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_snapshot_list(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_snapshot_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_snapshot_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_snapshot_list_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_snapshot_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_snapshot_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_snapshot_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_snapshot_list`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_snapshot_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_snapshot_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Snapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_update(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_update(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_update_with_http_info(topics_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_update_with_http_info(self, topics_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_update_with_http_info(topics_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_create(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_create(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_create_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_create_with_http_info(topics_pk, viewpoints_pk, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_create`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_create`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_visibility_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_delete(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_delete(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_list(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_list(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Visibility]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_list_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_list_with_http_info(topics_pk, viewpoints_pk, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :return: list[Visibility]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_list`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_list`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Visibility]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_partial_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_partial_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_partial_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_partial_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_partial_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_partial_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_visibility_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_visibility_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_read(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_read(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_read_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_read_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_read`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_read`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_visibility_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_update(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_update(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_update_with_http_info(self, topics_pk, viewpoints_pk, projects_pk, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_update_with_http_info(topics_pk, viewpoints_pk, projects_pk, id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topics_pk: (required)
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str id: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics_pk', 'viewpoints_pk', 'projects_pk', 'id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_update`")  # noqa: E501
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_update`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_visibility_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_topics_viewpoints_visibility_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_update(self, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """bcf2_1_projects_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf2_1_projects_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_create(self, data, **kwargs):  # noqa: E501
        """bcf_versions_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_create(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def bcf_versions_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """bcf_versions_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_create_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf_versions_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_delete(self, id, **kwargs):  # noqa: E501
        """bcf_versions_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bcf_versions_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """bcf_versions_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf_versions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_list(self, **kwargs):  # noqa: E501
        """bcf_versions_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Version]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def bcf_versions_list_with_http_info(self, **kwargs):  # noqa: E501
        """bcf_versions_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Version]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Version]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_partial_update(self, id, data, **kwargs):  # noqa: E501
        """bcf_versions_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_partial_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def bcf_versions_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """bcf_versions_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_partial_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf_versions_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf_versions_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_read(self, id, **kwargs):  # noqa: E501
        """bcf_versions_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bcf_versions_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """bcf_versions_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf_versions_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_update(self, id, data, **kwargs):  # noqa: E501
        """bcf_versions_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def bcf_versions_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """bcf_versions_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf_versions_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `bcf_versions_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
