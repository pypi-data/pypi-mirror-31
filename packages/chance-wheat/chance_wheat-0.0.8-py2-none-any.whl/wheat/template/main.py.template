#!/usr/bin/env python
# -*- coding: utf-8 -*-
# File              : wheat/template/main.py.template
# Author            : Jimin Huang <huangjimin@whu.edu.cn>
# Date              : 06.02.2018
# Last Modified Date: 06.02.2018
# Last Modified By  : Jimin Huang <huangjimin@whu.edu.cn>
# -*- coding: utf-8 -*-
# File: {FILE_NAME}
# Author: {AUTHOR_NAME}
"""{PROJECT_NAME}

Usage:
    {PROJECT_NAME} [--config=CONFIG]
    {PROJECT_NAME} (-h | --help)
    {PROJECT_NAME} --version

Options:
    -h --help               Show help info.
    --version               Show version.
    --config=CONFIG         Set database config. [default: deploy]
"""
import arrow
import logging
import os

from chanconfig import Config
from docopt import docopt
from logging.config import dictConfig
from orm.session import DBSessionMaker
from plantain.connections import KafkaConnection

from {PROJECT_NAME} import utils
from {PROJECT_NAME}.constant import (
    CONFIGS, KAFKA_EXCEPTIONS_TOPIC, INSTANCE_ERROR, PROJECT_NAME
)


LOGGER = logging.getLogger(__name__)


def initialize_logger(config):
    """initial logger config

    Args:
        config: a dict for logging config
    """
    dictConfig(config._dict)
    LOGGER.info('Initialize logger')


def read_arguments():
    """Read arguments from stdin and config file

    Return:
        a dict of arguments
    """
    try:
        timeout = int(os.getenv('{ENV_NAME}_CONSUMER_TIMEOUT_MS'))
    except (TypeError, ValueError):
        timeout = None
    argv = docopt(__doc__, version='{PROJECT_NAME} V0.0.1')
    config = Config(*CONFIGS[argv['--config']])
    config.update(argv)
    config.update({
        'consumer_timeout_ms': timeout,
        'auto_offset_reset': os.getenv(
            '{ENV_NAME}_AUTO_OFFSET_RESET', default='latest'
        ),
        'kafka_host': os.getenv('KAFKA_HOST'),
    })
    return config


@KafkaConnection.with_producer()
def run(statistics, producer):
    """Run main logic

    Args:
        statistics: a `Statistics`
        producer: a `KafkaProducer`
    """
    pass


def main():
    """Entrance
    """
    present_time = arrow.now().naive
    logging_config = Config(*CONFIGS['logging'])
    initialize_logger(logging_config)

    configs = read_arguments()
    instance_id = utils.generate_instance_id(present_time, PROJECT_NAME)
    statistics = utils.create_statistics(instance_id)

    KafkaConnection.connect([configs.kafka_host])
    DBSessionMaker.connect(**configs.mysql)

    try:
        run(statistics)
    except Exception, e:
        LOGGER.exception(e)
        statistics.exception_info = str(e)
        statistics.status = INSTANCE_ERROR
        statistics.finish_time = arrow.now().format()
        KafkaConnection.producer.send(KAFKA_EXCEPTIONS_TOPIC, str(statistics))

    DBSessionMaker.close()
    KafkaConnection.close()
