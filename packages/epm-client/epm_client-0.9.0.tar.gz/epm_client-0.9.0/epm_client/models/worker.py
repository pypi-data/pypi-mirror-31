# coding: utf-8

"""
    EPM REST API

    REST API description of the ElasTest Platform Manager Module.

    OpenAPI spec version: 0.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Worker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, ip=None, user=None, passphrase=None, password=None, epm_ip=None, keyname=None):
        """
        Worker - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'ip': 'str',
            'user': 'str',
            'passphrase': 'str',
            'password': 'str',
            'epm_ip': 'str',
            'keyname': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'ip': 'ip',
            'user': 'user',
            'passphrase': 'passphrase',
            'password': 'password',
            'epm_ip': 'epmIp',
            'keyname': 'keyname'
        }

        self._id = id
        self._ip = ip
        self._user = user
        self._passphrase = passphrase
        self._password = password
        self._epm_ip = epm_ip
        self._keyname = keyname

    @property
    def id(self):
        """
        Gets the id of this Worker.

        :return: The id of this Worker.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Worker.

        :param id: The id of this Worker.
        :type: str
        """

        self._id = id

    @property
    def ip(self):
        """
        Gets the ip of this Worker.

        :return: The ip of this Worker.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this Worker.

        :param ip: The ip of this Worker.
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def user(self):
        """
        Gets the user of this Worker.

        :return: The user of this Worker.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Worker.

        :param user: The user of this Worker.
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def passphrase(self):
        """
        Gets the passphrase of this Worker.

        :return: The passphrase of this Worker.
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """
        Sets the passphrase of this Worker.

        :param passphrase: The passphrase of this Worker.
        :type: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")

        self._passphrase = passphrase

    @property
    def password(self):
        """
        Gets the password of this Worker.

        :return: The password of this Worker.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Worker.

        :param password: The password of this Worker.
        :type: str
        """

        self._password = password

    @property
    def epm_ip(self):
        """
        Gets the epm_ip of this Worker.

        :return: The epm_ip of this Worker.
        :rtype: str
        """
        return self._epm_ip

    @epm_ip.setter
    def epm_ip(self, epm_ip):
        """
        Sets the epm_ip of this Worker.

        :param epm_ip: The epm_ip of this Worker.
        :type: str
        """
        if epm_ip is None:
            raise ValueError("Invalid value for `epm_ip`, must not be `None`")

        self._epm_ip = epm_ip

    @property
    def keyname(self):
        """
        Gets the keyname of this Worker.

        :return: The keyname of this Worker.
        :rtype: str
        """
        return self._keyname

    @keyname.setter
    def keyname(self, keyname):
        """
        Sets the keyname of this Worker.

        :param keyname: The keyname of this Worker.
        :type: str
        """
        if keyname is None:
            raise ValueError("Invalid value for `keyname`, must not be `None`")

        self._keyname = keyname

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Worker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
