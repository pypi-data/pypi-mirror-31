#!/usr/bin/env python

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Analyze an entire project using pytype."""

from __future__ import print_function

import argparse
import sys

import importlab.environment
import importlab.fs
import importlab.graph
import importlab.output

from pytype.tools import environment
from pytype.tools import utils
from pytype.tools.analyze_project import config
from pytype.tools.analyze_project import pytype_runner


def parse_args():
  """Parse command line args."""

  parser = argparse.ArgumentParser()
  parser.add_argument(
      'filenames', metavar='filename', type=str, nargs='*',
      help='input file(s)')
  parser.add_argument(
      '--tree', dest='tree', action='store_true', default=False,
      help='Display import tree.')
  parser.add_argument(
      '--unresolved', dest='unresolved', action='store_true', default=False,
      help='Display unresolved dependencies.')
  parser.add_argument(
      '--quiet', dest='quiet', action='store_true', default=False,
      help="Don't print errors to stdout.")
  parser.add_argument(
      '--config', dest='config', type=str, action='store', default='',
      help='Configuration file.')
  parser.add_argument(
      '--generate-config', dest='generate_config', type=str, action='store',
      default='',
      help='Write out a dummy configuration file.')
  return parser.parse_args()


def read_config_file(args):
  ret = config.Config()
  if args.config:
    ret.read_from_file(args.config)
  else:
    print('Warning: No config file specified. Using default configuration.')
  return ret


class PytdFileSystem(importlab.fs.ExtensionRemappingFileSystem):
  """File system that remaps .py file extensions to pytd."""

  def __init__(self, underlying):
    super(PytdFileSystem, self).__init__(underlying, 'pytd')


def create_importlab_environment(conf, typeshed):
  """Create an importlab environment from the python version and path."""
  python_version = utils.split_version(conf.python_version)
  path = importlab.fs.Path()
  for p in conf.pythonpath:
    path.add_path(p, 'os')
  for p in typeshed.get_pytd_paths(python_version):
    path.add_fs(PytdFileSystem(importlab.fs.OSFileSystem(p)))
  for p in typeshed.get_typeshed_paths(python_version):
    path.add_path(p, 'pyi')
  return importlab.environment.Environment(path, python_version)


def main():
  args = parse_args()

  if args.generate_config:
    config.generate_sample_config(args.generate_config)
    sys.exit(0)

  conf = read_config_file(args)
  print('Configuration:')
  conf.show()
  print()

  typeshed = environment.initialize_typeshed_or_die()
  env = create_importlab_environment(conf, typeshed)
  import_graph = importlab.graph.ImportGraph.create(env, args.filenames)

  if args.tree:
    print('Source tree:')
    importlab.output.print_tree(import_graph)
    sys.exit(0)

  if args.unresolved:
    print('Unresolved dependencies:')
    for imp in sorted(import_graph.get_all_unresolved()):
      print(' ', imp.name)
    sys.exit(0)

  runner = pytype_runner.PytypeRunner(import_graph, conf, typeshed, args.quiet)
  runner.run()


if __name__ == '__main__':
  sys.exit(main())
