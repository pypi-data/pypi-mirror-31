#if defined(PETSC_HAVE_FORTRAN_TYPE_STAR)
      Interface
       subroutine PetscObjectReference(obj,ierr)
          use petscsysdef
          type(*) :: obj
          PetscErrorCode :: ierr
       end Subroutine PetscObjectReference
       subroutine PetscObjectDereference(obj,ierr)
          use petscsysdef
          type(*) :: obj
          PetscErrorCode :: ierr
        end Subroutine PetscObjectDereference
       subroutine PetscObjectGetReference(obj,c,ierr)
          use petscsysdef
          type(*) :: obj
          PetscInt c
          PetscErrorCode :: ierr
        end Subroutine PetscObjectGetReference
       subroutine PetscObjectCompose(obj,str,obj2,ierr)
          use petscsysdef
          type(*) :: obj,obj2
          character(*) :: str
          PetscErrorCode :: ierr
        end Subroutine PetscObjectCompose
       subroutine PetscObjectQuery(obj,str,obj2,ierr)
          use petscsysdef
          type(*) :: obj,obj2
          character(*) :: str
          PetscErrorCode :: ierr
        end Subroutine PetscObjectQuery
        end Interface
#endif

      Interface 
        Subroutine PetscOptionsGetInt(o,p,n,v,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscInt v
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetReal(o,p,n,v,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscReal v
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetScalar(o,p,n,v,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscScalar v
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetBool(o,p,n,v,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscBool v
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetString(o,p,n,v,s,ierr)
          use petscsysdef
          PetscOptions o
          character(*) v
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsHasName(o,p,n,s,ierr)
          use petscsysdef
          PetscOptions o
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetIntArray(o,p,n,v,c,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscInt v(*),c
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetScalarArray(o,p,n,v,c,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscScalar v(*)
          PetscInt c
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsGetRealArray(o,p,n,v,c,s,ierr)
          use petscsysdef
          PetscOptions o
          PetscReal v(*)
          PetscInt c
          character(*) p,n
          PetscBool s
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsSetValue(o,n,v,ierr)
          use petscsysdef
          PetscOptions o
          character(*) n,v
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsClearValue(o,n,ierr)
          use petscsysdef
          PetscOptions o
          character(*) n
          PetscErrorCode ierr
        End Subroutine
        Subroutine PetscOptionsClear(o,ierr)
          use petscsysdef
          PetscOptions o
          PetscErrorCode ierr
        End Subroutine
      End Interface

      Interface
      subroutine PetscRandomSetType(a,b,z)
      use petscsysdef
       PetscRandom a
       character(*) b
       integer z
       end subroutine
      end Interface

      Interface
      subroutine PetscRandomView(a,b,z)
      use petscsysdef
       PetscRandom a
       PetscViewer b
       integer z
       end subroutine
      end Interface