# coding: utf-8

from __future__ import absolute_import
from pyhml.models.seq_quality import SeqQuality
from pyhml.models.variant import Variant
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model
from Bio.Seq import Seq


class ConsensusSeqBlock(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, continuity: bool=None, description: str=None, end: int=None, expected_copy_number: int=None, phase_set: str=None, reference_sequence_id: str=None, start: int=None, strand: str=None, sequence: Seq=None, sequence_quality: List[SeqQuality]=None, variant: List[Variant]=None):
        """
        ConsensusSeqBlock - a model defined in Swagger

        :param continuity: The continuity of this ConsensusSeqBlock.
        :type continuity: bool
        :param description: The description of this ConsensusSeqBlock.
        :type description: str
        :param end: The end of this ConsensusSeqBlock.
        :type end: int
        :param expected_copy_number: The expected_copy_number of this ConsensusSeqBlock.
        :type expected_copy_number: int
        :param phase_set: The phase_set of this ConsensusSeqBlock.
        :type phase_set: str
        :param reference_sequence_id: The reference_sequence_id of this ConsensusSeqBlock.
        :type reference_sequence_id: str
        :param start: The start of this ConsensusSeqBlock.
        :type start: int
        :param strand: The strand of this ConsensusSeqBlock.
        :type strand: str
        :param sequence: The sequence of this ConsensusSeqBlock.
        :type sequence: str
        :param sequence_quality: The sequence_quality of this ConsensusSeqBlock.
        :type sequence_quality: List[SeqQuality]
        :param variant: The variant of this ConsensusSeqBlock.
        :type variant: List[Variant]
        """
        self.swagger_types = {
            'continuity': bool,
            'description': str,
            'end': int,
            'expected_copy_number': int,
            'phase_set': str,
            'reference_sequence_id': str,
            'start': int,
            'strand': str,
            'sequence': Seq,
            'sequence_quality': List[SeqQuality],
            'variant': List[Variant]
        }

        self.attribute_map = {
            'continuity': 'continuity',
            'description': 'description',
            'end': 'end',
            'expected_copy_number': 'expected_copy_number',
            'phase_set': 'phase_set',
            'reference_sequence_id': 'reference_sequence_id',
            'start': 'start',
            'strand': 'strand',
            'sequence': 'sequence',
            'sequence_quality': 'sequence_quality',
            'variant': 'variant'
        }

        self._continuity = continuity
        self._description = description
        self._end = end
        self._expected_copy_number = expected_copy_number
        self._phase_set = phase_set
        self._reference_sequence_id = reference_sequence_id
        self._start = start
        self._strand = strand
        self._sequence = sequence
        self._sequence_quality = sequence_quality
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt) -> 'ConsensusSeqBlock':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConsensusSeqBlock of this ConsensusSeqBlock.
        :rtype: ConsensusSeqBlock
        """
        return deserialize_model(dikt, cls)

    @property
    def continuity(self) -> bool:
        """
        Gets the continuity of this ConsensusSeqBlock.

        :return: The continuity of this ConsensusSeqBlock.
        :rtype: bool
        """
        return self._continuity

    @continuity.setter
    def continuity(self, continuity: bool):
        """
        Sets the continuity of this ConsensusSeqBlock.

        :param continuity: The continuity of this ConsensusSeqBlock.
        :type continuity: bool
        """

        self._continuity = continuity

    @property
    def description(self) -> str:
        """
        Gets the description of this ConsensusSeqBlock.

        :return: The description of this ConsensusSeqBlock.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this ConsensusSeqBlock.

        :param description: The description of this ConsensusSeqBlock.
        :type description: str
        """

        self._description = description

    @property
    def end(self) -> int:
        """
        Gets the end of this ConsensusSeqBlock.

        :return: The end of this ConsensusSeqBlock.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end: int):
        """
        Sets the end of this ConsensusSeqBlock.

        :param end: The end of this ConsensusSeqBlock.
        :type end: int
        """

        self._end = end

    @property
    def expected_copy_number(self) -> int:
        """
        Gets the expected_copy_number of this ConsensusSeqBlock.

        :return: The expected_copy_number of this ConsensusSeqBlock.
        :rtype: int
        """
        return self._expected_copy_number

    @expected_copy_number.setter
    def expected_copy_number(self, expected_copy_number: int):
        """
        Sets the expected_copy_number of this ConsensusSeqBlock.

        :param expected_copy_number: The expected_copy_number of this ConsensusSeqBlock.
        :type expected_copy_number: int
        """

        self._expected_copy_number = expected_copy_number

    @property
    def phase_set(self) -> str:
        """
        Gets the phase_set of this ConsensusSeqBlock.

        :return: The phase_set of this ConsensusSeqBlock.
        :rtype: str
        """
        return self._phase_set

    @phase_set.setter
    def phase_set(self, phase_set: str):
        """
        Sets the phase_set of this ConsensusSeqBlock.

        :param phase_set: The phase_set of this ConsensusSeqBlock.
        :type phase_set: str
        """

        self._phase_set = phase_set

    @property
    def reference_sequence_id(self) -> str:
        """
        Gets the reference_sequence_id of this ConsensusSeqBlock.

        :return: The reference_sequence_id of this ConsensusSeqBlock.
        :rtype: str
        """
        return self._reference_sequence_id

    @reference_sequence_id.setter
    def reference_sequence_id(self, reference_sequence_id: str):
        """
        Sets the reference_sequence_id of this ConsensusSeqBlock.

        :param reference_sequence_id: The reference_sequence_id of this ConsensusSeqBlock.
        :type reference_sequence_id: str
        """

        self._reference_sequence_id = reference_sequence_id

    @property
    def start(self) -> int:
        """
        Gets the start of this ConsensusSeqBlock.

        :return: The start of this ConsensusSeqBlock.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start: int):
        """
        Sets the start of this ConsensusSeqBlock.

        :param start: The start of this ConsensusSeqBlock.
        :type start: int
        """

        self._start = start

    @property
    def strand(self) -> str:
        """
        Gets the strand of this ConsensusSeqBlock.

        :return: The strand of this ConsensusSeqBlock.
        :rtype: str
        """
        return self._strand

    @strand.setter
    def strand(self, strand: str):
        """
        Sets the strand of this ConsensusSeqBlock.

        :param strand: The strand of this ConsensusSeqBlock.
        :type strand: str
        """

        self._strand = strand

    @property
    def sequence(self) -> Seq:
        """
        Gets the sequence of this ConsensusSeqBlock.

        :return: The sequence of this ConsensusSeqBlock.
        :rtype: Seq
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence: Seq):
        """
        Sets the sequence of this ConsensusSeqBlock.

        :param sequence: The sequence of this ConsensusSeqBlock.
        :type sequence: Seq
        """

        self._sequence = sequence

    @property
    def sequence_quality(self) -> List[SeqQuality]:
        """
        Gets the sequence_quality of this ConsensusSeqBlock.

        :return: The sequence_quality of this ConsensusSeqBlock.
        :rtype: List[SeqQuality]
        """
        return self._sequence_quality

    @sequence_quality.setter
    def sequence_quality(self, sequence_quality: List[SeqQuality]):
        """
        Sets the sequence_quality of this ConsensusSeqBlock.

        :param sequence_quality: The sequence_quality of this ConsensusSeqBlock.
        :type sequence_quality: List[SeqQuality]
        """

        self._sequence_quality = sequence_quality

    @property
    def variant(self) -> List[Variant]:
        """
        Gets the variant of this ConsensusSeqBlock.

        :return: The variant of this ConsensusSeqBlock.
        :rtype: List[Variant]
        """
        return self._variant

    @variant.setter
    def variant(self, variant: List[Variant]):
        """
        Sets the variant of this ConsensusSeqBlock.

        :param variant: The variant of this ConsensusSeqBlock.
        :type variant: List[Variant]
        """

        self._variant = variant

