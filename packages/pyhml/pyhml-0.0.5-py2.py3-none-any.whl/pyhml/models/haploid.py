# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Haploid(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, locus: str=None, method: str=None, type: str=None):
        """
        Haploid - a model defined in Swagger

        :param locus: The locus of this Haploid.
        :type locus: str
        :param method: The method of this Haploid.
        :type method: str
        :param type: The type of this Haploid.
        :type type: str
        """
        self.swagger_types = {
            'locus': str,
            'method': str,
            'type': str
        }

        self.attribute_map = {
            'locus': 'locus',
            'method': 'method',
            'type': 'type'
        }

        self._locus = locus
        self._method = method
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Haploid':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Haploid of this Haploid.
        :rtype: Haploid
        """
        return deserialize_model(dikt, cls)

    @property
    def locus(self) -> str:
        """
        Gets the locus of this Haploid.

        :return: The locus of this Haploid.
        :rtype: str
        """
        return self._locus

    @locus.setter
    def locus(self, locus: str):
        """
        Sets the locus of this Haploid.

        :param locus: The locus of this Haploid.
        :type locus: str
        """

        self._locus = locus

    @property
    def method(self) -> str:
        """
        Gets the method of this Haploid.

        :return: The method of this Haploid.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """
        Sets the method of this Haploid.

        :param method: The method of this Haploid.
        :type method: str
        """

        self._method = method

    @property
    def type(self) -> str:
        """
        Gets the type of this Haploid.

        :return: The type of this Haploid.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this Haploid.

        :param type: The type of this Haploid.
        :type type: str
        """

        self._type = type

