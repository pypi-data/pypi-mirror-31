# coding: utf-8

from __future__ import absolute_import
from pyhml.models.ref_sequence import RefSequence
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class RefDatabase(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, availability: str=None, curated: bool=None, description: str=None, name: str=None, uri: str=None, version: str=None, reference_sequence: List[RefSequence]=None):
        """
        RefDatabase - a model defined in Swagger

        :param availability: The availability of this RefDatabase.
        :type availability: str
        :param curated: The curated of this RefDatabase.
        :type curated: bool
        :param description: The description of this RefDatabase.
        :type description: str
        :param name: The name of this RefDatabase.
        :type name: str
        :param uri: The uri of this RefDatabase.
        :type uri: str
        :param version: The version of this RefDatabase.
        :type version: str
        :param reference_sequence: The reference_sequence of this RefDatabase.
        :type reference_sequence: List[RefSequence]
        """
        self.swagger_types = {
            'availability': str,
            'curated': bool,
            'description': str,
            'name': str,
            'uri': str,
            'version': str,
            'reference_sequence': List[RefSequence]
        }

        self.attribute_map = {
            'availability': 'availability',
            'curated': 'curated',
            'description': 'description',
            'name': 'name',
            'uri': 'uri',
            'version': 'version',
            'reference_sequence': 'reference_sequence'
        }

        self._availability = availability
        self._curated = curated
        self._description = description
        self._name = name
        self._uri = uri
        self._version = version
        self._reference_sequence = reference_sequence

    @classmethod
    def from_dict(cls, dikt) -> 'RefDatabase':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RefDatabase of this RefDatabase.
        :rtype: RefDatabase
        """
        return deserialize_model(dikt, cls)

    @property
    def availability(self) -> str:
        """
        Gets the availability of this RefDatabase.

        :return: The availability of this RefDatabase.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability: str):
        """
        Sets the availability of this RefDatabase.

        :param availability: The availability of this RefDatabase.
        :type availability: str
        """

        self._availability = availability

    @property
    def curated(self) -> bool:
        """
        Gets the curated of this RefDatabase.

        :return: The curated of this RefDatabase.
        :rtype: bool
        """
        return self._curated

    @curated.setter
    def curated(self, curated: bool):
        """
        Sets the curated of this RefDatabase.

        :param curated: The curated of this RefDatabase.
        :type curated: bool
        """

        self._curated = curated

    @property
    def description(self) -> str:
        """
        Gets the description of this RefDatabase.

        :return: The description of this RefDatabase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this RefDatabase.

        :param description: The description of this RefDatabase.
        :type description: str
        """

        self._description = description

    @property
    def name(self) -> str:
        """
        Gets the name of this RefDatabase.

        :return: The name of this RefDatabase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this RefDatabase.

        :param name: The name of this RefDatabase.
        :type name: str
        """

        self._name = name

    @property
    def uri(self) -> str:
        """
        Gets the uri of this RefDatabase.

        :return: The uri of this RefDatabase.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """
        Sets the uri of this RefDatabase.

        :param uri: The uri of this RefDatabase.
        :type uri: str
        """

        self._uri = uri

    @property
    def version(self) -> str:
        """
        Gets the version of this RefDatabase.

        :return: The version of this RefDatabase.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """
        Sets the version of this RefDatabase.

        :param version: The version of this RefDatabase.
        :type version: str
        """

        self._version = version

    @property
    def reference_sequence(self) -> List[RefSequence]:
        """
        Gets the reference_sequence of this RefDatabase.

        :return: The reference_sequence of this RefDatabase.
        :rtype: List[RefSequence]
        """
        return self._reference_sequence

    @reference_sequence.setter
    def reference_sequence(self, reference_sequence: List[RefSequence]):
        """
        Sets the reference_sequence of this RefDatabase.

        :param reference_sequence: The reference_sequence of this RefDatabase.
        :type reference_sequence: List[RefSequence]
        """

        self._reference_sequence = reference_sequence

