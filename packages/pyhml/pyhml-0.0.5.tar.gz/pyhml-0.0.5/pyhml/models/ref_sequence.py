# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class RefSequence(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accession: str=None, end: int=None, id: str=None, name: str=None, start: int=None, uri: str=None):
        """
        RefSequence - a model defined in Swagger

        :param accession: The accession of this RefSequence.
        :type accession: str
        :param end: The end of this RefSequence.
        :type end: int
        :param id: The id of this RefSequence.
        :type id: str
        :param name: The name of this RefSequence.
        :type name: str
        :param start: The start of this RefSequence.
        :type start: int
        :param uri: The uri of this RefSequence.
        :type uri: str
        """
        self.swagger_types = {
            'accession': str,
            'end': int,
            'id': str,
            'name': str,
            'start': int,
            'uri': str
        }

        self.attribute_map = {
            'accession': 'accession',
            'end': 'end',
            'id': 'id',
            'name': 'name',
            'start': 'start',
            'uri': 'uri'
        }

        self._accession = accession
        self._end = end
        self._id = id
        self._name = name
        self._start = start
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'RefSequence':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RefSequence of this RefSequence.
        :rtype: RefSequence
        """
        return deserialize_model(dikt, cls)

    @property
    def accession(self) -> str:
        """
        Gets the accession of this RefSequence.

        :return: The accession of this RefSequence.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession: str):
        """
        Sets the accession of this RefSequence.

        :param accession: The accession of this RefSequence.
        :type accession: str
        """

        self._accession = accession

    @property
    def end(self) -> int:
        """
        Gets the end of this RefSequence.

        :return: The end of this RefSequence.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end: int):
        """
        Sets the end of this RefSequence.

        :param end: The end of this RefSequence.
        :type end: int
        """

        self._end = end

    @property
    def id(self) -> str:
        """
        Gets the id of this RefSequence.

        :return: The id of this RefSequence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this RefSequence.

        :param id: The id of this RefSequence.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this RefSequence.

        :return: The name of this RefSequence.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this RefSequence.

        :param name: The name of this RefSequence.
        :type name: str
        """

        self._name = name

    @property
    def start(self) -> int:
        """
        Gets the start of this RefSequence.

        :return: The start of this RefSequence.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start: int):
        """
        Sets the start of this RefSequence.

        :param start: The start of this RefSequence.
        :type start: int
        """

        self._start = start

    @property
    def uri(self) -> str:
        """
        Gets the uri of this RefSequence.

        :return: The uri of this RefSequence.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """
        Sets the uri of this RefSequence.

        :param uri: The uri of this RefSequence.
        :type uri: str
        """

        self._uri = uri

