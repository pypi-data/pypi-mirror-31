# coding: utf-8

from __future__ import absolute_import
from pyhml.models.haploid import Haploid
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class AlleleAssignment(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, allele_db: str=None, allele_version: str=None, date: str=None, glstring: List[str]=None, haploid: List[Haploid]=None):
        """
        AlleleAssignment - a model defined in Swagger

        :param allele_db: The allele_db of this AlleleAssignment.
        :type allele_db: str
        :param allele_version: The allele_version of this AlleleAssignment.
        :type allele_version: str
        :param date: The date of this AlleleAssignment.
        :type date: str
        :param glstring: The glstring of this AlleleAssignment.
        :type glstring: List[str]
        :param haploid: The haploid of this AlleleAssignment.
        :type haploid: List[Haploid]
        """
        self.swagger_types = {
            'allele_db': str,
            'allele_version': str,
            'date': str,
            'glstring': List[str],
            'haploid': List[Haploid]
        }

        self.attribute_map = {
            'allele_db': 'allele_db',
            'allele_version': 'allele_version',
            'date': 'date',
            'glstring': 'glstring',
            'haploid': 'haploid'
        }

        self._allele_db = allele_db
        self._allele_version = allele_version
        self._date = date
        self._glstring = glstring
        self._haploid = haploid

    @classmethod
    def from_dict(cls, dikt) -> 'AlleleAssignment':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlleleAssignment of this AlleleAssignment.
        :rtype: AlleleAssignment
        """
        return deserialize_model(dikt, cls)

    @property
    def allele_db(self) -> str:
        """
        Gets the allele_db of this AlleleAssignment.

        :return: The allele_db of this AlleleAssignment.
        :rtype: str
        """
        return self._allele_db

    @allele_db.setter
    def allele_db(self, allele_db: str):
        """
        Sets the allele_db of this AlleleAssignment.

        :param allele_db: The allele_db of this AlleleAssignment.
        :type allele_db: str
        """

        self._allele_db = allele_db

    @property
    def allele_version(self) -> str:
        """
        Gets the allele_version of this AlleleAssignment.

        :return: The allele_version of this AlleleAssignment.
        :rtype: str
        """
        return self._allele_version

    @allele_version.setter
    def allele_version(self, allele_version: str):
        """
        Sets the allele_version of this AlleleAssignment.

        :param allele_version: The allele_version of this AlleleAssignment.
        :type allele_version: str
        """

        self._allele_version = allele_version

    @property
    def date(self) -> str:
        """
        Gets the date of this AlleleAssignment.

        :return: The date of this AlleleAssignment.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date: str):
        """
        Sets the date of this AlleleAssignment.

        :param date: The date of this AlleleAssignment.
        :type date: str
        """

        self._date = date

    @property
    def glstring(self) -> List[str]:
        """
        Gets the glstring of this AlleleAssignment.

        :return: The glstring of this AlleleAssignment.
        :rtype: List[str]
        """
        return self._glstring

    @glstring.setter
    def glstring(self, glstring: List[str]):
        """
        Sets the glstring of this AlleleAssignment.

        :param glstring: The glstring of this AlleleAssignment.
        :type glstring: List[str]
        """

        self._glstring = glstring

    @property
    def haploid(self) -> List[Haploid]:
        """
        Gets the haploid of this AlleleAssignment.

        :return: The haploid of this AlleleAssignment.
        :rtype: List[Haploid]
        """
        return self._haploid

    @haploid.setter
    def haploid(self, haploid: List[Haploid]):
        """
        Sets the haploid of this AlleleAssignment.

        :param haploid: The haploid of this AlleleAssignment.
        :type haploid: List[Haploid]
        """

        self._haploid = haploid

