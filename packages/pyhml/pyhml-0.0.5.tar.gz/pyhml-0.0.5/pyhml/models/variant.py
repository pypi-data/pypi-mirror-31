# coding: utf-8

from __future__ import absolute_import
from pyhml.models.variant_effect import VariantEffect
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Variant(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alternate_bases: str=None, end: int=None, reference_bases: str=None, start: int=None, variant_effect: VariantEffect=None):
        """
        Variant - a model defined in Swagger

        :param alternate_bases: The alternate_bases of this Variant.
        :type alternate_bases: str
        :param end: The end of this Variant.
        :type end: int
        :param reference_bases: The reference_bases of this Variant.
        :type reference_bases: str
        :param start: The start of this Variant.
        :type start: int
        :param variant_effect: The variant_effect of this Variant.
        :type variant_effect: VariantEffect
        """
        self.swagger_types = {
            'alternate_bases': str,
            'end': int,
            'reference_bases': str,
            'start': int,
            'variant_effect': VariantEffect
        }

        self.attribute_map = {
            'alternate_bases': 'alternate_bases',
            'end': 'end',
            'reference_bases': 'reference_bases',
            'start': 'start',
            'variant_effect': 'variant_effect'
        }

        self._alternate_bases = alternate_bases
        self._end = end
        self._reference_bases = reference_bases
        self._start = start
        self._variant_effect = variant_effect

    @classmethod
    def from_dict(cls, dikt) -> 'Variant':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variant of this Variant.
        :rtype: Variant
        """
        return deserialize_model(dikt, cls)

    @property
    def alternate_bases(self) -> str:
        """
        Gets the alternate_bases of this Variant.

        :return: The alternate_bases of this Variant.
        :rtype: str
        """
        return self._alternate_bases

    @alternate_bases.setter
    def alternate_bases(self, alternate_bases: str):
        """
        Sets the alternate_bases of this Variant.

        :param alternate_bases: The alternate_bases of this Variant.
        :type alternate_bases: str
        """

        self._alternate_bases = alternate_bases

    @property
    def end(self) -> int:
        """
        Gets the end of this Variant.

        :return: The end of this Variant.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end: int):
        """
        Sets the end of this Variant.

        :param end: The end of this Variant.
        :type end: int
        """

        self._end = end

    @property
    def reference_bases(self) -> str:
        """
        Gets the reference_bases of this Variant.

        :return: The reference_bases of this Variant.
        :rtype: str
        """
        return self._reference_bases

    @reference_bases.setter
    def reference_bases(self, reference_bases: str):
        """
        Sets the reference_bases of this Variant.

        :param reference_bases: The reference_bases of this Variant.
        :type reference_bases: str
        """

        self._reference_bases = reference_bases

    @property
    def start(self) -> int:
        """
        Gets the start of this Variant.

        :return: The start of this Variant.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start: int):
        """
        Sets the start of this Variant.

        :param start: The start of this Variant.
        :type start: int
        """

        self._start = start

    @property
    def variant_effect(self) -> VariantEffect:
        """
        Gets the variant_effect of this Variant.

        :return: The variant_effect of this Variant.
        :rtype: VariantEffect
        """
        return self._variant_effect

    @variant_effect.setter
    def variant_effect(self, variant_effect: VariantEffect):
        """
        Sets the variant_effect of this Variant.

        :param variant_effect: The variant_effect of this Variant.
        :type variant_effect: VariantEffect
        """

        self._variant_effect = variant_effect

