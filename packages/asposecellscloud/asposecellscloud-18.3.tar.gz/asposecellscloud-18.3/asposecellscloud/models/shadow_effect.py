# coding: utf-8

"""
    Web API Swagger specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ShadowEffect(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angle': 'float',
        'blur': 'float',
        'color': 'CellsColor',
        'distance': 'float',
        'preset_type': 'str',
        'size': 'float',
        'transparency': 'float'
    }

    attribute_map = {
        'angle': 'Angle',
        'blur': 'Blur',
        'color': 'Color',
        'distance': 'Distance',
        'preset_type': 'PresetType',
        'size': 'Size',
        'transparency': 'Transparency'
    }
    
    @staticmethod
    def get_swagger_types():
        return ShadowEffect.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return ShadowEffect.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, angle=None, blur=None, color=None, distance=None, preset_type=None, size=None, transparency=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        ShadowEffect - a model defined in Swagger
        """

        self.container['angle'] = None
        self.container['blur'] = None
        self.container['color'] = None
        self.container['distance'] = None
        self.container['preset_type'] = None
        self.container['size'] = None
        self.container['transparency'] = None

        if angle is not None:
          self.angle = angle
        if blur is not None:
          self.blur = blur
        if color is not None:
          self.color = color
        if distance is not None:
          self.distance = distance
        if preset_type is not None:
          self.preset_type = preset_type
        if size is not None:
          self.size = size
        if transparency is not None:
          self.transparency = transparency

    @property
    def angle(self):
        """
        Gets the angle of this ShadowEffect.

        :return: The angle of this ShadowEffect.
        :rtype: float
        """
        return self.container['angle']

    @angle.setter
    def angle(self, angle):
        """
        Sets the angle of this ShadowEffect.

        :param angle: The angle of this ShadowEffect.
        :type: float
        """

        self.container['angle'] = angle

    @property
    def blur(self):
        """
        Gets the blur of this ShadowEffect.

        :return: The blur of this ShadowEffect.
        :rtype: float
        """
        return self.container['blur']

    @blur.setter
    def blur(self, blur):
        """
        Sets the blur of this ShadowEffect.

        :param blur: The blur of this ShadowEffect.
        :type: float
        """

        self.container['blur'] = blur

    @property
    def color(self):
        """
        Gets the color of this ShadowEffect.

        :return: The color of this ShadowEffect.
        :rtype: CellsColor
        """
        return self.container['color']

    @color.setter
    def color(self, color):
        """
        Sets the color of this ShadowEffect.

        :param color: The color of this ShadowEffect.
        :type: CellsColor
        """

        self.container['color'] = color

    @property
    def distance(self):
        """
        Gets the distance of this ShadowEffect.

        :return: The distance of this ShadowEffect.
        :rtype: float
        """
        return self.container['distance']

    @distance.setter
    def distance(self, distance):
        """
        Sets the distance of this ShadowEffect.

        :param distance: The distance of this ShadowEffect.
        :type: float
        """

        self.container['distance'] = distance

    @property
    def preset_type(self):
        """
        Gets the preset_type of this ShadowEffect.

        :return: The preset_type of this ShadowEffect.
        :rtype: str
        """
        return self.container['preset_type']

    @preset_type.setter
    def preset_type(self, preset_type):
        """
        Sets the preset_type of this ShadowEffect.

        :param preset_type: The preset_type of this ShadowEffect.
        :type: str
        """

        self.container['preset_type'] = preset_type

    @property
    def size(self):
        """
        Gets the size of this ShadowEffect.

        :return: The size of this ShadowEffect.
        :rtype: float
        """
        return self.container['size']

    @size.setter
    def size(self, size):
        """
        Sets the size of this ShadowEffect.

        :param size: The size of this ShadowEffect.
        :type: float
        """

        self.container['size'] = size

    @property
    def transparency(self):
        """
        Gets the transparency of this ShadowEffect.

        :return: The transparency of this ShadowEffect.
        :rtype: float
        """
        return self.container['transparency']

    @transparency.setter
    def transparency(self, transparency):
        """
        Sets the transparency of this ShadowEffect.

        :param transparency: The transparency of this ShadowEffect.
        :type: float
        """

        self.container['transparency'] = transparency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ShadowEffect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
