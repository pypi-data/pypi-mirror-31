__author__ = 'Bohdan Mushkevych'

import os
from antlr4 import *

from grammar.sdplLexer import sdplLexer
from grammar.sdplParser import sdplParser
from parser.sdpl_generator import SdplGenerator
from parser.pig_lexicon import AbstractLexicon


def run_generator(input_file, output_stream, lexicon_class):
    assert issubclass(lexicon_class, AbstractLexicon)

    input_stream = FileStream(input_file, encoding='utf-8')
    lexer = sdplLexer(input_stream)
    token_stream = CommonTokenStream(lexer)
    parser = sdplParser(token_stream)
    tree = parser.start_rule()

    walker = ParseTreeWalker()
    lexicon = lexicon_class(output_stream)
    collector = SdplGenerator(token_stream, output_stream, lexicon)

    _print_header(output_stream, input_file, lexicon.comment_delimiter())
    walker.walk(collector, tree)
    _print_footer(output_stream, lexicon.comment_delimiter())


def _print_header(output_stream, file_name, comment_delimiter):
    head, name = os.path.split(file_name)   # fetch file_name
    _, directory = os.path.split(head)      # fetch directory

    # NOTICE: full path in the file header breaks the UnitTests if executed on different machines
    output_stream.write('{0} File generated by SDPL compiler from {1}/{2}'.format(comment_delimiter, directory, name))
    output_stream.write('\n')
    output_stream.write('{0} Do not edit the file manually'.format(comment_delimiter))
    output_stream.write('\n')


def _print_footer(output_stream, comment_delimiter):
    output_stream.write('{0} SDPL output: EOF'.format(comment_delimiter))
    output_stream.write('\n')
