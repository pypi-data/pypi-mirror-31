# Generated from /home/dmushkevych/opensource/sdpl.git/grammar/sdpl.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\28")
        buf.write("\u0163\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%")
        buf.write("\3&\3&\3\'\3\'\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,")
        buf.write("\3-\3-\3-\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\61")
        buf.write("\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\7\63")
        buf.write("\u0133\n\63\f\63\16\63\u0136\13\63\3\64\6\64\u0139\n\64")
        buf.write("\r\64\16\64\u013a\3\64\3\64\6\64\u013f\n\64\r\64\16\64")
        buf.write("\u0140\3\65\6\65\u0144\n\65\r\65\16\65\u0145\3\66\6\66")
        buf.write("\u0149\n\66\r\66\16\66\u014a\3\66\3\66\3\67\3\67\3\67")
        buf.write("\5\67\u0152\n\67\3\67\7\67\u0155\n\67\f\67\16\67\u0158")
        buf.write("\13\67\3\67\3\67\3\67\3\67\38\38\39\39\3:\3:\3\u0156\2")
        buf.write(";\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write(")Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o\2q\2")
        buf.write("s\2\3\2\5\5\2\13\f\17\17\"\"\3\2\62;\4\2C\\c|\2\u0168")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3")
        buf.write("\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\3u\3\2\2\2\5~")
        buf.write("\3\2\2\2\7\u0081\3\2\2\2\t\u0083\3\2\2\2\13\u0085\3\2")
        buf.write("\2\2\r\u008a\3\2\2\2\17\u0091\3\2\2\2\21\u0099\3\2\2\2")
        buf.write("\23\u009f\3\2\2\2\25\u00a4\3\2\2\2\27\u00a9\3\2\2\2\31")
        buf.write("\u00b4\3\2\2\2\33\u00b6\3\2\2\2\35\u00b8\3\2\2\2\37\u00bf")
        buf.write("\3\2\2\2!\u00c1\3\2\2\2#\u00c3\3\2\2\2%\u00c5\3\2\2\2")
        buf.write("\'\u00cc\3\2\2\2)\u00d2\3\2\2\2+\u00d7\3\2\2\2-\u00dc")
        buf.write("\3\2\2\2/\u00df\3\2\2\2\61\u00e6\3\2\2\2\63\u00ec\3\2")
        buf.write("\2\2\65\u00f2\3\2\2\2\67\u00f4\3\2\2\29\u00f6\3\2\2\2")
        buf.write(";\u00f8\3\2\2\2=\u00fa\3\2\2\2?\u00fc\3\2\2\2A\u00fe\3")
        buf.write("\2\2\2C\u0100\3\2\2\2E\u0102\3\2\2\2G\u0104\3\2\2\2I\u0106")
        buf.write("\3\2\2\2K\u0108\3\2\2\2M\u010a\3\2\2\2O\u010c\3\2\2\2")
        buf.write("Q\u010e\3\2\2\2S\u0111\3\2\2\2U\u0114\3\2\2\2W\u0117\3")
        buf.write("\2\2\2Y\u0119\3\2\2\2[\u011c\3\2\2\2]\u011e\3\2\2\2_\u0123")
        buf.write("\3\2\2\2a\u0127\3\2\2\2c\u012a\3\2\2\2e\u012e\3\2\2\2")
        buf.write("g\u0138\3\2\2\2i\u0143\3\2\2\2k\u0148\3\2\2\2m\u0151\3")
        buf.write("\2\2\2o\u015d\3\2\2\2q\u015f\3\2\2\2s\u0161\3\2\2\2uv")
        buf.write("\7T\2\2vw\7G\2\2wx\7I\2\2xy\7K\2\2yz\7U\2\2z{\7V\2\2{")
        buf.write("|\7G\2\2|}\7T\2\2}\4\3\2\2\2~\177\7C\2\2\177\u0080\7U")
        buf.write("\2\2\u0080\6\3\2\2\2\u0081\u0082\7=\2\2\u0082\b\3\2\2")
        buf.write("\2\u0083\u0084\7?\2\2\u0084\n\3\2\2\2\u0085\u0086\7N\2")
        buf.write("\2\u0086\u0087\7Q\2\2\u0087\u0088\7C\2\2\u0088\u0089\7")
        buf.write("F\2\2\u0089\f\3\2\2\2\u008a\u008b\7U\2\2\u008b\u008c\7")
        buf.write("E\2\2\u008c\u008d\7J\2\2\u008d\u008e\7G\2\2\u008e\u008f")
        buf.write("\7O\2\2\u008f\u0090\7C\2\2\u0090\16\3\2\2\2\u0091\u0092")
        buf.write("\7X\2\2\u0092\u0093\7G\2\2\u0093\u0094\7T\2\2\u0094\u0095")
        buf.write("\7U\2\2\u0095\u0096\7K\2\2\u0096\u0097\7Q\2\2\u0097\u0098")
        buf.write("\7P\2\2\u0098\20\3\2\2\2\u0099\u009a\7V\2\2\u009a\u009b")
        buf.write("\7C\2\2\u009b\u009c\7D\2\2\u009c\u009d\7N\2\2\u009d\u009e")
        buf.write("\7G\2\2\u009e\22\3\2\2\2\u009f\u00a0\7H\2\2\u00a0\u00a1")
        buf.write("\7T\2\2\u00a1\u00a2\7Q\2\2\u00a2\u00a3\7O\2\2\u00a3\24")
        buf.write("\3\2\2\2\u00a4\u00a5\7Y\2\2\u00a5\u00a6\7K\2\2\u00a6\u00a7")
        buf.write("\7V\2\2\u00a7\u00a8\7J\2\2\u00a8\26\3\2\2\2\u00a9\u00aa")
        buf.write("\7R\2\2\u00aa\u00ab\7T\2\2\u00ab\u00ac\7Q\2\2\u00ac\u00ad")
        buf.write("\7L\2\2\u00ad\u00ae\7G\2\2\u00ae\u00af\7E\2\2\u00af\u00b0")
        buf.write("\7V\2\2\u00b0\u00b1\7K\2\2\u00b1\u00b2\7Q\2\2\u00b2\u00b3")
        buf.write("\7P\2\2\u00b3\30\3\2\2\2\u00b4\u00b5\7*\2\2\u00b5\32\3")
        buf.write("\2\2\2\u00b6\u00b7\7+\2\2\u00b7\34\3\2\2\2\u00b8\u00b9")
        buf.write("\7P\2\2\u00b9\u00ba\7Q\2\2\u00ba\u00bb\7G\2\2\u00bb\u00bc")
        buf.write("\7O\2\2\u00bc\u00bd\7K\2\2\u00bd\u00be\7V\2\2\u00be\36")
        buf.write("\3\2\2\2\u00bf\u00c0\7.\2\2\u00c0 \3\2\2\2\u00c1\u00c2")
        buf.write("\7\60\2\2\u00c2\"\3\2\2\2\u00c3\u00c4\7<\2\2\u00c4$\3")
        buf.write("\2\2\2\u00c5\u00c6\7G\2\2\u00c6\u00c7\7Z\2\2\u00c7\u00c8")
        buf.write("\7R\2\2\u00c8\u00c9\7C\2\2\u00c9\u00ca\7P\2\2\u00ca\u00cb")
        buf.write("\7F\2\2\u00cb&\3\2\2\2\u00cc\u00cd\7U\2\2\u00cd\u00ce")
        buf.write("\7V\2\2\u00ce\u00cf\7Q\2\2\u00cf\u00d0\7T\2\2\u00d0\u00d1")
        buf.write("\7G\2\2\u00d1(\3\2\2\2\u00d2\u00d3\7K\2\2\u00d3\u00d4")
        buf.write("\7P\2\2\u00d4\u00d5\7V\2\2\u00d5\u00d6\7Q\2\2\u00d6*\3")
        buf.write("\2\2\2\u00d7\u00d8\7L\2\2\u00d8\u00d9\7Q\2\2\u00d9\u00da")
        buf.write("\7K\2\2\u00da\u00db\7P\2\2\u00db,\3\2\2\2\u00dc\u00dd")
        buf.write("\7D\2\2\u00dd\u00de\7[\2\2\u00de.\3\2\2\2\u00df\u00e0")
        buf.write("\7H\2\2\u00e0\u00e1\7K\2\2\u00e1\u00e2\7N\2\2\u00e2\u00e3")
        buf.write("\7V\2\2\u00e3\u00e4\7G\2\2\u00e4\u00e5\7T\2\2\u00e5\60")
        buf.write("\3\2\2\2\u00e6\u00e7\7Q\2\2\u00e7\u00e8\7T\2\2\u00e8\u00e9")
        buf.write("\7F\2\2\u00e9\u00ea\7G\2\2\u00ea\u00eb\7T\2\2\u00eb\62")
        buf.write("\3\2\2\2\u00ec\u00ed\7I\2\2\u00ed\u00ee\7T\2\2\u00ee\u00ef")
        buf.write("\7Q\2\2\u00ef\u00f0\7W\2\2\u00f0\u00f1\7R\2\2\u00f1\64")
        buf.write("\3\2\2\2\u00f2\u00f3\7)\2\2\u00f3\66\3\2\2\2\u00f4\u00f5")
        buf.write("\7&\2\2\u00f58\3\2\2\2\u00f6\u00f7\7}\2\2\u00f7:\3\2\2")
        buf.write("\2\u00f8\u00f9\7\177\2\2\u00f9<\3\2\2\2\u00fa\u00fb\7")
        buf.write("B\2\2\u00fb>\3\2\2\2\u00fc\u00fd\7\'\2\2\u00fd@\3\2\2")
        buf.write("\2\u00fe\u00ff\7A\2\2\u00ffB\3\2\2\2\u0100\u0101\7~\2")
        buf.write("\2\u0101D\3\2\2\2\u0102\u0103\7(\2\2\u0103F\3\2\2\2\u0104")
        buf.write("\u0105\7,\2\2\u0105H\3\2\2\2\u0106\u0107\7\61\2\2\u0107")
        buf.write("J\3\2\2\2\u0108\u0109\7-\2\2\u0109L\3\2\2\2\u010a\u010b")
        buf.write("\7/\2\2\u010bN\3\2\2\2\u010c\u010d\7`\2\2\u010dP\3\2\2")
        buf.write("\2\u010e\u010f\7#\2\2\u010f\u0110\7?\2\2\u0110R\3\2\2")
        buf.write("\2\u0111\u0112\7?\2\2\u0112\u0113\7?\2\2\u0113T\3\2\2")
        buf.write("\2\u0114\u0115\7>\2\2\u0115\u0116\7?\2\2\u0116V\3\2\2")
        buf.write("\2\u0117\u0118\7>\2\2\u0118X\3\2\2\2\u0119\u011a\7@\2")
        buf.write("\2\u011a\u011b\7?\2\2\u011bZ\3\2\2\2\u011c\u011d\7@\2")
        buf.write("\2\u011d\\\3\2\2\2\u011e\u011f\7N\2\2\u011f\u0120\7K\2")
        buf.write("\2\u0120\u0121\7M\2\2\u0121\u0122\7G\2\2\u0122^\3\2\2")
        buf.write("\2\u0123\u0124\7C\2\2\u0124\u0125\7P\2\2\u0125\u0126\7")
        buf.write("F\2\2\u0126`\3\2\2\2\u0127\u0128\7Q\2\2\u0128\u0129\7")
        buf.write("T\2\2\u0129b\3\2\2\2\u012a\u012b\7b\2\2\u012b\u012c\7")
        buf.write("b\2\2\u012c\u012d\7b\2\2\u012dd\3\2\2\2\u012e\u0134\5")
        buf.write("s:\2\u012f\u0133\5s:\2\u0130\u0133\5q9\2\u0131\u0133\5")
        buf.write("o8\2\u0132\u012f\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0131")
        buf.write("\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132\3\2\2\2\u0134")
        buf.write("\u0135\3\2\2\2\u0135f\3\2\2\2\u0136\u0134\3\2\2\2\u0137")
        buf.write("\u0139\5q9\2\u0138\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("\u0138\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\u013e\7\60\2\2\u013d\u013f\5q9\2\u013e\u013d\3")
        buf.write("\2\2\2\u013f\u0140\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141")
        buf.write("\3\2\2\2\u0141h\3\2\2\2\u0142\u0144\5q9\2\u0143\u0142")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0143\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146j\3\2\2\2\u0147\u0149\t\2\2\2\u0148")
        buf.write("\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0148\3\2\2\2")
        buf.write("\u014a\u014b\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\b")
        buf.write("\66\2\2\u014dl\3\2\2\2\u014e\u014f\7/\2\2\u014f\u0152")
        buf.write("\7/\2\2\u0150\u0152\7%\2\2\u0151\u014e\3\2\2\2\u0151\u0150")
        buf.write("\3\2\2\2\u0152\u0156\3\2\2\2\u0153\u0155\13\2\2\2\u0154")
        buf.write("\u0153\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0156\u0154\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0156\3")
        buf.write("\2\2\2\u0159\u015a\7\f\2\2\u015a\u015b\3\2\2\2\u015b\u015c")
        buf.write("\b\67\3\2\u015cn\3\2\2\2\u015d\u015e\7a\2\2\u015ep\3\2")
        buf.write("\2\2\u015f\u0160\t\3\2\2\u0160r\3\2\2\2\u0161\u0162\t")
        buf.write("\4\2\2\u0162t\3\2\2\2\13\2\u0132\u0134\u013a\u0140\u0145")
        buf.write("\u014a\u0151\u0156\4\2\3\2\2\4\2")
        return buf.getvalue()


class sdplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    AO_MULTIPLY = 35
    AO_DIVIDE = 36
    AO_PLUS = 37
    AO_MINUS = 38
    AO_POWER = 39
    CO_NE = 40
    CO_EQ = 41
    CO_LE = 42
    CO_LT = 43
    CO_GE = 44
    CO_GT = 45
    CO_LIKE = 46
    AND = 47
    OR = 48
    QUOTE_DELIM = 49
    ID = 50
    DECIMAL = 51
    INTEGER = 52
    WS = 53
    SL_COMMENT = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'REGISTER'", "'AS'", "';'", "'='", "'LOAD'", "'SCHEMA'", "'VERSION'", 
            "'TABLE'", "'FROM'", "'WITH'", "'PROJECTION'", "'('", "')'", 
            "'NOEMIT'", "','", "'.'", "':'", "'EXPAND'", "'STORE'", "'INTO'", 
            "'JOIN'", "'BY'", "'FILTER'", "'ORDER'", "'GROUP'", "'''", "'$'", 
            "'{'", "'}'", "'@'", "'%'", "'?'", "'|'", "'&'", "'*'", "'/'", 
            "'+'", "'-'", "'^'", "'!='", "'=='", "'<='", "'<'", "'>='", 
            "'>'", "'LIKE'", "'AND'", "'OR'", "'```'" ]

    symbolicNames = [ "<INVALID>",
            "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", 
            "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", "CO_LIKE", 
            "AND", "OR", "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", "WS", 
            "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", 
                  "AO_MINUS", "AO_POWER", "CO_NE", "CO_EQ", "CO_LE", "CO_LT", 
                  "CO_GE", "CO_GT", "CO_LIKE", "AND", "OR", "QUOTE_DELIM", 
                  "ID", "DECIMAL", "INTEGER", "WS", "SL_COMMENT", "UNDERSCORE", 
                  "NUMBER", "LETTER" ]

    grammarFileName = "sdpl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    CHANNEL_WHITESPACE = 1
    CHANNEL_COMMENTS = 2


