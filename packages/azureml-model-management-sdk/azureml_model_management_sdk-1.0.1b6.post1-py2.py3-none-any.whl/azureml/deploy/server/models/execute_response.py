# coding: utf-8

"""
    MLServer
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExecuteResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, success=None, error_message=None, output_parameters=None, console_output=None, changed_files=None):
        """
        ExecuteResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'success': 'bool',
            'error_message': 'str',
            'output_parameters': 'list[SessionsidexecuteInputParameters]',
            'console_output': 'str',
            'changed_files': 'list[str]'
        }

        self.attribute_map = {
            'success': 'success',
            'error_message': 'errorMessage',
            'output_parameters': 'outputParameters',
            'console_output': 'consoleOutput',
            'changed_files': 'changedFiles'
        }

        self._success = success
        self._error_message = error_message
        self._output_parameters = output_parameters
        self._console_output = console_output
        self._changed_files = changed_files

    @property
    def success(self):
        """
        Gets the success of this ExecuteResponse.
        The operation was successful.

        :return: The success of this ExecuteResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this ExecuteResponse.
        The operation was successful.

        :param success: The success of this ExecuteResponse.
        :type: bool
        """

        self._success = success

    @property
    def error_message(self):
        """
        Gets the error_message of this ExecuteResponse.
        Errors returned by the execution.

        :return: The error_message of this ExecuteResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this ExecuteResponse.
        Errors returned by the execution.

        :param error_message: The error_message of this ExecuteResponse.
        :type: str
        """

        self._error_message = error_message

    @property
    def output_parameters(self):
        """
        Gets the output_parameters of this ExecuteResponse.
        Output parameters for the execution.

        :return: The output_parameters of this ExecuteResponse.
        :rtype: list[SessionsidexecuteInputParameters]
        """
        return self._output_parameters

    @output_parameters.setter
    def output_parameters(self, output_parameters):
        """
        Sets the output_parameters of this ExecuteResponse.
        Output parameters for the execution.

        :param output_parameters: The output_parameters of this ExecuteResponse.
        :type: list[SessionsidexecuteInputParameters]
        """

        self._output_parameters = output_parameters

    @property
    def console_output(self):
        """
        Gets the console_output of this ExecuteResponse.
        The console output of the execution.

        :return: The console_output of this ExecuteResponse.
        :rtype: str
        """
        return self._console_output

    @console_output.setter
    def console_output(self, console_output):
        """
        Sets the console_output of this ExecuteResponse.
        The console output of the execution.

        :param console_output: The console_output of this ExecuteResponse.
        :type: str
        """

        self._console_output = console_output

    @property
    def changed_files(self):
        """
        Gets the changed_files of this ExecuteResponse.
        The filenames of the files modified during execution.

        :return: The changed_files of this ExecuteResponse.
        :rtype: list[str]
        """
        return self._changed_files

    @changed_files.setter
    def changed_files(self, changed_files):
        """
        Sets the changed_files of this ExecuteResponse.
        The filenames of the files modified during execution.

        :param changed_files: The changed_files of this ExecuteResponse.
        :type: list[str]
        """

        self._changed_files = changed_files

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExecuteResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
