# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t; python-indent: 4 -*-

"""
    MLServer    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateSessionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, snapshot_id=None, runtime_type=None):
        """
        CreateSessionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'snapshot_id': 'str',
            'runtime_type': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'snapshot_id': 'snapshotId',
            'runtime_type': 'runtimeType'
        }

        self._name = name
        self._snapshot_id = snapshot_id
        self._runtime_type = runtime_type

    @property
    def name(self):
        """
        Gets the name of this CreateSessionRequest.
        Name of the session. **Optional**

        :return: The name of this CreateSessionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateSessionRequest.
        Name of the session. **Optional**

        :param name: The name of this CreateSessionRequest.
        :type: str
        """

        self._name = name

    @property
    def snapshot_id(self):
        """
        Gets the snapshot_id of this CreateSessionRequest.
        Id of the snapshot to be loaded into the new created session. **Optional**

        :return: The snapshot_id of this CreateSessionRequest.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """
        Sets the snapshot_id of this CreateSessionRequest.
        Id of the snapshot to be loaded into the new created session. **Optional**

        :param snapshot_id: The snapshot_id of this CreateSessionRequest.
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def runtime_type(self):
        """
        Gets the runtime_type of this CreateSessionRequest.
        Type of the runtime. **Optional [Default R]**

        :return: The runtime_type of this CreateSessionRequest.
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """
        Sets the runtime_type of this CreateSessionRequest.
        Type of the runtime. **Optional [Default R]**

        :param runtime_type: The runtime_type of this CreateSessionRequest.
        :type: str
        """
        allowed_values = ["R", "Python"]
        if runtime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        # Convert model obj to dict except
        # attributes `swagger_types`, `attribute_map`
        # and attributes which value is not None.
        # Convert attribute name to json key in
        # model definition for request.
        obj = self
        result = {obj.attribute_map[attr]: getattr(obj, attr)
                    for attr, _ in iteritems(obj.swagger_types)
                    if getattr(obj, attr) is not None}

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateSessionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
