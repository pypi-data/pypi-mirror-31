# coding: utf-8

"""
    MLServer
        
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PublishRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, snapshot_id=None, code=None, description=None, operation_id=None, input_parameter_definitions=None, output_parameter_definitions=None, runtime_type=None, init_code=None, output_file_names=None):
        """
        PublishRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'snapshot_id': 'str',
            'code': 'str',
            'description': 'str',
            'operation_id': 'str',
            'input_parameter_definitions': 'list[ServicesInputParameterDefinitions]',
            'output_parameter_definitions': 'list[ServicesOutputParameterDefinitions]',
            'runtime_type': 'str',
            'init_code': 'str',
            'output_file_names': 'list[str]'
        }

        self.attribute_map = {
            'snapshot_id': 'snapshotId',
            'code': 'code',
            'description': 'description',
            'operation_id': 'operationId',
            'input_parameter_definitions': 'inputParameterDefinitions',
            'output_parameter_definitions': 'outputParameterDefinitions',
            'runtime_type': 'runtimeType',
            'init_code': 'initCode',
            'output_file_names': 'outputFileNames'
        }

        self._snapshot_id = snapshot_id
        self._code = code
        self._description = description
        self._operation_id = operation_id
        self._input_parameter_definitions = input_parameter_definitions
        self._output_parameter_definitions = output_parameter_definitions
        self._runtime_type = runtime_type
        self._init_code = init_code
        self._output_file_names = output_file_names

    @property
    def snapshot_id(self):
        """
        Gets the snapshot_id of this PublishRequest.
        ID of the snapshot to be used for service. **Optional**

        :return: The snapshot_id of this PublishRequest.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """
        Sets the snapshot_id of this PublishRequest.
        ID of the snapshot to be used for service. **Optional**

        :param snapshot_id: The snapshot_id of this PublishRequest.
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def code(self):
        """
        Gets the code of this PublishRequest.
        Code to execute. Specific to the runtime type. **<font color = 'red'>Required</font>**

        :return: The code of this PublishRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this PublishRequest.
        Code to execute. Specific to the runtime type. **<font color = 'red'>Required</font>**

        :param code: The code of this PublishRequest.
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """
        Gets the description of this PublishRequest.
        Description for the web service. **Optional**

        :return: The description of this PublishRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PublishRequest.
        Description for the web service. **Optional**

        :param description: The description of this PublishRequest.
        :type: str
        """

        self._description = description

    @property
    def operation_id(self):
        """
        Gets the operation_id of this PublishRequest.
        Swagger operationId/alias for web service. **Optional**

        :return: The operation_id of this PublishRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """
        Sets the operation_id of this PublishRequest.
        Swagger operationId/alias for web service. **Optional**

        :param operation_id: The operation_id of this PublishRequest.
        :type: str
        """

        self._operation_id = operation_id

    @property
    def input_parameter_definitions(self):
        """
        Gets the input_parameter_definitions of this PublishRequest.
        Input parameters definitions for the execution. **Optional**

        :return: The input_parameter_definitions of this PublishRequest.
        :rtype: list[ServicesInputParameterDefinitions]
        """
        return self._input_parameter_definitions

    @input_parameter_definitions.setter
    def input_parameter_definitions(self, input_parameter_definitions):
        """
        Sets the input_parameter_definitions of this PublishRequest.
        Input parameters definitions for the execution. **Optional**

        :param input_parameter_definitions: The input_parameter_definitions of this PublishRequest.
        :type: list[ServicesInputParameterDefinitions]
        """

        self._input_parameter_definitions = input_parameter_definitions

    @property
    def output_parameter_definitions(self):
        """
        Gets the output_parameter_definitions of this PublishRequest.
        Output parameter definitions for the execution. **Optional**

        :return: The output_parameter_definitions of this PublishRequest.
        :rtype: list[ServicesInputParameterDefinitions]
        """
        return self._output_parameter_definitions

    @output_parameter_definitions.setter
    def output_parameter_definitions(self, output_parameter_definitions):
        """
        Sets the output_parameter_definitions of this PublishRequest.
        Output parameter definitions for the execution. **Optional**

        :param output_parameter_definitions: The output_parameter_definitions of this PublishRequest.
        :type: list[ServicesInputParameterDefinitions]
        """

        self._output_parameter_definitions = output_parameter_definitions

    @property
    def runtime_type(self):
        """
        Gets the runtime_type of this PublishRequest.
        Type of the runtime. **Optional [Default R]**

        :return: The runtime_type of this PublishRequest.
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """
        Sets the runtime_type of this PublishRequest.
        Type of the runtime. **Optional [Default R]**

        :param runtime_type: The runtime_type of this PublishRequest.
        :type: str
        """
        allowed_values = ["R", "Python"]
        if runtime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def init_code(self):
        """
        Gets the init_code of this PublishRequest.
        Code that runs before each request. Specific to the runtime type. **Optional**

        :return: The init_code of this PublishRequest.
        :rtype: str
        """
        return self._init_code

    @init_code.setter
    def init_code(self, init_code):
        """
        Sets the init_code of this PublishRequest.
        Code that runs before each request. Specific to the runtime type. **Optional**

        :param init_code: The init_code of this PublishRequest.
        :type: str
        """

        self._init_code = init_code

    @property
    def output_file_names(self):
        """
        Gets the output_file_names of this PublishRequest.
        Files that are returned by the response. **Optional**

        :return: The output_file_names of this PublishRequest.
        :rtype: list[str]
        """
        return self._output_file_names

    @output_file_names.setter
    def output_file_names(self, output_file_names):
        """
        Sets the output_file_names of this PublishRequest.
        Files that are returned by the response. **Optional**

        :param output_file_names: The output_file_names of this PublishRequest.
        :type: list[str]
        """

        self._output_file_names = output_file_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        # Convert model obj to dict except
        # attributes `swagger_types`, `attribute_map`
        # and attributes which value is not None.
        # Convert attribute name to json key in
        # model definition for request.
        def sanitize_for_serialization(obj):
            return {
                obj.attribute_map[attr]: getattr(obj, attr)
                for attr, _ in iteritems(obj.swagger_types)
                if getattr(obj, attr) is not None
            }

        result = sanitize_for_serialization(self)

        obj = result['inputParameterDefinitions']
        result['inputParameterDefinitions'] = \
            [sanitize_for_serialization(sub_obj) for sub_obj in obj]

        obj = result['outputParameterDefinitions']
        result['outputParameterDefinitions'] = \
            [sanitize_for_serialization(sub_obj) for sub_obj in obj]

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PublishRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
