"""Tests for neighborlist generation."""
import unittest
import numpy as np

from ase.ga.data import DataConnection

from catlearn import __path__ as catlearn_path
from catlearn.utilities.neighborlist import (ase_neighborlist,
                                             catlearn_neighborlist)

catlearn_path = '/'.join(catlearn_path[0].split('/')[:-1])


class TestNeighborList(unittest.TestCase):
    """Test out the various neighborlist generation routines."""

    def test_ase_nl(self):
        """Function to test the ase wrapper."""
        # Connect database generated by a GA search.
        gadb = DataConnection('{}/data/gadb.db'.format(catlearn_path))

        # Get all relaxed candidates from the db file.
        all_cand = gadb.get_all_relaxed_candidates(use_extinct=False)

        nl = ase_neighborlist(all_cand[0])

        self.assertEqual(len(all_cand[0]), len(nl))

    def test_catlearn_nl(self):
        """Function to test the ase wrapper."""
        # Connect database generated by a GA search.
        gadb = DataConnection('{}/data/gadb.db'.format(catlearn_path))

        # Get all relaxed candidates from the db file.
        all_cand = gadb.get_all_relaxed_candidates(use_extinct=False)

        nl1 = catlearn_neighborlist(all_cand[0], max_neighbor=1)
        self.assertEqual((len(all_cand[0]), len(all_cand[0])), np.shape(nl1))
        nl4 = catlearn_neighborlist(all_cand[0], max_neighbor=4)
        self.assertFalse(np.allclose(nl1, nl4))

        nl5 = catlearn_neighborlist(all_cand[0], max_neighbor=5)
        nlfull = catlearn_neighborlist(all_cand[0], max_neighbor='full')
        self.assertFalse(np.allclose(nl4, nl5))
        self.assertTrue(np.allclose(nl5, nlfull))


if __name__ == '__main__':
    unittest.main()
