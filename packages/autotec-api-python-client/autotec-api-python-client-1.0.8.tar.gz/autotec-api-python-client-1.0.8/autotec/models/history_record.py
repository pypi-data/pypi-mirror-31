# coding: utf-8

"""
    AutoTec Services API

    API for methods pertaining to all AutoTec services  # noqa: E501

    OpenAPI spec version: 1.0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HistoryRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accident_sequence_number': 'int',
        'activity_code': 'int',
        'case_number': 'str',
        'category': 'str',
        'checklist_group': 'int',
        'city': 'str',
        '_date': 'date',
        'lease': 'bool',
        'lien': 'bool',
        'odometer': 'int',
        'org_name': 'str',
        'phone': 'str',
        'state': 'str',
        'title': 'str',
        'type': 'str',
        'uom': 'str'
    }

    attribute_map = {
        'accident_sequence_number': 'accidentSequenceNumber',
        'activity_code': 'activityCode',
        'case_number': 'caseNumber',
        'category': 'category',
        'checklist_group': 'checklistGroup',
        'city': 'city',
        '_date': 'date',
        'lease': 'lease',
        'lien': 'lien',
        'odometer': 'odometer',
        'org_name': 'orgName',
        'phone': 'phone',
        'state': 'state',
        'title': 'title',
        'type': 'type',
        'uom': 'uom'
    }

    def __init__(self, accident_sequence_number=None, activity_code=None, case_number=None, category=None, checklist_group=None, city=None, _date=None, lease=None, lien=None, odometer=None, org_name=None, phone=None, state=None, title=None, type=None, uom=None):  # noqa: E501
        """HistoryRecord - a model defined in Swagger"""  # noqa: E501

        self._accident_sequence_number = None
        self._activity_code = None
        self._case_number = None
        self._category = None
        self._checklist_group = None
        self._city = None
        self.__date = None
        self._lease = None
        self._lien = None
        self._odometer = None
        self._org_name = None
        self._phone = None
        self._state = None
        self._title = None
        self._type = None
        self._uom = None
        self.discriminator = None

        if accident_sequence_number is not None:
            self.accident_sequence_number = accident_sequence_number
        if activity_code is not None:
            self.activity_code = activity_code
        if case_number is not None:
            self.case_number = case_number
        if category is not None:
            self.category = category
        if checklist_group is not None:
            self.checklist_group = checklist_group
        if city is not None:
            self.city = city
        if _date is not None:
            self._date = _date
        if lease is not None:
            self.lease = lease
        if lien is not None:
            self.lien = lien
        if odometer is not None:
            self.odometer = odometer
        if org_name is not None:
            self.org_name = org_name
        if phone is not None:
            self.phone = phone
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if uom is not None:
            self.uom = uom

    @property
    def accident_sequence_number(self):
        """Gets the accident_sequence_number of this HistoryRecord.  # noqa: E501

        the accident sequence number  # noqa: E501

        :return: The accident_sequence_number of this HistoryRecord.  # noqa: E501
        :rtype: int
        """
        return self._accident_sequence_number

    @accident_sequence_number.setter
    def accident_sequence_number(self, accident_sequence_number):
        """Sets the accident_sequence_number of this HistoryRecord.

        the accident sequence number  # noqa: E501

        :param accident_sequence_number: The accident_sequence_number of this HistoryRecord.  # noqa: E501
        :type: int
        """

        self._accident_sequence_number = accident_sequence_number

    @property
    def activity_code(self):
        """Gets the activity_code of this HistoryRecord.  # noqa: E501

        the unique identifier for the activity type  # noqa: E501

        :return: The activity_code of this HistoryRecord.  # noqa: E501
        :rtype: int
        """
        return self._activity_code

    @activity_code.setter
    def activity_code(self, activity_code):
        """Sets the activity_code of this HistoryRecord.

        the unique identifier for the activity type  # noqa: E501

        :param activity_code: The activity_code of this HistoryRecord.  # noqa: E501
        :type: int
        """

        self._activity_code = activity_code

    @property
    def case_number(self):
        """Gets the case_number of this HistoryRecord.  # noqa: E501

        the case number  # noqa: E501

        :return: The case_number of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._case_number

    @case_number.setter
    def case_number(self, case_number):
        """Sets the case_number of this HistoryRecord.

        the case number  # noqa: E501

        :param case_number: The case_number of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._case_number = case_number

    @property
    def category(self):
        """Gets the category of this HistoryRecord.  # noqa: E501

        the activity category  # noqa: E501

        :return: The category of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HistoryRecord.

        the activity category  # noqa: E501

        :param category: The category of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def checklist_group(self):
        """Gets the checklist_group of this HistoryRecord.  # noqa: E501

        the checklist group  # noqa: E501

        :return: The checklist_group of this HistoryRecord.  # noqa: E501
        :rtype: int
        """
        return self._checklist_group

    @checklist_group.setter
    def checklist_group(self, checklist_group):
        """Sets the checklist_group of this HistoryRecord.

        the checklist group  # noqa: E501

        :param checklist_group: The checklist_group of this HistoryRecord.  # noqa: E501
        :type: int
        """

        self._checklist_group = checklist_group

    @property
    def city(self):
        """Gets the city of this HistoryRecord.  # noqa: E501

        the city in which the activity was reported  # noqa: E501

        :return: The city of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this HistoryRecord.

        the city in which the activity was reported  # noqa: E501

        :param city: The city of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def _date(self):
        """Gets the _date of this HistoryRecord.  # noqa: E501

        the date of the activity  # noqa: E501

        :return: The _date of this HistoryRecord.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HistoryRecord.

        the date of the activity  # noqa: E501

        :param _date: The _date of this HistoryRecord.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def lease(self):
        """Gets the lease of this HistoryRecord.  # noqa: E501

        indicates if this is a lease record  # noqa: E501

        :return: The lease of this HistoryRecord.  # noqa: E501
        :rtype: bool
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this HistoryRecord.

        indicates if this is a lease record  # noqa: E501

        :param lease: The lease of this HistoryRecord.  # noqa: E501
        :type: bool
        """

        self._lease = lease

    @property
    def lien(self):
        """Gets the lien of this HistoryRecord.  # noqa: E501

        indicates if this is a lein record  # noqa: E501

        :return: The lien of this HistoryRecord.  # noqa: E501
        :rtype: bool
        """
        return self._lien

    @lien.setter
    def lien(self, lien):
        """Sets the lien of this HistoryRecord.

        indicates if this is a lein record  # noqa: E501

        :param lien: The lien of this HistoryRecord.  # noqa: E501
        :type: bool
        """

        self._lien = lien

    @property
    def odometer(self):
        """Gets the odometer of this HistoryRecord.  # noqa: E501

        the odometer reading  # noqa: E501

        :return: The odometer of this HistoryRecord.  # noqa: E501
        :rtype: int
        """
        return self._odometer

    @odometer.setter
    def odometer(self, odometer):
        """Sets the odometer of this HistoryRecord.

        the odometer reading  # noqa: E501

        :param odometer: The odometer of this HistoryRecord.  # noqa: E501
        :type: int
        """

        self._odometer = odometer

    @property
    def org_name(self):
        """Gets the org_name of this HistoryRecord.  # noqa: E501

        the name of the reporting organization  # noqa: E501

        :return: The org_name of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this HistoryRecord.

        the name of the reporting organization  # noqa: E501

        :param org_name: The org_name of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def phone(self):
        """Gets the phone of this HistoryRecord.  # noqa: E501

        the phone of the reporting organization  # noqa: E501

        :return: The phone of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this HistoryRecord.

        the phone of the reporting organization  # noqa: E501

        :param phone: The phone of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this HistoryRecord.  # noqa: E501

        the state in which the activity occurred  # noqa: E501

        :return: The state of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HistoryRecord.

        the state in which the activity occurred  # noqa: E501

        :param state: The state of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this HistoryRecord.  # noqa: E501

        the title record  # noqa: E501

        :return: The title of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HistoryRecord.

        the title record  # noqa: E501

        :param title: The title of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this HistoryRecord.  # noqa: E501

        the type of activity  # noqa: E501

        :return: The type of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HistoryRecord.

        the type of activity  # noqa: E501

        :param type: The type of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uom(self):
        """Gets the uom of this HistoryRecord.  # noqa: E501

        the odometer unit of measurement  # noqa: E501

        :return: The uom of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this HistoryRecord.

        the odometer unit of measurement  # noqa: E501

        :param uom: The uom of this HistoryRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "K", "U"]  # noqa: E501
        if uom not in allowed_values:
            raise ValueError(
                "Invalid value for `uom` ({0}), must be one of {1}"  # noqa: E501
                .format(uom, allowed_values)
            )

        self._uom = uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
