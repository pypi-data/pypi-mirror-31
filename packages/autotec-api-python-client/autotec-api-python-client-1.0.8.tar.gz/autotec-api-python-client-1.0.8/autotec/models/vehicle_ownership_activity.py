# coding: utf-8

"""
    AutoTec Services API

    API for methods pertaining to all AutoTec services  # noqa: E501

    OpenAPI spec version: 1.0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleOwnershipActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accident_event': 'bool',
        'owner_end_date': 'date',
        'owner_sequence_number': 'int',
        'owner_start_date': 'date',
        'owner_state': 'str',
        'ownership_duration': 'str',
        'year_purchased': 'int'
    }

    attribute_map = {
        'accident_event': 'accidentEvent',
        'owner_end_date': 'ownerEndDate',
        'owner_sequence_number': 'ownerSequenceNumber',
        'owner_start_date': 'ownerStartDate',
        'owner_state': 'ownerState',
        'ownership_duration': 'ownershipDuration',
        'year_purchased': 'yearPurchased'
    }

    def __init__(self, accident_event=None, owner_end_date=None, owner_sequence_number=None, owner_start_date=None, owner_state=None, ownership_duration=None, year_purchased=None):  # noqa: E501
        """VehicleOwnershipActivity - a model defined in Swagger"""  # noqa: E501

        self._accident_event = None
        self._owner_end_date = None
        self._owner_sequence_number = None
        self._owner_start_date = None
        self._owner_state = None
        self._ownership_duration = None
        self._year_purchased = None
        self.discriminator = None

        if accident_event is not None:
            self.accident_event = accident_event
        if owner_end_date is not None:
            self.owner_end_date = owner_end_date
        if owner_sequence_number is not None:
            self.owner_sequence_number = owner_sequence_number
        if owner_start_date is not None:
            self.owner_start_date = owner_start_date
        if owner_state is not None:
            self.owner_state = owner_state
        if ownership_duration is not None:
            self.ownership_duration = ownership_duration
        if year_purchased is not None:
            self.year_purchased = year_purchased

    @property
    def accident_event(self):
        """Gets the accident_event of this VehicleOwnershipActivity.  # noqa: E501

        indicates if this owner had any accident related activity with this vehicle  # noqa: E501

        :return: The accident_event of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: bool
        """
        return self._accident_event

    @accident_event.setter
    def accident_event(self, accident_event):
        """Sets the accident_event of this VehicleOwnershipActivity.

        indicates if this owner had any accident related activity with this vehicle  # noqa: E501

        :param accident_event: The accident_event of this VehicleOwnershipActivity.  # noqa: E501
        :type: bool
        """

        self._accident_event = accident_event

    @property
    def owner_end_date(self):
        """Gets the owner_end_date of this VehicleOwnershipActivity.  # noqa: E501

        the date ownership ended  # noqa: E501

        :return: The owner_end_date of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: date
        """
        return self._owner_end_date

    @owner_end_date.setter
    def owner_end_date(self, owner_end_date):
        """Sets the owner_end_date of this VehicleOwnershipActivity.

        the date ownership ended  # noqa: E501

        :param owner_end_date: The owner_end_date of this VehicleOwnershipActivity.  # noqa: E501
        :type: date
        """

        self._owner_end_date = owner_end_date

    @property
    def owner_sequence_number(self):
        """Gets the owner_sequence_number of this VehicleOwnershipActivity.  # noqa: E501

        the sequence number  # noqa: E501

        :return: The owner_sequence_number of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: int
        """
        return self._owner_sequence_number

    @owner_sequence_number.setter
    def owner_sequence_number(self, owner_sequence_number):
        """Sets the owner_sequence_number of this VehicleOwnershipActivity.

        the sequence number  # noqa: E501

        :param owner_sequence_number: The owner_sequence_number of this VehicleOwnershipActivity.  # noqa: E501
        :type: int
        """

        self._owner_sequence_number = owner_sequence_number

    @property
    def owner_start_date(self):
        """Gets the owner_start_date of this VehicleOwnershipActivity.  # noqa: E501

        the date ownership started  # noqa: E501

        :return: The owner_start_date of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: date
        """
        return self._owner_start_date

    @owner_start_date.setter
    def owner_start_date(self, owner_start_date):
        """Sets the owner_start_date of this VehicleOwnershipActivity.

        the date ownership started  # noqa: E501

        :param owner_start_date: The owner_start_date of this VehicleOwnershipActivity.  # noqa: E501
        :type: date
        """

        self._owner_start_date = owner_start_date

    @property
    def owner_state(self):
        """Gets the owner_state of this VehicleOwnershipActivity.  # noqa: E501

        the state in which the ownership occurred  # noqa: E501

        :return: The owner_state of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: str
        """
        return self._owner_state

    @owner_state.setter
    def owner_state(self, owner_state):
        """Sets the owner_state of this VehicleOwnershipActivity.

        the state in which the ownership occurred  # noqa: E501

        :param owner_state: The owner_state of this VehicleOwnershipActivity.  # noqa: E501
        :type: str
        """
        if owner_state is not None and len(owner_state) > 2:
            raise ValueError("Invalid value for `owner_state`, length must be less than or equal to `2`")  # noqa: E501

        self._owner_state = owner_state

    @property
    def ownership_duration(self):
        """Gets the ownership_duration of this VehicleOwnershipActivity.  # noqa: E501

        the duration of ownership  # noqa: E501

        :return: The ownership_duration of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: str
        """
        return self._ownership_duration

    @ownership_duration.setter
    def ownership_duration(self, ownership_duration):
        """Sets the ownership_duration of this VehicleOwnershipActivity.

        the duration of ownership  # noqa: E501

        :param ownership_duration: The ownership_duration of this VehicleOwnershipActivity.  # noqa: E501
        :type: str
        """

        self._ownership_duration = ownership_duration

    @property
    def year_purchased(self):
        """Gets the year_purchased of this VehicleOwnershipActivity.  # noqa: E501

        the year this owner purchased the vehicle  # noqa: E501

        :return: The year_purchased of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: int
        """
        return self._year_purchased

    @year_purchased.setter
    def year_purchased(self, year_purchased):
        """Sets the year_purchased of this VehicleOwnershipActivity.

        the year this owner purchased the vehicle  # noqa: E501

        :param year_purchased: The year_purchased of this VehicleOwnershipActivity.  # noqa: E501
        :type: int
        """

        self._year_purchased = year_purchased

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleOwnershipActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
