#
# Copyright (c) 2016-2017 Illumon and Patent Pending
#

import logging
import os
import os.path
from glob import glob
import jpyutil
import jpy
import iris


def start_jvm(devroot=None,
              workspace=None,
              propfile=None,
              keyfile=None,
              classPathRoots=None,
              verbose=False,
              # The following are the jpyutil.jvm_init options which are passed through after attaching our options
              java_home=None,
              jvm_dll=None,
              jvm_maxmem=None,
              jvm_classpath=None,
              jvm_properties=None,
              jvm_options=None,
              config_file=None,
              config=None):
    """ Starts a JVM within this Python process to interface with Illumon Iris.

        This is a small convenience wrapper around jpyutil.init_jvm.
        Additionally, the Configuration is loaded and and Iris classes are brought into Python.

        :param devroot the devroot parameter for Iris; defaults to the ILLUMON_DEVROOT environment variable, or /usr/illumon/latest
        :param workspace the workspace parameter for Iris; defaults to the ILLUMON_WORKSPACE environment variable
        :param propfile the Configuration.rootFile parameter for Iris; defaults to the ILLUMON_PROPFILE environment variable
        :param keyfile your private key file for authenticating to Iris
        :param classPathRoots a list of directories, which we will recursively search for .jar files to add to the classpath
        :param verbose if True, print out the classpath and properties we have constructed

        The rest of the parameters are passed through to jpyutil.init_jvm; the
        jvm_classpath and jvm_properties may have been modified by other
        start_jvm arguments.

        :param java_home
        :param jvm_dll
        :param jvm_maxmem
        :param jvm_classpath added to the end of the classpath generated by classPathRoots
        :param jvm_properties inserted into the dictionary generated by devroot, workspace, propfile, and keyfile.
        :param jvm_options
        :param config_file
        :param config
    """

    # setup defaults

    if devroot is None and "ILLUMON_DEVROOT" in os.environ:
        devroot = os.environ["ILLUMON_DEVROOT"]
    if devroot is None and os.path.isdir("/usr/illumon/latest"):
        devroot = "/usr/illumon/latest"

    if devroot is None:
        raise IOError("idb.init: devroot is not specified.")
    if not os.path.isdir(devroot):
        raise IOError("idb.init: devroot=%s does not exist." % devroot)

    if workspace is None and "ILLUMON_WORKSPACE" in os.environ:
        workspace = os.environ["ILLUMON_WORKSPACE"]

    if workspace is None:
        raise IOError("idb.init: workspace is not specified.")
    if not os.path.isdir(workspace):
        raise IOError("idb.init: workspace=%s does not exist." % workspace)

    if propfile is None and "ILLUMON_PROPFILE" in os.environ:
        propfile = os.environ["ILLUMON_PROPFILE"]

    # setup environment

    jProperties = {}
    jProperties['devroot'] = devroot
    jProperties['workspace'] = workspace
    if propfile is not None:
        jProperties['Configuration.rootFile'] = propfile
    if keyfile is not None:
        jProperties['WAuthenticationClientManager.defaultPrivateKeyFile'] = keyfile
    if jvm_properties is not None:
        jProperties.update(jvm_properties)

    jClassPath = []

    if jvm_classpath is not None:
        jClassPath.extend(jvm_classpath)
    else:
        resourcesDir = "%s/resources" % devroot
        if os.path.isdir(resourcesDir):
            jClassPath.extend([resourcesDir])

    if classPathRoots is None:
        # If this is an actual installation, we should expect to see java_lib under devroot
        javaLib = "%s/java_lib" % devroot
        if os.path.isdir(javaLib):
            classPathRoots = [javaLib]

    if classPathRoots is not None:
        if isinstance(classPathRoots, basestring):
            classPathRoots = [classPathRoots]
        for root in classPathRoots:
            for root, dirs, files in os.walk(root):
                for f in files:
                    if f.endswith(".jar"):
                        jClassPath.append(os.path.join(root, f))

    if verbose:
        print("JVM classpath...%s" % jClassPath)
        print("JVM properties...%s" % jProperties)

    jpy.VerboseExceptions.enabled = True
    jpyutil.init_jvm(
        java_home=java_home,
        jvm_dll=jvm_dll,
        jvm_maxmem=jvm_maxmem,
        jvm_classpath=jClassPath,
        jvm_properties=jProperties,
        jvm_options=jvm_options,
        config_file=config_file,
        config=config)

    # Loads our configuration and initializes the class types

    iris.iris()
