python test/test.py


Traceback (most recent call last):

  File "test/test.py", line 17, in <module>
    shallow(bar, 15)
    │       └ 2
    └ <function shallow at 0xDEADBEEF>

  File "test/test.py", line 8, in shallow
    deep(a + b)
    │    │   └ 15
    │    └ 2
    └ <function deep at 0xDEADBEEF>

  File "test/test.py", line 13, in deep
    assert val > 10 and foo == 60
           │            └ 52
           └ 17

AssertionError: assert val > 10 and foo == 60



python test/test_color.py


False



python test/test_encoding.py


Traceback (most recent call last):

  File "test/test_encoding.py", line 14, in <module>
    div()
    └ <function div at 0xDEADBEEF>

  File "test/test_encoding.py", line 11, in div
    return _deep("天")
           └ <function _deep at 0xDEADBEEF>

  File "test/test_encoding.py", line 8, in _deep
    return 1 / val
               └ '天'

TypeError: unsupported operand type(s) for /: 'int' and 'str'



./test/test_interactive.sh


spawn python -m better_exceptions --banner=0
0
>>> import better_exceptions
>>> def foo(a):
...     assert a > 10
... 
>>> foo(1)
Traceback (most recent call last):

  File "<console>", line 1, in <module>
    foo(1)
    └ <function foo at 0xDEADBEEF>
  File "<console>", line 2, in foo
    assert a > 10
           └ 1

AssertionError: assert a > 10
>>> exit()



./test/test_string.sh



import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine

Traceback (most recent call last):

  File "<string>", line 1, in <module>
    import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine
           │                  │                 │       │             └ 5
           │                  │                 │       └ 5
           │                  │                 └ <function hook at 0xDEADBEEF>
           │                  └ <module 'test_module' from '/removed/for/test/purposes.py'>
           └ <module 'test_module' from '/removed/for/test/purposes.py'>

AssertionError: import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine

Traceback (most recent call last):

  File "<string>", line 1, in <module>
    import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine
           │                  │                 │       │             └ 5
           │                  │                 │       └ 5
           │                  │                 └ <function hook at 0xDEADBEEF>
           │                  └ <module 'test_module' from '/removed/for/test/purposes.py'>
           └ <module 'test_module' from '/removed/for/test/purposes.py'>

AssertionError: import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine

from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False

Traceback (most recent call last):

  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
                           │                      │                  │                 │       │                      │     └ 'why hello there'
                           │                      │                  │                 │       │                      └ <built-in function print>
                           │                      │                  │                 │       └ 'why hello there'
                           │                      │                  │                 └ <function hook at 0xDEADBEEF>
                           │                      │                  └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           │                      └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           └ _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)

AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
why hello there

Traceback (most recent call last):

  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
                           │                      │                  │                 │       │                      │     └ 'why hello there'
                           │                      │                  │                 │       │                      └ <built-in function print>
                           │                      │                  │                 │       └ 'why hello there'
                           │                      │                  │                 └ <function hook at 0xDEADBEEF>
                           │                      │                  └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           │                      └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           └ _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)

AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
why hello there

from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False

Traceback (most recent call last):

  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
                           │                      │                  │                 │       │                                           │     └ 'why     hello             there'
                           │                      │                  │                 │       │                                           └ <built-in function print>
                           │                      │                  │                 │       └ 'why     hello             there'
                           │                      │                  │                 └ <function hook at 0xDEADBEEF>
                           │                      │                  └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           │                      └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           └ _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)

AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
why     hello             there

Traceback (most recent call last):

  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
                           │                      │                  │                 │       │                                           │     └ 'why     hello             there'
                           │                      │                  │                 │       │                                           └ <built-in function print>
                           │                      │                  │                 │       └ 'why     hello             there'
                           │                      │                  │                 └ <function hook at 0xDEADBEEF>
                           │                      │                  └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           │                      └ <module 'test_module' from '/removed/for/test/purposes.py'>
                           └ _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)

AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
why     hello             there



python test/test_logging.py


ERROR:__main__:callback failed
Traceback (most recent call last):

  File "test/test_logging.py", line 16, in foo
    cb()
    └ <function bar3 at 0xDEADBEEF>

  File "test/test_logging.py", line 33, in bar3
    raise Exception('this is a test exception')
          └ <class 'Exception'>

Exception: this is a test exception

ERROR:__main__:callback failed
Traceback (most recent call last):

  File "test/test_logging.py", line 16, in foo
    cb()
    └ <function bar4 at 0xDEADBEEF>

  File "test/test_logging.py", line 38, in bar4
    assert baz == 90
           └ 52

AssertionError: assert baz == 90




python test/test_truncating.py


Traceback (most recent call last):

  File "test/test_truncating.py", line 12, in <module>
    div()
    └ <function ...

  File "test/test_truncating.py", line 9, in div
    return 1 / var
               └ '999999999...

TypeError: unsupported operand type(s) for /: 'int' and 'str'



python test/test_truncating_disabled.py


Traceback (most recent call last):

  File "test/test_truncating_disabled.py", line 12, in <module>
    div()
    └ <function div at 0xDEADBEEF>

  File "test/test_truncating_disabled.py", line 9, in div
    return 1 / var
               └ '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'

TypeError: unsupported operand type(s) for /: 'int' and 'str'



python test/test_indentation_error.py


Traceback (most recent call last):

  File "test/test_indentation_error.py", line 13, in <module>
    compile(code, '<string>', 'exec')
    │       └ '\nif True:\n    a = 5\n        print("foobar")  #intentional faulty indentation here.\n    b = 7\n'
    └ <built-in function compile>


  File "<string>", line 4
    print("foobar")  #intentional faulty indentation here.
    ^
IndentationError: unexpected indent



python test/test_syntax_error.py


Traceback (most recent call last):

  File "test/test_syntax_error.py", line 12, in <module>
    compile(code, '<string>', 'exec')
    │       └ '\nif True:\n    a = 5\n    b = 7 *\n'
    └ <built-in function compile>


  File "<string>", line 4
    b = 7 *
          ^
SyntaxError: invalid syntax



python test/test_attributes.py


Traceback (most recent call last):

  File "test/test_attributes.py", line 17, in <module>
    attr()
    └ <function attr at 0xDEADBEEF>

  File "test/test_attributes.py", line 15, in attr
    (b / a).test * foo(d. A or d .B) * (c.DDD.B) - c.DDD.A.isdigit() / .3
     │   │             │  │    │  │     │ │   │    │ │   │ └ <built-in method isdigit of str object at 0xDEADBEEF>
     │   │             │  │    │  │     │ │   │    │ │   └ 'string'
     │   │             │  │    │  │     │ │   │    │ └ <__main__.Obj object at 0xDEADBEEF>
     │   │             │  │    │  │     │ │   │    └ <__main__.Obj object at 0xDEADBEEF>
     │   │             │  │    │  │     │ │   └ 123
     │   │             │  │    │  │     │ └ <__main__.Obj object at 0xDEADBEEF>
     │   │             │  │    │  │     └ <__main__.Obj object at 0xDEADBEEF>
     │   │             │  │    │  └ 123
     │   │             │  │    └ <__main__.Obj object at 0xDEADBEEF>
     │   │             │  └ 'string'
     │   │             └ <__main__.Obj object at 0xDEADBEEF>
     │   └ 'string'
     └ 123

TypeError: unsupported operand type(s) for /: 'int' and 'str'



python test/test_multilines_repr.py


Traceback (most recent call last):

  File "test/test_multilines_repr.py", line 16, in <module>
    multiline()
    └ <function multiline at 0xDEADBEEF>

  File "test/test_multilines_repr.py", line 14, in multiline
    a + b
    │   └ [[1, 2, 3]
    │      [4, 5, 6]
    │      [7, 8, 9]]
    └ [[1, 2, 3]
       [4, 5, 6]
       [7, 8, 9]]

TypeError: unsupported operand type(s) for +: 'A' and 'A'



