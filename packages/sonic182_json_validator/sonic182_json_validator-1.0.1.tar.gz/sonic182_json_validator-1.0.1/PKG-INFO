Metadata-Version: 2.1
Name: sonic182_json_validator
Version: 1.0.1
Summary: A custom json validator
Home-page: https://github.com/sonic182/json_validator
Author: Johanderson Mogollon
Author-email: johanderson@mogollon.com.ve
License: MIT
Description: [![Build Status](https://travis-ci.org/sonic182/json_validator.svg?branch=master)](https://travis-ci.org/sonic182/json_validator)
        [![Coverage Status](https://coveralls.io/repos/github/sonic182/json_validator/badge.svg?branch=master)](https://coveralls.io/github/sonic182/json_validator?branch=master)
        [![PyPI version](https://badge.fury.io/py/sonic182_json_validator.svg)](https://badge.fury.io/py/sonic182_json_validator)
        # Json Validator
        
        A json validator focused on speed.
        
        * Not recursion
        * Works with Python 2.7.x, 3.4.x, 3.5.x, 3.6. It may work with 3.7.X
        * Constrains based on python types.
        * Lazy Validation
        * Constrain definitions with python types
        
        ```python
        from json_validator import JsonValidator
        
        constrain = {
              'string': {},  # str by default.
              'integer': {'type': int},
              'float': {'type': float},
              'boolean': {'type': bool},
              'json': {'type': dict },
              'list': {'type': list},
              'extra_1': {},
              'extra_2': {},
          }
          json = {
              'string': 'foo',
              'integer': 42,
              'float': 1.10,
              'boolean': True
          }
          # accepts json string, dict and lists.
          res, err = JsonValidator(constrain).validate(json)
          res == json  # => True
          err == {'extra_1': 'Missing field', 'extra_2': 'Missing field'}  # => True
        
        ```
        
        See all rules for fields [here](https://github.com/sonic182/json_validator/blob/master/tests/test_validator.py).
        
        # Install
        
        ```bash
        pip install sonic182_json_validator
        ```
        
        # Development
        
        Install packages with pip-tools:
        ```bash
        pip install pip-tools
        pip-compile
        pip-compile dev-requirements.in
        pip-sync requirements.txt dev-requirements.txt
        ```
        
        # TODO
        
        * Documentation about rules.
        
        # Contribute
        
        1. Fork
        2. create a branch `feature/your_feature`
        3. commit - push - pull request
        
        Thanks :)
Keywords: json validator dictionary
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Provides-Extra: dev
Provides-Extra: test
