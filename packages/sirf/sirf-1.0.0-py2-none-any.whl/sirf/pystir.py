# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pystir', [dirname(__file__)])
        except ImportError:
            import _pystir
            return _pystir
        if fp is not None:
            try:
                _mod = imp.load_module('_pystir', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pystir = swig_import_helper()
    del swig_import_helper
else:
    import _pystir
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cSTIR_newObject(name):
    return _pystir.cSTIR_newObject(name)
cSTIR_newObject = _pystir.cSTIR_newObject

def cSTIR_objectFromFile(name, filename):
    return _pystir.cSTIR_objectFromFile(name, filename)
cSTIR_objectFromFile = _pystir.cSTIR_objectFromFile

def cSTIR_setParameter(ptr, obj, name, value):
    return _pystir.cSTIR_setParameter(ptr, obj, name, value)
cSTIR_setParameter = _pystir.cSTIR_setParameter

def cSTIR_parameter(ptr, obj, name):
    return _pystir.cSTIR_parameter(ptr, obj, name)
cSTIR_parameter = _pystir.cSTIR_parameter

def cSTIR_setListmodeToSinogramsInterval(ptr_acq, ptr_data):
    return _pystir.cSTIR_setListmodeToSinogramsInterval(ptr_acq, ptr_data)
cSTIR_setListmodeToSinogramsInterval = _pystir.cSTIR_setListmodeToSinogramsInterval

def cSTIR_setListmodeToSinogramsFlag(ptr_lm2s, flag, v):
    return _pystir.cSTIR_setListmodeToSinogramsFlag(ptr_lm2s, flag, v)
cSTIR_setListmodeToSinogramsFlag = _pystir.cSTIR_setListmodeToSinogramsFlag

def cSTIR_setupListmodeToSinogramsConverter(ptr):
    return _pystir.cSTIR_setupListmodeToSinogramsConverter(ptr)
cSTIR_setupListmodeToSinogramsConverter = _pystir.cSTIR_setupListmodeToSinogramsConverter

def cSTIR_convertListmodeToSinograms(ptr):
    return _pystir.cSTIR_convertListmodeToSinograms(ptr)
cSTIR_convertListmodeToSinograms = _pystir.cSTIR_convertListmodeToSinograms

def cSTIR_computeRandoms(ptr):
    return _pystir.cSTIR_computeRandoms(ptr)
cSTIR_computeRandoms = _pystir.cSTIR_computeRandoms

def cSTIR_applyImageDataProcessor(ptr_p, ptr_d):
    return _pystir.cSTIR_applyImageDataProcessor(ptr_p, ptr_d)
cSTIR_applyImageDataProcessor = _pystir.cSTIR_applyImageDataProcessor

def cSTIR_createPETAcquisitionSensitivityModel(ptr_src, src):
    return _pystir.cSTIR_createPETAcquisitionSensitivityModel(ptr_src, src)
cSTIR_createPETAcquisitionSensitivityModel = _pystir.cSTIR_createPETAcquisitionSensitivityModel

def cSTIR_createPETAttenuationModel(ptr_img, ptr_am):
    return _pystir.cSTIR_createPETAttenuationModel(ptr_img, ptr_am)
cSTIR_createPETAttenuationModel = _pystir.cSTIR_createPETAttenuationModel

def cSTIR_chainPETAcquisitionSensitivityModels(ptr_first, ptr_second):
    return _pystir.cSTIR_chainPETAcquisitionSensitivityModels(ptr_first, ptr_second)
cSTIR_chainPETAcquisitionSensitivityModels = _pystir.cSTIR_chainPETAcquisitionSensitivityModels

def cSTIR_setupAcquisitionSensitivityModel(ptr_sm, ptr_ad):
    return _pystir.cSTIR_setupAcquisitionSensitivityModel(ptr_sm, ptr_ad)
cSTIR_setupAcquisitionSensitivityModel = _pystir.cSTIR_setupAcquisitionSensitivityModel

def cSTIR_applyAcquisitionSensitivityModel(ptr_sm, ptr_ad, job):
    return _pystir.cSTIR_applyAcquisitionSensitivityModel(ptr_sm, ptr_ad, job)
cSTIR_applyAcquisitionSensitivityModel = _pystir.cSTIR_applyAcquisitionSensitivityModel

def cSTIR_setupAcquisitionModel(ptr_am, ptr_dt, ptr_im):
    return _pystir.cSTIR_setupAcquisitionModel(ptr_am, ptr_dt, ptr_im)
cSTIR_setupAcquisitionModel = _pystir.cSTIR_setupAcquisitionModel

def cSTIR_acquisitionModelFwd(ptr_am, ptr_im):
    return _pystir.cSTIR_acquisitionModelFwd(ptr_am, ptr_im)
cSTIR_acquisitionModelFwd = _pystir.cSTIR_acquisitionModelFwd

def cSTIR_acquisitionModelBwd(ptr_am, ptr_ad):
    return _pystir.cSTIR_acquisitionModelBwd(ptr_am, ptr_ad)
cSTIR_acquisitionModelBwd = _pystir.cSTIR_acquisitionModelBwd

def cSTIR_getAcquisitionsStorageScheme():
    return _pystir.cSTIR_getAcquisitionsStorageScheme()
cSTIR_getAcquisitionsStorageScheme = _pystir.cSTIR_getAcquisitionsStorageScheme

def cSTIR_setAcquisitionsStorageScheme(scheme):
    return _pystir.cSTIR_setAcquisitionsStorageScheme(scheme)
cSTIR_setAcquisitionsStorageScheme = _pystir.cSTIR_setAcquisitionsStorageScheme

def cSTIR_acquisitionsDataFromTemplate(ptr_t):
    return _pystir.cSTIR_acquisitionsDataFromTemplate(ptr_t)
cSTIR_acquisitionsDataFromTemplate = _pystir.cSTIR_acquisitionsDataFromTemplate

def cSTIR_rebinnedAcquisitionData(ptr_t, num_segments_to_combine, num_views_to_combine, num_tang_poss_to_trim, do_normalisation, max_in_segment_num_to_process):
    return _pystir.cSTIR_rebinnedAcquisitionData(ptr_t, num_segments_to_combine, num_views_to_combine, num_tang_poss_to_trim, do_normalisation, max_in_segment_num_to_process)
cSTIR_rebinnedAcquisitionData = _pystir.cSTIR_rebinnedAcquisitionData

def cSTIR_acquisitionsDataFromScannerInfo(scanner, span, max_ring_diff, view_mash_factor):
    return _pystir.cSTIR_acquisitionsDataFromScannerInfo(scanner, span, max_ring_diff, view_mash_factor)
cSTIR_acquisitionsDataFromScannerInfo = _pystir.cSTIR_acquisitionsDataFromScannerInfo

def cSTIR_getAcquisitionsDimensions(ptr_acq, ptr_dim):
    return _pystir.cSTIR_getAcquisitionsDimensions(ptr_acq, ptr_dim)
cSTIR_getAcquisitionsDimensions = _pystir.cSTIR_getAcquisitionsDimensions

def cSTIR_getAcquisitionsData(ptr_acq, ptr_data):
    return _pystir.cSTIR_getAcquisitionsData(ptr_acq, ptr_data)
cSTIR_getAcquisitionsData = _pystir.cSTIR_getAcquisitionsData

def cSTIR_setAcquisitionsData(ptr_acq, ptr_data):
    return _pystir.cSTIR_setAcquisitionsData(ptr_acq, ptr_data)
cSTIR_setAcquisitionsData = _pystir.cSTIR_setAcquisitionsData

def cSTIR_fillAcquisitionsData(ptr_acq, v):
    return _pystir.cSTIR_fillAcquisitionsData(ptr_acq, v)
cSTIR_fillAcquisitionsData = _pystir.cSTIR_fillAcquisitionsData

def cSTIR_fillAcquisitionsDataFromAcquisitionsData(ptr_acq, ptr_from):
    return _pystir.cSTIR_fillAcquisitionsDataFromAcquisitionsData(ptr_acq, ptr_from)
cSTIR_fillAcquisitionsDataFromAcquisitionsData = _pystir.cSTIR_fillAcquisitionsDataFromAcquisitionsData

def cSTIR_writeAcquisitionData(ptr_acq, filename):
    return _pystir.cSTIR_writeAcquisitionData(ptr_acq, filename)
cSTIR_writeAcquisitionData = _pystir.cSTIR_writeAcquisitionData

def cSTIR_setupReconstruction(ptr_r, ptr_i):
    return _pystir.cSTIR_setupReconstruction(ptr_r, ptr_i)
cSTIR_setupReconstruction = _pystir.cSTIR_setupReconstruction

def cSTIR_runReconstruction(ptr_r, ptr_i):
    return _pystir.cSTIR_runReconstruction(ptr_r, ptr_i)
cSTIR_runReconstruction = _pystir.cSTIR_runReconstruction

def cSTIR_updateReconstruction(ptr_r, ptr_i):
    return _pystir.cSTIR_updateReconstruction(ptr_r, ptr_i)
cSTIR_updateReconstruction = _pystir.cSTIR_updateReconstruction

def cSTIR_setupObjectiveFunction(ptr_r, ptr_i):
    return _pystir.cSTIR_setupObjectiveFunction(ptr_r, ptr_i)
cSTIR_setupObjectiveFunction = _pystir.cSTIR_setupObjectiveFunction

def cSTIR_subsetSensitivity(ptr_f, subset):
    return _pystir.cSTIR_subsetSensitivity(ptr_f, subset)
cSTIR_subsetSensitivity = _pystir.cSTIR_subsetSensitivity

def cSTIR_objectiveFunctionValue(ptr_f, ptr_i):
    return _pystir.cSTIR_objectiveFunctionValue(ptr_f, ptr_i)
cSTIR_objectiveFunctionValue = _pystir.cSTIR_objectiveFunctionValue

def cSTIR_objectiveFunctionGradient(ptr_f, ptr_i, subset):
    return _pystir.cSTIR_objectiveFunctionGradient(ptr_f, ptr_i, subset)
cSTIR_objectiveFunctionGradient = _pystir.cSTIR_objectiveFunctionGradient

def cSTIR_objectiveFunctionGradientNotDivided(ptr_f, ptr_i, subset):
    return _pystir.cSTIR_objectiveFunctionGradientNotDivided(ptr_f, ptr_i, subset)
cSTIR_objectiveFunctionGradientNotDivided = _pystir.cSTIR_objectiveFunctionGradientNotDivided

def cSTIR_setupPrior(ptr_p):
    return _pystir.cSTIR_setupPrior(ptr_p)
cSTIR_setupPrior = _pystir.cSTIR_setupPrior

def cSTIR_priorGradient(ptr_p, ptr_i):
    return _pystir.cSTIR_priorGradient(ptr_p, ptr_i)
cSTIR_priorGradient = _pystir.cSTIR_priorGradient

def cSTIR_getImageDimensions(ptr, ptr_data):
    return _pystir.cSTIR_getImageDimensions(ptr, ptr_data)
cSTIR_getImageDimensions = _pystir.cSTIR_getImageDimensions

def cSTIR_getImageVoxelSizes(ptr_im, ptr_vs):
    return _pystir.cSTIR_getImageVoxelSizes(ptr_im, ptr_vs)
cSTIR_getImageVoxelSizes = _pystir.cSTIR_getImageVoxelSizes

def cSTIR_getImageData(ptr, ptr_data):
    return _pystir.cSTIR_getImageData(ptr, ptr_data)
cSTIR_getImageData = _pystir.cSTIR_getImageData

def cSTIR_setImageData(ptr_im, ptr_data):
    return _pystir.cSTIR_setImageData(ptr_im, ptr_data)
cSTIR_setImageData = _pystir.cSTIR_setImageData

def cSTIR_voxels3DF(nx, ny, nz, sx, sy, sz, x, y, z):
    return _pystir.cSTIR_voxels3DF(nx, ny, nz, sx, sy, sz, x, y, z)
cSTIR_voxels3DF = _pystir.cSTIR_voxels3DF

def cSTIR_imageFromVoxels(ptr_v):
    return _pystir.cSTIR_imageFromVoxels(ptr_v)
cSTIR_imageFromVoxels = _pystir.cSTIR_imageFromVoxels

def cSTIR_imageFromImage(ptr_v):
    return _pystir.cSTIR_imageFromImage(ptr_v)
cSTIR_imageFromImage = _pystir.cSTIR_imageFromImage

def cSTIR_imageFromAcquisitionData(ptr_ad):
    return _pystir.cSTIR_imageFromAcquisitionData(ptr_ad)
cSTIR_imageFromAcquisitionData = _pystir.cSTIR_imageFromAcquisitionData

def cSTIR_imageFromAcquisitionDataAndNxNy(ptr_ad, nx, ny):
    return _pystir.cSTIR_imageFromAcquisitionDataAndNxNy(ptr_ad, nx, ny)
cSTIR_imageFromAcquisitionDataAndNxNy = _pystir.cSTIR_imageFromAcquisitionDataAndNxNy

def cSTIR_fillImage(ptr_i, v):
    return _pystir.cSTIR_fillImage(ptr_i, v)
cSTIR_fillImage = _pystir.cSTIR_fillImage

def cSTIR_addShape(ptr_i, ptr_s, v):
    return _pystir.cSTIR_addShape(ptr_i, ptr_s, v)
cSTIR_addShape = _pystir.cSTIR_addShape

def cSTIR_writeImage(ptr_i, filename):
    return _pystir.cSTIR_writeImage(ptr_i, filename)
cSTIR_writeImage = _pystir.cSTIR_writeImage

def cSTIR_norm(ptr_x):
    return _pystir.cSTIR_norm(ptr_x)
cSTIR_norm = _pystir.cSTIR_norm

def cSTIR_dot(ptr_x, ptr_y):
    return _pystir.cSTIR_dot(ptr_x, ptr_y)
cSTIR_dot = _pystir.cSTIR_dot

def cSTIR_mult(a, ptr_x):
    return _pystir.cSTIR_mult(a, ptr_x)
cSTIR_mult = _pystir.cSTIR_mult

def cSTIR_axpby(a, ptr_x, b, ptr_y):
    return _pystir.cSTIR_axpby(a, ptr_x, b, ptr_y)
cSTIR_axpby = _pystir.cSTIR_axpby

def newTextPrinter(stream):
    return _pystir.newTextPrinter(stream)
newTextPrinter = _pystir.newTextPrinter

def newTextWriter(stream):
    return _pystir.newTextWriter(stream)
newTextWriter = _pystir.newTextWriter

def openChannel(channel, ptr_w):
    return _pystir.openChannel(channel, ptr_w)
openChannel = _pystir.openChannel

def closeChannel(channel, ptr_w):
    return _pystir.closeChannel(channel, ptr_w)
closeChannel = _pystir.closeChannel

def deleteTextPrinter(ptr):
    return _pystir.deleteTextPrinter(ptr)
deleteTextPrinter = _pystir.deleteTextPrinter

def deleteTextWriter(ptr_w):
    return _pystir.deleteTextWriter(ptr_w)
deleteTextWriter = _pystir.deleteTextWriter
# This file is compatible with both classic and new-style classes.


