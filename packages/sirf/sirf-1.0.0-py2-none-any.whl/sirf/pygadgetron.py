# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygadgetron', [dirname(__file__)])
        except ImportError:
            import _pygadgetron
            return _pygadgetron
        if fp is not None:
            try:
                _mod = imp.load_module('_pygadgetron', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pygadgetron = swig_import_helper()
    del swig_import_helper
else:
    import _pygadgetron
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cGT_newObject(name):
    return _pygadgetron.cGT_newObject(name)
cGT_newObject = _pygadgetron.cGT_newObject

def cGT_parameter(ptr, obj, name):
    return _pygadgetron.cGT_parameter(ptr, obj, name)
cGT_parameter = _pygadgetron.cGT_parameter

def cGT_setParameter(ptr, obj, par, val):
    return _pygadgetron.cGT_setParameter(ptr, obj, par, val)
cGT_setParameter = _pygadgetron.cGT_setParameter

def cGT_computeCoilImages(ptr_cis, ptr_acqs):
    return _pygadgetron.cGT_computeCoilImages(ptr_cis, ptr_acqs)
cGT_computeCoilImages = _pygadgetron.cGT_computeCoilImages

def cGT_computeCSMsFromCIs(ptr_csms, ptr_cis):
    return _pygadgetron.cGT_computeCSMsFromCIs(ptr_csms, ptr_cis)
cGT_computeCSMsFromCIs = _pygadgetron.cGT_computeCSMsFromCIs

def cGT_CoilSensitivities(file):
    return _pygadgetron.cGT_CoilSensitivities(file)
cGT_CoilSensitivities = _pygadgetron.cGT_CoilSensitivities

def cGT_computeCoilSensitivities(ptr_csms, ptr_acqs):
    return _pygadgetron.cGT_computeCoilSensitivities(ptr_csms, ptr_acqs)
cGT_computeCoilSensitivities = _pygadgetron.cGT_computeCoilSensitivities

def cGT_appendCSM(ptr_csms, nx, ny, nz, nc, ptr_re, ptr_im):
    return _pygadgetron.cGT_appendCSM(ptr_csms, nx, ny, nz, nc, ptr_re, ptr_im)
cGT_appendCSM = _pygadgetron.cGT_appendCSM

def cGT_AcquisitionModel(ptr_acqs, ptr_imgs):
    return _pygadgetron.cGT_AcquisitionModel(ptr_acqs, ptr_imgs)
cGT_AcquisitionModel = _pygadgetron.cGT_AcquisitionModel

def cGT_setCSMs(ptr_am, ptr_csms):
    return _pygadgetron.cGT_setCSMs(ptr_am, ptr_csms)
cGT_setCSMs = _pygadgetron.cGT_setCSMs

def cGT_AcquisitionModelForward(ptr_am, ptr_imgs):
    return _pygadgetron.cGT_AcquisitionModelForward(ptr_am, ptr_imgs)
cGT_AcquisitionModelForward = _pygadgetron.cGT_AcquisitionModelForward

def cGT_AcquisitionModelBackward(ptr_am, ptr_acqs):
    return _pygadgetron.cGT_AcquisitionModelBackward(ptr_am, ptr_acqs)
cGT_AcquisitionModelBackward = _pygadgetron.cGT_AcquisitionModelBackward

def cGT_setAcquisitionsStorageScheme(scheme):
    return _pygadgetron.cGT_setAcquisitionsStorageScheme(scheme)
cGT_setAcquisitionsStorageScheme = _pygadgetron.cGT_setAcquisitionsStorageScheme

def cGT_getAcquisitionsStorageScheme():
    return _pygadgetron.cGT_getAcquisitionsStorageScheme()
cGT_getAcquisitionsStorageScheme = _pygadgetron.cGT_getAcquisitionsStorageScheme

def cGT_ISMRMRDAcquisitionsFromFile(file):
    return _pygadgetron.cGT_ISMRMRDAcquisitionsFromFile(file)
cGT_ISMRMRDAcquisitionsFromFile = _pygadgetron.cGT_ISMRMRDAcquisitionsFromFile

def cGT_ISMRMRDAcquisitionsFile(file):
    return _pygadgetron.cGT_ISMRMRDAcquisitionsFile(file)
cGT_ISMRMRDAcquisitionsFile = _pygadgetron.cGT_ISMRMRDAcquisitionsFile

def cGT_processAcquisitions(ptr_proc, ptr_input):
    return _pygadgetron.cGT_processAcquisitions(ptr_proc, ptr_input)
cGT_processAcquisitions = _pygadgetron.cGT_processAcquisitions

def cGT_acquisitionFromContainer(ptr_acqs, acq_num):
    return _pygadgetron.cGT_acquisitionFromContainer(ptr_acqs, acq_num)
cGT_acquisitionFromContainer = _pygadgetron.cGT_acquisitionFromContainer

def cGT_orderAcquisitions(ptr_acqs):
    return _pygadgetron.cGT_orderAcquisitions(ptr_acqs)
cGT_orderAcquisitions = _pygadgetron.cGT_orderAcquisitions

def cGT_getAcquisitionsDimensions(ptr_acqs, ptr_dim):
    return _pygadgetron.cGT_getAcquisitionsDimensions(ptr_acqs, ptr_dim)
cGT_getAcquisitionsDimensions = _pygadgetron.cGT_getAcquisitionsDimensions

def cGT_getAcquisitionsFlags(ptr_acqs, n, ptr_f):
    return _pygadgetron.cGT_getAcquisitionsFlags(ptr_acqs, n, ptr_f)
cGT_getAcquisitionsFlags = _pygadgetron.cGT_getAcquisitionsFlags

def cGT_getAcquisitionsData(ptr_acqs, slice, ptr_r, ptr_i):
    return _pygadgetron.cGT_getAcquisitionsData(ptr_acqs, slice, ptr_r, ptr_i)
cGT_getAcquisitionsData = _pygadgetron.cGT_getAcquisitionsData

def cGT_setAcquisitionsData(ptr_acqs, na, nc, ns, ptr_re, ptr_im):
    return _pygadgetron.cGT_setAcquisitionsData(ptr_acqs, na, nc, ns, ptr_re, ptr_im)
cGT_setAcquisitionsData = _pygadgetron.cGT_setAcquisitionsData

def cGT_writeAcquisitions(ptr_acqs, filename):
    return _pygadgetron.cGT_writeAcquisitions(ptr_acqs, filename)
cGT_writeAcquisitions = _pygadgetron.cGT_writeAcquisitions

def cGT_reconstructImages(ptr_recon, ptr_input):
    return _pygadgetron.cGT_reconstructImages(ptr_recon, ptr_input)
cGT_reconstructImages = _pygadgetron.cGT_reconstructImages

def cGT_reconstructedImages(ptr_recon):
    return _pygadgetron.cGT_reconstructedImages(ptr_recon)
cGT_reconstructedImages = _pygadgetron.cGT_reconstructedImages

def cGT_readImages(file):
    return _pygadgetron.cGT_readImages(file)
cGT_readImages = _pygadgetron.cGT_readImages

def cGT_processImages(ptr_proc, ptr_input):
    return _pygadgetron.cGT_processImages(ptr_proc, ptr_input)
cGT_processImages = _pygadgetron.cGT_processImages

def cGT_selectImages(ptr_input, attr, target):
    return _pygadgetron.cGT_selectImages(ptr_input, attr, target)
cGT_selectImages = _pygadgetron.cGT_selectImages

def cGT_writeImages(ptr_imgs, out_file, out_group):
    return _pygadgetron.cGT_writeImages(ptr_imgs, out_file, out_group)
cGT_writeImages = _pygadgetron.cGT_writeImages

def cGT_imageWrapFromContainer(ptr_imgs, img_num):
    return _pygadgetron.cGT_imageWrapFromContainer(ptr_imgs, img_num)
cGT_imageWrapFromContainer = _pygadgetron.cGT_imageWrapFromContainer

def cGT_imageDataType(ptr_x, im_num):
    return _pygadgetron.cGT_imageDataType(ptr_x, im_num)
cGT_imageDataType = _pygadgetron.cGT_imageDataType

def cGT_getCoilDataDimensions(ptr_csms, csm_num, ptr_dim):
    return _pygadgetron.cGT_getCoilDataDimensions(ptr_csms, csm_num, ptr_dim)
cGT_getCoilDataDimensions = _pygadgetron.cGT_getCoilDataDimensions

def cGT_getCoilData(ptr_csms, csm_num, ptr_re, ptr_im):
    return _pygadgetron.cGT_getCoilData(ptr_csms, csm_num, ptr_re, ptr_im)
cGT_getCoilData = _pygadgetron.cGT_getCoilData

def cGT_getCoilDataAbs(ptr_csms, csm_num, ptr):
    return _pygadgetron.cGT_getCoilDataAbs(ptr_csms, csm_num, ptr)
cGT_getCoilDataAbs = _pygadgetron.cGT_getCoilDataAbs

def cGT_getImageDim(ptr_img, ptr_dim):
    return _pygadgetron.cGT_getImageDim(ptr_img, ptr_dim)
cGT_getImageDim = _pygadgetron.cGT_getImageDim

def cGT_imageType(ptr_img):
    return _pygadgetron.cGT_imageType(ptr_img)
cGT_imageType = _pygadgetron.cGT_imageType

def cGT_getImageDataAsFloatArray(ptr_img, ptr_data):
    return _pygadgetron.cGT_getImageDataAsFloatArray(ptr_img, ptr_data)
cGT_getImageDataAsFloatArray = _pygadgetron.cGT_getImageDataAsFloatArray

def cGT_getImageDataAsComplexArray(ptr_imgs, ptr_re, ptr_im):
    return _pygadgetron.cGT_getImageDataAsComplexArray(ptr_imgs, ptr_re, ptr_im)
cGT_getImageDataAsComplexArray = _pygadgetron.cGT_getImageDataAsComplexArray

def cGT_getImageDimensions(ptr_imgs, img_num, ptr_dim):
    return _pygadgetron.cGT_getImageDimensions(ptr_imgs, img_num, ptr_dim)
cGT_getImageDimensions = _pygadgetron.cGT_getImageDimensions

def cGT_getImagesDataAsFloatArray(ptr_imgs, ptr_data):
    return _pygadgetron.cGT_getImagesDataAsFloatArray(ptr_imgs, ptr_data)
cGT_getImagesDataAsFloatArray = _pygadgetron.cGT_getImagesDataAsFloatArray

def cGT_getImagesDataAsComplexArray(ptr_imgs, ptr_re, ptr_im):
    return _pygadgetron.cGT_getImagesDataAsComplexArray(ptr_imgs, ptr_re, ptr_im)
cGT_getImagesDataAsComplexArray = _pygadgetron.cGT_getImagesDataAsComplexArray

def cGT_setComplexImagesData(ptr_imgs, ptr_re, ptr_im):
    return _pygadgetron.cGT_setComplexImagesData(ptr_imgs, ptr_re, ptr_im)
cGT_setComplexImagesData = _pygadgetron.cGT_setComplexImagesData

def cGT_dataItems(ptr_x):
    return _pygadgetron.cGT_dataItems(ptr_x)
cGT_dataItems = _pygadgetron.cGT_dataItems

def cGT_norm(ptr_x):
    return _pygadgetron.cGT_norm(ptr_x)
cGT_norm = _pygadgetron.cGT_norm

def cGT_dot(ptr_x, ptr_y):
    return _pygadgetron.cGT_dot(ptr_x, ptr_y)
cGT_dot = _pygadgetron.cGT_dot

def cGT_axpby(ar, ai, ptr_x, br, bi, ptr_y):
    return _pygadgetron.cGT_axpby(ar, ai, ptr_x, br, bi, ptr_y)
cGT_axpby = _pygadgetron.cGT_axpby

def cGT_addReader(ptr_gc, id, ptr_r):
    return _pygadgetron.cGT_addReader(ptr_gc, id, ptr_r)
cGT_addReader = _pygadgetron.cGT_addReader

def cGT_addWriter(ptr_gc, id, ptr_r):
    return _pygadgetron.cGT_addWriter(ptr_gc, id, ptr_r)
cGT_addWriter = _pygadgetron.cGT_addWriter

def cGT_addGadget(ptr_gc, id, ptr_r):
    return _pygadgetron.cGT_addGadget(ptr_gc, id, ptr_r)
cGT_addGadget = _pygadgetron.cGT_addGadget

def cGT_setGadgetProperty(ptr_g, prop, val):
    return _pygadgetron.cGT_setGadgetProperty(ptr_g, prop, val)
cGT_setGadgetProperty = _pygadgetron.cGT_setGadgetProperty

def cGT_setGadgetProperties(ptr_g, props):
    return _pygadgetron.cGT_setGadgetProperties(ptr_g, props)
cGT_setGadgetProperties = _pygadgetron.cGT_setGadgetProperties

def cGT_configGadgetChain(ptr_con, ptr_gc):
    return _pygadgetron.cGT_configGadgetChain(ptr_con, ptr_gc)
cGT_configGadgetChain = _pygadgetron.cGT_configGadgetChain

def cGT_registerImagesReceiver(ptr_con, ptr_img):
    return _pygadgetron.cGT_registerImagesReceiver(ptr_con, ptr_img)
cGT_registerImagesReceiver = _pygadgetron.cGT_registerImagesReceiver

def cGT_setConnectionTimeout(ptr_con, timeout_ms):
    return _pygadgetron.cGT_setConnectionTimeout(ptr_con, timeout_ms)
cGT_setConnectionTimeout = _pygadgetron.cGT_setConnectionTimeout

def cGT_connect(ptr_con, host, port):
    return _pygadgetron.cGT_connect(ptr_con, host, port)
cGT_connect = _pygadgetron.cGT_connect

def cGT_sendConfigScript(ptr_con, config):
    return _pygadgetron.cGT_sendConfigScript(ptr_con, config)
cGT_sendConfigScript = _pygadgetron.cGT_sendConfigScript

def cGT_sendConfigFile(ptr_con, file):
    return _pygadgetron.cGT_sendConfigFile(ptr_con, file)
cGT_sendConfigFile = _pygadgetron.cGT_sendConfigFile

def cGT_sendParameters(ptr_con, par):
    return _pygadgetron.cGT_sendParameters(ptr_con, par)
cGT_sendParameters = _pygadgetron.cGT_sendParameters

def cGT_sendParametersString(ptr_con, par):
    return _pygadgetron.cGT_sendParametersString(ptr_con, par)
cGT_sendParametersString = _pygadgetron.cGT_sendParametersString

def cGT_sendAcquisitions(ptr_con, ptr_dat):
    return _pygadgetron.cGT_sendAcquisitions(ptr_con, ptr_dat)
cGT_sendAcquisitions = _pygadgetron.cGT_sendAcquisitions

def cGT_sendImages(ptr_con, ptr_img):
    return _pygadgetron.cGT_sendImages(ptr_con, ptr_img)
cGT_sendImages = _pygadgetron.cGT_sendImages

def cGT_disconnect(ptr_con):
    return _pygadgetron.cGT_disconnect(ptr_con)
cGT_disconnect = _pygadgetron.cGT_disconnect
# This file is compatible with both classic and new-style classes.


