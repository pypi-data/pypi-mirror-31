# Copyright (c) 2016, Joseph Hunkeler
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import json
import os
from datetime import datetime
from . import ABBREV
from . import git


template = """
# AUTOMATICALLY GENERATED BY 'RELIC':
# * DO NOT EDIT THIS MODULE MANUALLY.
# * DO NOT COMMIT THIS MODULE TO YOUR GIT REPOSITORY

__all__ = [
    '__version__',
    '__version_short__',
    '__version_long__',
    '__version_post__',
    '__version_commit__',
    '__version_date__',
    '__version_dirty__',
    '__build_date__',
    '__build_status__'
]

__version__ = '{0}'
__version_short__ = '{1}'
__version_long__ = '{2}'
__version_post__ = '{3}'
__version_commit__ = '{4}'
__version_date__ = '{5}'
__version_dirty__ = {6}
__build_date__ = '{7}'
__build_time__ = '{8}'
__build_status__ = 'release' if not int(__version_post__) > 0 \\
    and not __version_dirty__ \\
    else 'development'
"""


def write_template(info, module_path, filename='version.py'):
    assert isinstance(info, git.GitVersion)
    path = os.path.join(module_path, filename)
    build_date = datetime.now().date()
    build_time = datetime.now().time()
    with open(path, 'w+') as f:
        output = template.format(
            info.pep386,
            info.short,
            info.long,
            info.post,
            info.commit,
            info.date,
            info.dirty,
            build_date,
            build_time
        )
        f.write(output)


def write_info(version):
    info = version

    if isinstance(version, git.GitVersion):
        info = version._asdict()

    with open('RELIC-INFO', 'w+') as f:
        f.write(json.dumps(info))
        f.write('\n')


def read_info():
    try:
        with open('RELIC-INFO', 'r') as f:
            data = json.loads(f.read())
            return git.GitVersion(**data)
    except (OSError, IOError):
        return None


def get_info(remove_pattern='release_'):
    relic_data = read_info()
    git_data = git.git_version_info(remove_pattern=remove_pattern)

    info = git_data
    if not info:
        info = relic_data

    if not info:
        print("No version data available. Not a git repository?")
        return __fallback()

    if git_data != relic_data and git_data:
        write_info(git_data)

    return info


def __fallback():
    no_ver = '0.0.0'
    data = dict(
        pep386=no_ver,
        short=no_ver,
        long=no_ver,
        date='',
        dirty=True,
        commit='',
        post='-1',
    )
    return git.GitVersion(**data)
