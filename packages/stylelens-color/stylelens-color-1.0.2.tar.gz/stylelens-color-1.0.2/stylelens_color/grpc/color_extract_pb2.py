# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: color_extract.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='color_extract.proto',
  package='extractcolor',
  syntax='proto3',
  serialized_pb=_b('\n\x13\x63olor_extract.proto\x12\x0c\x65xtractcolor\"!\n\x0c\x43olorRequest\x12\x11\n\tfile_data\x18\x01 \x01(\x0c\"5\n\nColorReply\x12\x12\n\ncolor_code\x18\x01 \x01(\t\x12\x13\n\x0b\x63olor_score\x18\x02 \x01(\x02\x32M\n\x07\x45xtract\x12\x42\n\x08GetColor\x12\x1a.extractcolor.ColorRequest\x1a\x18.extractcolor.ColorReply\"\x00\x42\x38\n\x1aio.stylelens.color.extractB\x11\x43olorExtractProtoP\x01\xa2\x02\x04STYLb\x06proto3')
)




_COLORREQUEST = _descriptor.Descriptor(
  name='ColorRequest',
  full_name='extractcolor.ColorRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_data', full_name='extractcolor.ColorRequest.file_data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=37,
  serialized_end=70,
)


_COLORREPLY = _descriptor.Descriptor(
  name='ColorReply',
  full_name='extractcolor.ColorReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='color_code', full_name='extractcolor.ColorReply.color_code', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='color_score', full_name='extractcolor.ColorReply.color_score', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=72,
  serialized_end=125,
)

DESCRIPTOR.message_types_by_name['ColorRequest'] = _COLORREQUEST
DESCRIPTOR.message_types_by_name['ColorReply'] = _COLORREPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ColorRequest = _reflection.GeneratedProtocolMessageType('ColorRequest', (_message.Message,), dict(
  DESCRIPTOR = _COLORREQUEST,
  __module__ = 'color_extract_pb2'
  # @@protoc_insertion_point(class_scope:extractcolor.ColorRequest)
  ))
_sym_db.RegisterMessage(ColorRequest)

ColorReply = _reflection.GeneratedProtocolMessageType('ColorReply', (_message.Message,), dict(
  DESCRIPTOR = _COLORREPLY,
  __module__ = 'color_extract_pb2'
  # @@protoc_insertion_point(class_scope:extractcolor.ColorReply)
  ))
_sym_db.RegisterMessage(ColorReply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\032io.stylelens.color.extractB\021ColorExtractProtoP\001\242\002\004STYL'))

_EXTRACT = _descriptor.ServiceDescriptor(
  name='Extract',
  full_name='extractcolor.Extract',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=127,
  serialized_end=204,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetColor',
    full_name='extractcolor.Extract.GetColor',
    index=0,
    containing_service=None,
    input_type=_COLORREQUEST,
    output_type=_COLORREPLY,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_EXTRACT)

DESCRIPTOR.services_by_name['Extract'] = _EXTRACT

# @@protoc_insertion_point(module_scope)
