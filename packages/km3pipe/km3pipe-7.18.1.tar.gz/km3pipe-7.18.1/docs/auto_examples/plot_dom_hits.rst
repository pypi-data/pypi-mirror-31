

.. _sphx_glr_auto_examples_plot_dom_hits.py:


==================
DOM hits.
==================

Estimate track/DOM distances using the number of hits per DOM.




.. image:: /auto_examples/images/sphx_glr_plot_dom_hits_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Loading style definitions from '/Users/tamasgal/Dev/km3pipe/km3pipe/kp-data/stylelib/km3pipe.mplstyle'
    Pipeline and module initialisation took 0.032s (CPU 0.024s).
    --------------------------[ Blob     100 ]---------------------------
    --------------------------[ Blob     200 ]---------------------------
    --------------------------[ Blob     300 ]---------------------------
    --------------------------[ Blob     400 ]---------------------------
    --------------------------[ Blob     500 ]---------------------------
    ================================[ . ]================================
    ============================================================
    500 cycles drained in 20.399669s (CPU 9.159687s). Memory peak: 303.18 MB
      wall  mean: 0.040644s  medi: 0.018051s  min: 0.005893s  max: 9.874767s  std: 0.440532s
      CPU   mean: 0.018189s  medi: 0.016453s  min: 0.005862s  max: 0.238876s  std: 0.012843s




|


.. code-block:: python


    # Author: Tamas Gal <tgal@km3net.de>
    # License: BSD-3

    from collections import defaultdict, Counter

    import numpy as np
    import pandas as pd

    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm

    import km3pipe as kp
    from km3pipe.dataclasses import Table
    from km3pipe.math import pld3
    from km3modules.common import StatusBar
    import km3pipe.style
    km3pipe.style.use("km3pipe")


    filename = "data/km3net_jul13_90m_muatm50T655.km3_v5r1.JTE_r2356.root.0-499.h5"
    cal = kp.calib.Calibration(filename="data/km3net_jul13_90m_r1494_corrected.detx")


    def filter_muons(blob):
        """Write all muons from McTracks to Muons."""
        tracks = blob['McTracks']
        muons = tracks[tracks.type == 5]
        blob["Muons"] = Table(muons)
        return blob


    class DOMHits(kp.Module):
        """Create histogram with n_hits and distance of hit to track."""

        def configure(self):
            self.hit_statistics = defaultdict(list)

        def process(self, blob):
            hits = blob['Hits']
            muons = blob['Muons']

            highest_energetic_muon = Table(muons[np.argmax(muons.energy)])
            muon = highest_energetic_muon

            triggered_hits = hits[hits.triggered]

            dom_hits = Counter(triggered_hits.dom_id)
            for dom_id, n_hits in dom_hits.items():
                distance = pld3(cal.detector.dom_positions[dom_id],
                                muon.pos,
                                muon.dir)
                self.hit_statistics['n_hits'].append(n_hits)
                self.hit_statistics['distance'].append(distance)
            return blob

        def finish(self):
            df = pd.DataFrame(self.hit_statistics)
            sdf = df[(df['distance'] < 200) & (df['n_hits'] < 50)]
            bins = (max(sdf['distance']) - 1, max(sdf['n_hits']) - 1)
            plt.hist2d(sdf['distance'], sdf['n_hits'], cmap='plasma', bins=bins,
                       norm=LogNorm())
            plt.xlabel('Distance between hit and muon track [m]')
            plt.ylabel('Number of hits on DOM')
            plt.show()


    pipe = kp.Pipeline()
    pipe.attach(kp.io.HDF5Pump, filename=filename)
    pipe.attach(StatusBar, every=100)
    pipe.attach(filter_muons)
    pipe.attach(DOMHits)
    pipe.drain()

**Total running time of the script:** ( 0 minutes  24.911 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_dom_hits.py <plot_dom_hits.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_dom_hits.ipynb <plot_dom_hits.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
